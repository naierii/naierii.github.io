{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Reian\\\\Desktop\\\\Work\\\\Freelance\\\\Boxxer World\\\\boxxerworld-shopify-frontend\\\\customiser\\\\src\\\\components\\\\three\\\\Scene\\\\Scene.tsx\",\n  _s = $RefreshSig$();\nimport { useCustomiserStore } from '@store/customiser';\nimport { useDesignStore } from '@store/design';\nimport { forwardRef, useEffect } from 'react';\nimport { MathUtils } from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst models = state => state.selectedModels;\nconst Scene = /*#__PURE__*/_s( /*#__PURE__*/forwardRef(_c = _s(({\n  onPointerDown,\n  onPointerUp,\n  onPointerMove,\n  onClick\n}, groupRef) => {\n  _s();\n  const selectedModels = useCustomiserStore(models);\n  console.log('test selectedModels', selectedModels);\n  const modelRotation = useDesignStore(state => state.modelRotation);\n  const addingToCart = useDesignStore(state => state.addingToCart);\n  useEffect(() => {\n    if (addingToCart && typeof groupRef !== 'function' && groupRef !== null && groupRef !== void 0 && groupRef.current) {\n      groupRef.current.rotateY(MathUtils.degToRad(modelRotation));\n    }\n  }, [addingToCart, modelRotation]);\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    name: \"meshGroup\",\n    ref: groupRef,\n    onPointerDown: onPointerDown,\n    onPointerUp: onPointerUp,\n    onPointerMove: onPointerMove,\n    onClick: onClick,\n    dispose: null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 7\n  }, this);\n}, \"f50GosXBFaRWlrKdPEv2a6XNcnQ=\", false, function () {\n  return [useCustomiserStore, useDesignStore, useDesignStore];\n})), \"f50GosXBFaRWlrKdPEv2a6XNcnQ=\", false, function () {\n  return [useCustomiserStore, useDesignStore, useDesignStore];\n});\n_c2 = Scene;\nScene.displayName = 'Scene';\nexport default Scene;\nvar _c, _c2;\n$RefreshReg$(_c, \"Scene$forwardRef\");\n$RefreshReg$(_c2, \"Scene\");","map":{"version":3,"names":["useCustomiserStore","useDesignStore","forwardRef","useEffect","MathUtils","jsxDEV","_jsxDEV","models","state","selectedModels","Scene","_s","_c","onPointerDown","onPointerUp","onPointerMove","onClick","groupRef","console","log","modelRotation","addingToCart","current","rotateY","degToRad","name","ref","dispose","fileName","_jsxFileName","lineNumber","columnNumber","_c2","displayName","$RefreshReg$"],"sources":["C:/Users/Reian/Desktop/Work/Freelance/Boxxer World/boxxerworld-shopify-frontend/customiser/src/components/three/Scene/Scene.tsx"],"sourcesContent":["import { EventHandlers } from '@react-three/fiber/dist/declarations/src/core/events';\r\nimport { CustomiserState, useCustomiserStore } from '@store/customiser';\r\nimport { useDesignStore } from '@store/design';\r\nimport { forwardRef, useEffect } from 'react';\r\nimport { Group, MathUtils } from 'three';\r\nimport Model from '../Model';\r\nimport ModelDecals from '../ModelDecals';\r\nimport ModelMerge from '../ModelMerge';\r\n\r\nconst models = (state: CustomiserState) => state.selectedModels;\r\n\r\nexport interface SceneProps {\r\n  onPointerDown?: EventHandlers['onPointerDown'];\r\n  onPointerUp?: EventHandlers['onPointerUp'];\r\n  onPointerMove?: EventHandlers['onPointerMove'];\r\n  onClick?: EventHandlers['onClick'];\r\n}\r\n\r\nconst Scene = forwardRef<Group, SceneProps>(\r\n  ({ onPointerDown, onPointerUp, onPointerMove, onClick }: SceneProps, groupRef) => {\r\n    const selectedModels = useCustomiserStore(models);\r\n    console.log('test selectedModels', selectedModels);\r\n    const modelRotation = useDesignStore((state) => state.modelRotation);\r\n    const addingToCart = useDesignStore((state) => state.addingToCart);\r\n\r\n    useEffect(() => {\r\n      if (addingToCart && typeof groupRef !== 'function' && groupRef?.current) {\r\n        groupRef.current.rotateY(MathUtils.degToRad(modelRotation));\r\n      }\r\n    }, [addingToCart, modelRotation]);\r\n\r\n    return (\r\n      <group\r\n        name='meshGroup'\r\n        ref={groupRef}\r\n        onPointerDown={onPointerDown}\r\n        onPointerUp={onPointerUp}\r\n        onPointerMove={onPointerMove}\r\n        onClick={onClick}\r\n        dispose={null}\r\n      >\r\n        {/* <ModelMerge>\r\n          {({ addNodes, geom }) => (\r\n            <>\r\n              {selectedModels.map((m) => (\r\n                <Model key={m.model?.id} model={m.model} addNodes={addNodes} />\r\n              ))}\r\n              {geom && <ModelDecals geom={geom} />}\r\n            </>\r\n          )}\r\n        </ModelMerge> */}\r\n      </group>\r\n    );\r\n  },\r\n);\r\nScene.displayName = 'Scene';\r\n\r\nexport default Scene;\r\n"],"mappings":";;AACA,SAA0BA,kBAAkB,QAAQ,mBAAmB;AACvE,SAASC,cAAc,QAAQ,eAAe;AAC9C,SAASC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7C,SAAgBC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAKzC,MAAMC,MAAM,GAAIC,KAAsB,IAAKA,KAAK,CAACC,cAAc;AAS/D,MAAMC,KAAK,gBAAAC,EAAA,eAAGT,UAAU,CAAAU,EAAA,GAAAD,EAAA,CACtB,CAAC;EAAEE,aAAa;EAAEC,WAAW;EAAEC,aAAa;EAAEC;AAAoB,CAAC,EAAEC,QAAQ,KAAK;EAAAN,EAAA;EAChF,MAAMF,cAAc,GAAGT,kBAAkB,CAACO,MAAM,CAAC;EACjDW,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEV,cAAc,CAAC;EAClD,MAAMW,aAAa,GAAGnB,cAAc,CAAEO,KAAK,IAAKA,KAAK,CAACY,aAAa,CAAC;EACpE,MAAMC,YAAY,GAAGpB,cAAc,CAAEO,KAAK,IAAKA,KAAK,CAACa,YAAY,CAAC;EAElElB,SAAS,CAAC,MAAM;IACd,IAAIkB,YAAY,IAAI,OAAOJ,QAAQ,KAAK,UAAU,IAAIA,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEK,OAAO,EAAE;MACvEL,QAAQ,CAACK,OAAO,CAACC,OAAO,CAACnB,SAAS,CAACoB,QAAQ,CAACJ,aAAa,CAAC,CAAC;IAC7D;EACF,CAAC,EAAE,CAACC,YAAY,EAAED,aAAa,CAAC,CAAC;EAEjC,oBACEd,OAAA;IACEmB,IAAI,EAAC,WAAW;IAChBC,GAAG,EAAET,QAAS;IACdJ,aAAa,EAAEA,aAAc;IAC7BC,WAAW,EAAEA,WAAY;IACzBC,aAAa,EAAEA,aAAc;IAC7BC,OAAO,EAAEA,OAAQ;IACjBW,OAAO,EAAE;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAYT,CAAC;AAEZ,CAAC;EAAA,QAjCwB/B,kBAAkB,EAEnBC,cAAc,EACfA,cAAc;AAAA,EA+BvC,CAAC;EAAA,QAlC0BD,kBAAkB,EAEnBC,cAAc,EACfA,cAAc;AAAA,EA+BtC;AAAC+B,GAAA,GApCItB,KAAK;AAqCXA,KAAK,CAACuB,WAAW,GAAG,OAAO;AAE3B,eAAevB,KAAK;AAAC,IAAAE,EAAA,EAAAoB,GAAA;AAAAE,YAAA,CAAAtB,EAAA;AAAAsB,YAAA,CAAAF,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}