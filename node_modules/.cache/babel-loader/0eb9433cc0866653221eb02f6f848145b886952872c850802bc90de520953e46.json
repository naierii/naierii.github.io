{"ast":null,"code":"import{useTexture}from'@react-three/drei';import{useCustomiserStore}from'@store/customiser';import{useCallback,useEffect,useMemo,useRef,useState}from'react';import{Box3,DoubleSide,RepeatWrapping,Vector3}from'three';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const ClonedTextureMesh=_ref=>{let{node,texture,tasselsTexture,tassels,hex}=_ref;const[textures,setTextures]=useState();const materialRef=useRef(null);const meshRef=useRef(null);const[isPointerDown,setIsPointerDown]=useState(false);const[isPointerMoved,setIsPointerMoved]=useState(false);const clonedTextures=useMemo(()=>Object.fromEntries(Object.entries(texture).map(_ref2=>{let[k,v]=_ref2;return[k,v.clone()];})),[texture]);const{navItems,customProduct,setSelectedNav,texts,updateText}=useCustomiserStore();const editText=useMemo(()=>texts.find(t=>t.edit),[texts]);const part=useMemo(()=>{var _customProduct$attrib,_customProduct$attrib2;return customProduct===null||customProduct===void 0?void 0:(_customProduct$attrib=customProduct.attributes)===null||_customProduct$attrib===void 0?void 0:(_customProduct$attrib2=_customProduct$attrib.parts)===null||_customProduct$attrib2===void 0?void 0:_customProduct$attrib2.find(p=>{var _p$modelParts;return p===null||p===void 0?void 0:(_p$modelParts=p.modelParts)===null||_p$modelParts===void 0?void 0:_p$modelParts.data.find(mp=>{var _mp$attributes,_mp$attributes2;return((_mp$attributes=mp.attributes)===null||_mp$attributes===void 0?void 0:_mp$attributes.nodeId)===node.userData.name||((_mp$attributes2=mp.attributes)===null||_mp$attributes2===void 0?void 0:_mp$attributes2.nodeId)===node.name;});});},[customProduct,node]);const navItem=useMemo(()=>navItems.find(navItem=>navItem.id===(part===null||part===void 0?void 0:part.id)),[part,navItems]);const navItemText=useMemo(()=>navItems.find(navItem=>navItem.type==='names'),[navItems]);useEffect(()=>{if(clonedTextures&&meshRef.current){let updatedTextures={};for(const[key,clone]of Object.entries(clonedTextures)){clone.wrapS=clone.wrapT=RepeatWrapping;const boundingBox=new Box3().setFromObject(meshRef.current);const boxSize=new Vector3();const dimensions=boundingBox.getSize(boxSize);const area=dimensions.x*dimensions.y;clone.repeat.set(0.0005*area,0.0005*area);updatedTextures={...updatedTextures,[key]:clone};}setTextures(updatedTextures);}},[clonedTextures]);if(materialRef.current){materialRef.current.needsUpdate=true;}return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"mesh\",{name:node.name,geometry:node.geometry,ref:meshRef,userData:{name:node.userData.name},onPointerDown:e=>{setIsPointerDown(true);},onPointerMove:e=>{if(isPointerDown){setIsPointerMoved(true);}},onClick:e=>{var _e$intersections$find;setIsPointerDown(false);setIsPointerMoved(false);if(!isPointerDown||isPointerMoved){return;}if(editText!==null&&editText!==void 0&&editText.key){return;}const intersectedText=(_e$intersections$find=e.intersections.find(intersection=>intersection.object.userData.text))===null||_e$intersections$find===void 0?void 0:_e$intersections$find.object.userData.text;/**\r\n           * If text is clicked, go to NavItem to text\r\n           */if(navItemText&&navItemText.index!==undefined&&intersectedText&&intersectedText.key){setSelectedNav(navItemText.index);updateText(intersectedText.key,{edit:true});return;}/**\r\n           * If mesh part is clicked, go to NavItem of part\r\n           */if(navItem&&navItem.index!==undefined&&e.intersections[0].object.name===node.name){e.stopPropagation();setSelectedNav(navItem.index);}},children:tassels?/*#__PURE__*/_jsx(\"meshStandardMaterial\",{ref:materialRef,...tasselsTexture,transparent:true,bumpScale:0.15,color:hex,side:DoubleSide,metalness:-0.5}):/*#__PURE__*/_jsx(\"meshStandardMaterial\",{side:DoubleSide,...textures,displacementScale:textures!==null&&textures!==void 0&&textures.displacementMap?-0.001:undefined,ref:materialRef})})});};const CustomiserMesh=_ref3=>{let{node,nodeId}=_ref3;const texture=useCustomiserStore(useCallback(state=>state.texture(nodeId),[nodeId]));const optional=useCustomiserStore(useCallback(state=>state.optional(nodeId),[nodeId]));const tassels=useCustomiserStore(useCallback(state=>state.tassels(nodeId),[nodeId]));const materialTexture=useTexture({...texture.materials});const tasselsTexture=useTexture({alphaMap:'https://boxxer-api-dev.nyc3.cdn.digitaloceanspaces.com/tassels/tassels-opacity.jpg',bumpMap:'https://boxxer-api-dev.nyc3.cdn.digitaloceanspaces.com/tassels/tassels-bump.jpg'},textures=>{const[bumpMap,alphaMap]=textures;alphaMap.wrapS=alphaMap.wrapT=RepeatWrapping;alphaMap.flipY=false;alphaMap.repeat.set(1.5,1);alphaMap.needsUpdate=true;bumpMap.wrapS=bumpMap.wrapT=RepeatWrapping;bumpMap.flipY=false;bumpMap.repeat.set(1.5,1);bumpMap.needsUpdate=true;});if(optional){return null;}return/*#__PURE__*/_jsx(ClonedTextureMesh,{node:node,texture:materialTexture,tasselsTexture:tasselsTexture,tassels:tassels,hex:texture.hex});};export default CustomiserMesh;","map":{"version":3,"names":["useTexture","useCustomiserStore","useCallback","useEffect","useMemo","useRef","useState","Box3","DoubleSide","RepeatWrapping","Vector3","jsx","_jsx","Fragment","_Fragment","ClonedTextureMesh","_ref","node","texture","tasselsTexture","tassels","hex","textures","setTextures","materialRef","meshRef","isPointerDown","setIsPointerDown","isPointerMoved","setIsPointerMoved","clonedTextures","Object","fromEntries","entries","map","_ref2","k","v","clone","navItems","customProduct","setSelectedNav","texts","updateText","editText","find","t","edit","part","_customProduct$attrib","_customProduct$attrib2","attributes","parts","p","_p$modelParts","modelParts","data","mp","_mp$attributes","_mp$attributes2","nodeId","userData","name","navItem","id","navItemText","type","current","updatedTextures","key","wrapS","wrapT","boundingBox","setFromObject","boxSize","dimensions","getSize","area","x","y","repeat","set","needsUpdate","children","geometry","ref","onPointerDown","e","onPointerMove","onClick","_e$intersections$find","intersectedText","intersections","intersection","object","text","index","undefined","stopPropagation","transparent","bumpScale","color","side","metalness","displacementScale","displacementMap","CustomiserMesh","_ref3","state","optional","materialTexture","materials","alphaMap","bumpMap","flipY"],"sources":["C:/Users/Reian/Desktop/Work/Freelance/Boxxer World/boxxerworld-shopify-frontend/customiser/src/components/three/CustomiserMesh/CustomiserMesh.tsx"],"sourcesContent":["import { MaterialTextureMapModel } from '@models';\r\nimport { useTexture } from '@react-three/drei';\r\nimport { TextCustomiser, useCustomiserStore } from '@store/customiser';\r\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\r\nimport {\r\n  Box3,\r\n  DoubleSide,\r\n  Mesh,\r\n  MeshStandardMaterial,\r\n  RepeatWrapping,\r\n  Texture,\r\n  Vector3,\r\n} from 'three';\r\nexport interface ClonedTextureMeshProps {\r\n  node: Mesh;\r\n  texture: MaterialTextureMapModel;\r\n  tasselsTexture: MaterialTextureMapModel;\r\n  tassels: boolean;\r\n  hex: string;\r\n}\r\n\r\nconst ClonedTextureMesh = ({\r\n  node,\r\n  texture,\r\n  tasselsTexture,\r\n  tassels,\r\n  hex,\r\n}: ClonedTextureMeshProps) => {\r\n  const [textures, setTextures] = useState<MaterialTextureMapModel>();\r\n  const materialRef = useRef<MeshStandardMaterial>(null);\r\n  const meshRef = useRef<Mesh>(null);\r\n\r\n  const [isPointerDown, setIsPointerDown] = useState(false);\r\n  const [isPointerMoved, setIsPointerMoved] = useState(false);\r\n\r\n  const clonedTextures = useMemo(\r\n    () => Object.fromEntries(Object.entries(texture).map(([k, v]) => [k, v.clone()])),\r\n    [texture],\r\n  );\r\n\r\n  const { navItems, customProduct, setSelectedNav, texts, updateText } = useCustomiserStore();\r\n\r\n  const editText = useMemo(() => texts.find((t) => t.edit), [texts]);\r\n\r\n  const part = useMemo(\r\n    () =>\r\n      customProduct?.attributes?.parts?.find((p) =>\r\n        p?.modelParts?.data.find(\r\n          (mp) =>\r\n            mp.attributes?.nodeId === node.userData.name || mp.attributes?.nodeId === node.name,\r\n        ),\r\n      ),\r\n    [customProduct, node],\r\n  );\r\n  const navItem = useMemo(\r\n    () => navItems.find((navItem) => navItem.id === part?.id),\r\n    [part, navItems],\r\n  );\r\n\r\n  const navItemText = useMemo(\r\n    () => navItems.find((navItem) => navItem.type === 'names'),\r\n    [navItems],\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (clonedTextures && meshRef.current) {\r\n      let updatedTextures: MaterialTextureMapModel = {};\r\n      for (const [key, clone] of Object.entries(clonedTextures)) {\r\n        clone.wrapS = clone.wrapT = RepeatWrapping;\r\n        const boundingBox = new Box3().setFromObject(meshRef.current);\r\n        const boxSize = new Vector3();\r\n        const dimensions = boundingBox.getSize(boxSize);\r\n        const area = dimensions.x * dimensions.y;\r\n        clone.repeat.set(0.0005 * area, 0.0005 * area);\r\n        updatedTextures = { ...updatedTextures, [key]: clone };\r\n      }\r\n\r\n      setTextures(updatedTextures);\r\n    }\r\n  }, [clonedTextures]);\r\n\r\n  if (materialRef.current) {\r\n    materialRef.current.needsUpdate = true;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <mesh\r\n        name={node.name}\r\n        geometry={node.geometry}\r\n        ref={meshRef}\r\n        userData={{\r\n          name: node.userData.name,\r\n        }}\r\n        onPointerDown={(e) => {\r\n          setIsPointerDown(true);\r\n        }}\r\n        onPointerMove={(e) => {\r\n          if (isPointerDown) {\r\n            setIsPointerMoved(true);\r\n          }\r\n        }}\r\n        onClick={(e) => {\r\n          setIsPointerDown(false);\r\n          setIsPointerMoved(false);\r\n\r\n          if (!isPointerDown || isPointerMoved) {\r\n            return;\r\n          }\r\n\r\n          if (editText?.key) {\r\n            return;\r\n          }\r\n\r\n          const intersectedText = e.intersections.find(\r\n            (intersection) => intersection.object.userData.text,\r\n          )?.object.userData.text as TextCustomiser | undefined;\r\n\r\n          /**\r\n           * If text is clicked, go to NavItem to text\r\n           */\r\n          if (\r\n            navItemText &&\r\n            navItemText.index !== undefined &&\r\n            intersectedText &&\r\n            intersectedText.key\r\n          ) {\r\n            setSelectedNav(navItemText.index);\r\n            updateText(intersectedText.key, { edit: true });\r\n\r\n            return;\r\n          }\r\n\r\n          /**\r\n           * If mesh part is clicked, go to NavItem of part\r\n           */\r\n          if (\r\n            navItem &&\r\n            navItem.index !== undefined &&\r\n            e.intersections[0].object.name === node.name\r\n          ) {\r\n            e.stopPropagation();\r\n\r\n            setSelectedNav(navItem.index);\r\n          }\r\n        }}\r\n      >\r\n        {tassels ? (\r\n          <meshStandardMaterial\r\n            ref={materialRef}\r\n            {...tasselsTexture}\r\n            transparent\r\n            bumpScale={0.15}\r\n            color={hex}\r\n            side={DoubleSide}\r\n            metalness={-0.5}\r\n          />\r\n        ) : (\r\n          <meshStandardMaterial\r\n            side={DoubleSide}\r\n            {...textures}\r\n            displacementScale={textures?.displacementMap ? -0.001 : undefined}\r\n            ref={materialRef}\r\n          />\r\n        )}\r\n      </mesh>\r\n    </>\r\n  );\r\n};\r\nexport interface CustomiserMeshProps {\r\n  node: Mesh;\r\n  nodeId: string;\r\n}\r\n\r\nconst CustomiserMesh = ({ node, nodeId }: CustomiserMeshProps) => {\r\n  const texture = useCustomiserStore(useCallback((state) => state.texture(nodeId), [nodeId]));\r\n  const optional = useCustomiserStore(useCallback((state) => state.optional(nodeId), [nodeId]));\r\n  const tassels = useCustomiserStore(useCallback((state) => state.tassels(nodeId), [nodeId]));\r\n\r\n  const materialTexture = useTexture({ ...texture.materials });\r\n  const tasselsTexture = useTexture(\r\n    {\r\n      alphaMap:\r\n        'https://boxxer-api-dev.nyc3.cdn.digitaloceanspaces.com/tassels/tassels-opacity.jpg',\r\n      bumpMap: 'https://boxxer-api-dev.nyc3.cdn.digitaloceanspaces.com/tassels/tassels-bump.jpg',\r\n    },\r\n    (textures) => {\r\n      const [bumpMap, alphaMap] = textures as Texture[];\r\n      alphaMap.wrapS = alphaMap.wrapT = RepeatWrapping;\r\n      alphaMap.flipY = false;\r\n      alphaMap.repeat.set(1.5, 1);\r\n      alphaMap.needsUpdate = true;\r\n      bumpMap.wrapS = bumpMap.wrapT = RepeatWrapping;\r\n      bumpMap.flipY = false;\r\n      bumpMap.repeat.set(1.5, 1);\r\n      bumpMap.needsUpdate = true;\r\n    },\r\n  );\r\n\r\n  if (optional) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ClonedTextureMesh\r\n      node={node}\r\n      texture={materialTexture}\r\n      tasselsTexture={tasselsTexture}\r\n      tassels={tassels}\r\n      hex={texture.hex}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CustomiserMesh;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}