{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Reian\\\\Desktop\\\\Work\\\\Freelance\\\\Boxxer World\\\\boxxerworld-shopify-frontend\\\\customiser\\\\src\\\\components\\\\nav\\\\NavHeader\\\\NavHeaderScroll.tsx\",\n  _s = $RefreshSig$();\nimport DontShowAgain from '@components/ui/DontShowAgain';\nimport { usePortalRef } from '@hooks';\nimport { useCustomiserStore } from '@store/customiser';\nimport { useEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NavHeaderScroll = ({\n  styles,\n  finishedNavs,\n  setFinishedNavs\n}) => {\n  _s();\n  const {\n    navItems,\n    selectedNav,\n    setSelectedNav,\n    deleteText,\n    flags,\n    sizing\n  } = useCustomiserStore();\n  const popupPortalRef = usePortalRef('popupContainer');\n  const [showPopup, setShowPopup] = useState(false);\n  const {\n    texts,\n    updateText,\n    parts\n  } = useCustomiserStore(state => state);\n  const editText = texts === null || texts === void 0 ? void 0 : texts.find(g => g.edit);\n  const navIndex = navItems.findIndex(nav => nav.name === (selectedNav === null || selectedNav === void 0 ? void 0 : selectedNav.name));\n  useEffect(() => {\n    const partsFinishedNavs = parts.map(part => {\n      const partName = part.part.name;\n      if (!partName) return;\n      const isFinishedPart = !!navItems.find(navItem => {\n        return navItem.name === partName;\n      });\n      return {\n        name: partName,\n        isFinished: isFinishedPart\n      };\n    });\n    setFinishedNavs(cur => {\n      var _sizing$height, _sizing$weight;\n      const newFinishedNavs = [...cur, ...partsFinishedNavs, ...(finishedNavs || [])];\n      if (flags.length) {\n        newFinishedNavs.unshift({\n          name: 'Flags',\n          isFinished: true\n        });\n      } else {\n        newFinishedNavs.map(nav => {\n          if ((nav === null || nav === void 0 ? void 0 : nav.name) === 'Flags') {\n            nav.isFinished = false;\n          }\n        });\n      }\n      if (sizing !== null && sizing !== void 0 && (_sizing$height = sizing.height) !== null && _sizing$height !== void 0 && _sizing$height.value && sizing !== null && sizing !== void 0 && (_sizing$weight = sizing.weight) !== null && _sizing$weight !== void 0 && _sizing$weight.value) {\n        newFinishedNavs.unshift({\n          name: 'Size',\n          isFinished: true\n        });\n      } else {\n        newFinishedNavs.map(nav => {\n          if ((nav === null || nav === void 0 ? void 0 : nav.name) === 'Size') {\n            nav.isFinished = false;\n          }\n        });\n      }\n      const uniqueFinishedNavs = newFinishedNavs.filter((nav, index, self) => self.findIndex(t => (t === null || t === void 0 ? void 0 : t.name) === (nav === null || nav === void 0 ? void 0 : nav.name)) === index);\n      return uniqueFinishedNavs;\n    });\n  }, [parts, flags, sizing]);\n  useEffect(() => {\n    if (texts.length > 0) {\n      const iText = finishedNavs.findIndex(nav => (nav === null || nav === void 0 ? void 0 : nav.name) === 'Text');\n      if (iText === -1) {\n        finishedNavs.push({\n          name: 'Text',\n          isFinished: true\n        });\n      } else {\n        finishedNavs.map(nav => {\n          if ((nav === null || nav === void 0 ? void 0 : nav.name) === 'Text') {\n            nav.isFinished = true;\n          }\n        });\n      }\n    } else {\n      finishedNavs.map(nav => {\n        if (texts.length === 0 && (nav === null || nav === void 0 ? void 0 : nav.name) === 'Text') {\n          nav.isFinished = false;\n        }\n      });\n    }\n  }, [texts]);\n  const isFinishedNav = name => {\n    if (!name) return;\n    const finishedNav = finishedNavs.find(nav => nav && nav.name === name);\n    if (!finishedNav) return;\n    return finishedNav.isFinished;\n  };\n  const localStorageItem = localStorage.getItem('navConfirmText');\n  const shouldShowConfirmCancelText = !localStorageItem;\n  const cancelTextEdit = () => {\n    if (editText !== null && editText !== void 0 && editText.key) {\n      updateText(editText.key, {\n        decalFreeze: false,\n        edit: false,\n        hasApplied: true\n      });\n      if (!(editText !== null && editText !== void 0 && editText.hasApplied)) {\n        deleteText(editText === null || editText === void 0 ? void 0 : editText.key);\n      }\n    }\n    setSelectedNav(navIndex);\n  };\n  const navClickHandler = (index, name) => {\n    if (index === navIndex) return;\n    if (editText !== null && editText !== void 0 && editText.text && name && (name === null || name === void 0 ? void 0 : name.toLowerCase()) !== 'text') {\n      setShowPopup(true);\n    } else {\n      setSelectedNav(index);\n    }\n  };\n  if (!popupPortalRef) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles === null || styles === void 0 ? void 0 : styles.navHeaderScroll,\n      children: navItems.map((item, index) => {\n        const classes = `\n            ${(selectedNav === null || selectedNav === void 0 ? void 0 : selectedNav.name) === item.name ? styles === null || styles === void 0 ? void 0 : styles.selected : ''}\n            ${styles === null || styles === void 0 ? void 0 : styles.tab}\n          `;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes,\n          onClick: () => navClickHandler(index, item.name),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: `${styles === null || styles === void 0 ? void 0 : styles.dot} ${isFinishedNav(item.name) && (styles === null || styles === void 0 ? void 0 : styles.finished)}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles === null || styles === void 0 ? void 0 : styles.navName,\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), showPopup && shouldShowConfirmCancelText && /*#__PURE__*/createPortal( /*#__PURE__*/_jsxDEV(DontShowAgain, {\n      cb: cancelTextEdit,\n      setShowNotification: setShowPopup,\n      notifName: 'navConfirmText',\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Cancel text customization?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }, this), popupPortalRef)]\n  }, void 0, true);\n};\n_s(NavHeaderScroll, \"q/hDAF3+p/ryWl/TRo5bOF6KoGo=\", false, function () {\n  return [useCustomiserStore, usePortalRef, useCustomiserStore];\n});\n_c = NavHeaderScroll;\nexport default NavHeaderScroll;\nvar _c;\n$RefreshReg$(_c, \"NavHeaderScroll\");","map":{"version":3,"names":["DontShowAgain","usePortalRef","useCustomiserStore","useEffect","useState","createPortal","jsxDEV","_jsxDEV","Fragment","_Fragment","NavHeaderScroll","styles","finishedNavs","setFinishedNavs","_s","navItems","selectedNav","setSelectedNav","deleteText","flags","sizing","popupPortalRef","showPopup","setShowPopup","texts","updateText","parts","state","editText","find","g","edit","navIndex","findIndex","nav","name","partsFinishedNavs","map","part","partName","isFinishedPart","navItem","isFinished","cur","_sizing$height","_sizing$weight","newFinishedNavs","length","unshift","height","value","weight","uniqueFinishedNavs","filter","index","self","t","iText","push","isFinishedNav","finishedNav","localStorageItem","localStorage","getItem","shouldShowConfirmCancelText","cancelTextEdit","key","decalFreeze","hasApplied","navClickHandler","text","toLowerCase","children","className","navHeaderScroll","item","classes","selected","tab","onClick","dot","finished","fileName","_jsxFileName","lineNumber","columnNumber","navName","cb","setShowNotification","notifName","_c","$RefreshReg$"],"sources":["C:/Users/Reian/Desktop/Work/Freelance/Boxxer World/boxxerworld-shopify-frontend/customiser/src/components/nav/NavHeader/NavHeaderScroll.tsx"],"sourcesContent":["import DontShowAgain from '@components/ui/DontShowAgain';\r\nimport { usePortalRef } from '@hooks';\r\nimport { useCustomiserStore } from '@store/customiser';\r\nimport { Falsey } from 'lodash';\r\nimport { useEffect, useState } from 'react';\r\nimport { createPortal } from 'react-dom';\r\n\r\ninterface NavHeaderScrollProps {\r\n  styles?: {\r\n    readonly [key: string]: string;\r\n  };\r\n  finishedNavs: ({ name: string; isFinished: boolean } | undefined)[];\r\n  setFinishedNavs: React.Dispatch<\r\n    React.SetStateAction<({ name: string; isFinished: boolean } | undefined)[]>\r\n  >;\r\n}\r\n\r\nconst NavHeaderScroll = ({ styles, finishedNavs, setFinishedNavs }: NavHeaderScrollProps) => {\r\n  const { navItems, selectedNav, setSelectedNav, deleteText, flags, sizing } = useCustomiserStore();\r\n  const popupPortalRef = usePortalRef('popupContainer');\r\n  const [showPopup, setShowPopup] = useState<boolean>(false);\r\n\r\n  const { texts, updateText, parts } = useCustomiserStore((state) => state);\r\n  const editText = texts?.find((g) => g.edit);\r\n\r\n  const navIndex = navItems.findIndex((nav) => nav.name === selectedNav?.name);\r\n\r\n  useEffect(() => {\r\n    const partsFinishedNavs = parts.map((part) => {\r\n      const partName = part.part.name;\r\n      if (!partName) return;\r\n      const isFinishedPart = !!navItems.find((navItem) => {\r\n        return navItem.name === partName;\r\n      });\r\n      return {\r\n        name: partName,\r\n        isFinished: isFinishedPart,\r\n      };\r\n    });\r\n    setFinishedNavs((cur) => {\r\n      const newFinishedNavs = [...cur, ...partsFinishedNavs, ...(finishedNavs || [])];\r\n      if (flags.length) {\r\n        newFinishedNavs.unshift({\r\n          name: 'Flags',\r\n          isFinished: true,\r\n        });\r\n      } else {\r\n        newFinishedNavs.map((nav) => {\r\n          if (nav?.name === 'Flags') {\r\n            nav.isFinished = false;\r\n          }\r\n        });\r\n      }\r\n      if (sizing?.height?.value && sizing?.weight?.value) {\r\n        newFinishedNavs.unshift({\r\n          name: 'Size',\r\n          isFinished: true,\r\n        });\r\n      } else {\r\n        newFinishedNavs.map((nav) => {\r\n          if (nav?.name === 'Size') {\r\n            nav.isFinished = false;\r\n          }\r\n        });\r\n      }\r\n\r\n      const uniqueFinishedNavs = newFinishedNavs.filter(\r\n        (nav, index, self) => self.findIndex((t) => t?.name === nav?.name) === index,\r\n      );\r\n      return uniqueFinishedNavs;\r\n    });\r\n  }, [parts, flags, sizing]);\r\n\r\n  useEffect(() => {\r\n    if (texts.length > 0) {\r\n      const iText = finishedNavs.findIndex((nav) => nav?.name === 'Text');\r\n      if (iText === -1) {\r\n        finishedNavs.push({\r\n          name: 'Text',\r\n          isFinished: true,\r\n        });\r\n      } else {\r\n        finishedNavs.map((nav) => {\r\n          if (nav?.name === 'Text') {\r\n            nav.isFinished = true;\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      finishedNavs.map((nav) => {\r\n        if (texts.length === 0 && nav?.name === 'Text') {\r\n          nav.isFinished = false;\r\n        }\r\n      });\r\n    }\r\n  }, [texts]);\r\n\r\n  const isFinishedNav = (name?: string | Falsey) => {\r\n    if (!name) return;\r\n\r\n    const finishedNav = finishedNavs.find((nav) => nav && nav.name === name);\r\n\r\n    if (!finishedNav) return;\r\n\r\n    return finishedNav.isFinished;\r\n  };\r\n\r\n  const localStorageItem = localStorage.getItem('navConfirmText');\r\n  const shouldShowConfirmCancelText = !localStorageItem;\r\n\r\n  const cancelTextEdit = () => {\r\n    if (editText?.key) {\r\n      updateText(editText.key, {\r\n        decalFreeze: false,\r\n        edit: false,\r\n        hasApplied: true,\r\n      });\r\n\r\n      if (!editText?.hasApplied) {\r\n        deleteText(editText?.key);\r\n      }\r\n    }\r\n    setSelectedNav(navIndex);\r\n  };\r\n\r\n  const navClickHandler = (index: number, name: string | Falsey) => {\r\n    if (index === navIndex) return;\r\n    if (editText?.text && name && name?.toLowerCase() !== 'text') {\r\n      setShowPopup(true);\r\n    } else {\r\n      setSelectedNav(index);\r\n    }\r\n  };\r\n\r\n  if (!popupPortalRef) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={styles?.navHeaderScroll}>\r\n        {navItems.map((item, index) => {\r\n          const classes = `\r\n            ${selectedNav?.name === item.name ? styles?.selected : ''}\r\n            ${styles?.tab}\r\n          `;\r\n          return (\r\n            <div className={classes} key={index} onClick={() => navClickHandler(index, item.name)}>\r\n              <span className={`${styles?.dot} ${isFinishedNav(item.name) && styles?.finished}`} />\r\n              <span className={styles?.navName}>{item.name}</span>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      {showPopup &&\r\n        shouldShowConfirmCancelText &&\r\n        createPortal(\r\n          <DontShowAgain\r\n            cb={cancelTextEdit}\r\n            setShowNotification={setShowPopup}\r\n            notifName={'navConfirmText'}\r\n          >\r\n            <span>Cancel text customization?</span>\r\n          </DontShowAgain>,\r\n          popupPortalRef,\r\n        )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavHeaderScroll;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}