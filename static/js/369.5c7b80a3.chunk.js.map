{"version":3,"file":"static/js/369.5c7b80a3.chunk.js","mappings":"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","sources":["components/three/CustomiserMesh/CustomiserMesh.tsx","components/three/Model/Model.tsx","components/three/DecalGraphic/DecalGraphic.tsx","components/three/DecalText/DecalText.tsx","components/three/ModelDecals/ModelDecals.tsx","components/three/ModelMerge/ModelMerge.tsx","components/three/Scene/Scene.tsx"],"sourcesContent":["import { findNavItem } from '@lib/object';\r\nimport { MaterialTextureMapModel } from '@models';\r\nimport { useTexture } from '@react-three/drei';\r\nimport { TextCustomiser, useCustomiserStore } from '@store/customiser';\r\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\r\nimport {\r\n  Box3,\r\n  DoubleSide,\r\n  Mesh,\r\n  MeshStandardMaterial,\r\n  RepeatWrapping,\r\n  Texture,\r\n  Vector3,\r\n} from 'three';\r\nexport interface ClonedTextureMeshProps {\r\n  node: Mesh;\r\n  texture: MaterialTextureMapModel;\r\n  tasselsTexture: MaterialTextureMapModel;\r\n  tassels: boolean;\r\n  hex: string;\r\n}\r\n\r\nconst ClonedTextureMesh = ({\r\n  node,\r\n  texture,\r\n  tasselsTexture,\r\n  tassels,\r\n  hex,\r\n}: ClonedTextureMeshProps) => {\r\n  const [textures, setTextures] = useState<MaterialTextureMapModel>();\r\n  const materialRef = useRef<MeshStandardMaterial>(null);\r\n  const meshRef = useRef<Mesh>(null);\r\n\r\n  const [isPointerDown, setIsPointerDown] = useState(false);\r\n  const [isPointerMoved, setIsPointerMoved] = useState(false);\r\n\r\n  const clonedTextures = useMemo(\r\n    () => Object.fromEntries(Object.entries(texture).map(([k, v]) => [k, v.clone()])),\r\n    [texture],\r\n  );\r\n\r\n  const {\r\n    customProduct,\r\n    setSelectedNav,\r\n    selectedNav,\r\n    savedParts,\r\n    navTabs,\r\n    texts,\r\n    updateText,\r\n    updateIsMinimizedCustomiserNav,\r\n  } = useCustomiserStore();\r\n\r\n  const editText = useMemo(() => texts.find((t) => t.edit), [texts]);\r\n\r\n  const part = useMemo(\r\n    () =>\r\n      customProduct?.attributes?.parts?.find((p) =>\r\n        p?.modelParts?.data.find(\r\n          (mp) =>\r\n            mp.attributes?.nodeId === node.userData.name || mp.attributes?.nodeId === node.name,\r\n        ),\r\n      ),\r\n    [customProduct, node],\r\n  );\r\n\r\n  const navItem = useMemo(() => {\r\n    if (!part?.id) return;\r\n\r\n    return findNavItem({\r\n      navTabs,\r\n      value: part.id,\r\n      key: 'id',\r\n    });\r\n  }, [part, navTabs]);\r\n\r\n  const navItemText = useMemo(() => {\r\n    if (!part?.id) return;\r\n\r\n    return findNavItem({\r\n      navTabs,\r\n      value: 'names',\r\n      key: 'type',\r\n    });\r\n  }, [navTabs]);\r\n\r\n  useEffect(() => {\r\n    if (clonedTextures && meshRef.current) {\r\n      let updatedTextures: MaterialTextureMapModel = {};\r\n      for (const [key, clone] of Object.entries(clonedTextures)) {\r\n        clone.wrapS = clone.wrapT = RepeatWrapping;\r\n        const boundingBox = new Box3().setFromObject(meshRef.current);\r\n        const boxSize = new Vector3();\r\n        const dimensions = boundingBox.getSize(boxSize);\r\n        const area = dimensions.x * dimensions.y;\r\n        clone.repeat.set(0.0005 * area, 0.0005 * area);\r\n        updatedTextures = { ...updatedTextures, [key]: clone };\r\n      }\r\n\r\n      setTextures(updatedTextures);\r\n    }\r\n  }, [clonedTextures]);\r\n\r\n  if (materialRef.current) {\r\n    materialRef.current.needsUpdate = true;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <mesh\r\n        name={node.name}\r\n        geometry={node.geometry}\r\n        ref={meshRef}\r\n        userData={{\r\n          name: node.userData.name,\r\n        }}\r\n        onPointerDown={(e) => {\r\n          setIsPointerDown(true);\r\n        }}\r\n        onPointerUp={() => {\r\n          setIsPointerMoved(false);\r\n          setIsPointerDown(false);\r\n        }}\r\n        onPointerMove={(e) => {\r\n          if (isPointerDown) {\r\n            setIsPointerMoved(true);\r\n          }\r\n        }}\r\n        onClick={(e) => {\r\n          setIsPointerDown(false);\r\n          setIsPointerMoved(false);\r\n\r\n          if (!isPointerDown || isPointerMoved) {\r\n            return;\r\n          }\r\n\r\n          if (editText?.key) {\r\n            return;\r\n          }\r\n\r\n          const intersectedText = e.intersections.find(\r\n            (intersection) => intersection.object.userData.text,\r\n          )?.object.userData.text as TextCustomiser | undefined;\r\n\r\n          /**\r\n           * If text is clicked, go to NavItem to text\r\n           */\r\n          if (\r\n            navItemText &&\r\n            navItemText.index !== undefined &&\r\n            intersectedText &&\r\n            intersectedText.key\r\n          ) {\r\n            updateIsMinimizedCustomiserNav(false);\r\n            setSelectedNav(navItemText.index);\r\n            updateText(intersectedText.key, { edit: true });\r\n\r\n            return;\r\n          }\r\n\r\n          /**\r\n           * If mesh part is clicked, go to NavItem of part\r\n           */\r\n          if (\r\n            navItem &&\r\n            navItem.index !== undefined &&\r\n            e.intersections[0].object.name === node.name\r\n          ) {\r\n            e.stopPropagation();\r\n\r\n            updateIsMinimizedCustomiserNav(false);\r\n            setSelectedNav(navItem.index);\r\n          }\r\n        }}\r\n      >\r\n        {tassels ? (\r\n          <meshStandardMaterial\r\n            ref={materialRef}\r\n            {...tasselsTexture}\r\n            transparent\r\n            bumpScale={0.15}\r\n            // color={'hex'}\r\n            side={DoubleSide}\r\n            metalness={-0.5}\r\n          />\r\n        ) : (\r\n          <meshStandardMaterial\r\n            side={DoubleSide}\r\n            {...textures}\r\n            displacementScale={textures?.displacementMap ? -0.001 : undefined}\r\n            ref={materialRef}\r\n          />\r\n        )}\r\n      </mesh>\r\n    </>\r\n  );\r\n};\r\nexport interface CustomiserMeshProps {\r\n  node: Mesh;\r\n  nodeId: string;\r\n}\r\n\r\nconst CustomiserMesh = ({ node, nodeId }: CustomiserMeshProps) => {\r\n  const texture = useCustomiserStore(useCallback((state) => state.texture(nodeId), [nodeId]));\r\n  const optional = useCustomiserStore(useCallback((state) => state.optional(nodeId), [nodeId]));\r\n  // const tassels = useCustomiserStore(useCallback((state) => state.tassels(nodeId), [nodeId]));\r\n  const tassels = !!nodeId.includes('default');\r\n\r\n  const materialTexture = useTexture({ ...texture.materials });\r\n  const tasselsTexture = useTexture(\r\n    {\r\n      alphaMap:\r\n        'https://boxxer-api-dev.nyc3.cdn.digitaloceanspaces.com/tassels/tassels-opacity.jpg',\r\n      bumpMap: 'https://boxxer-api-dev.nyc3.cdn.digitaloceanspaces.com/tassels/tassels-bump.jpg',\r\n      map: texture.materials.map,\r\n    },\r\n    (textures) => {\r\n      const [bumpMap, alphaMap, map] = textures as Texture[];\r\n      alphaMap.wrapS = alphaMap.wrapT = RepeatWrapping;\r\n      alphaMap.flipY = false;\r\n      alphaMap.repeat.set(1.5, 1);\r\n      alphaMap.needsUpdate = true;\r\n      bumpMap.wrapS = bumpMap.wrapT = RepeatWrapping;\r\n      bumpMap.flipY = false;\r\n      bumpMap.repeat.set(1.5, 1);\r\n      bumpMap.needsUpdate = true;\r\n      map.wrapS = bumpMap.wrapT = RepeatWrapping;\r\n      map.flipY = false;\r\n      map.repeat.set(1.5, 1);\r\n      map.needsUpdate = true;\r\n    },\r\n  );\r\n\r\n  if (optional) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ClonedTextureMesh\r\n      node={node}\r\n      texture={materialTexture}\r\n      tasselsTexture={tasselsTexture}\r\n      tassels={tassels}\r\n      hex={texture.hex}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CustomiserMesh;\r\n","import { Maybe, ModelFragment } from '@graphql/generated/graphql';\r\nimport { useGLTF } from '@react-three/drei';\r\nimport { Fragment, useEffect } from 'react';\r\nimport { Material, Mesh } from 'three';\r\nimport { GLTF } from 'three-stdlib';\r\nimport CustomiserMesh from '../CustomiserMesh';\r\nimport { ModelMergeNodes } from '../ModelMerge/ModelMerge';\r\nexport interface CustomiserModelProps {\r\n  model?: Maybe<ModelFragment>;\r\n  addNodes: (newNodes: ModelMergeNodes, remove?: boolean) => void;\r\n}\r\n\r\n// const parts = [\r\n//   {\r\n//     id: 1,\r\n//     attributes: {\r\n//       nodeId: 'LeePerrySmith',\r\n//     },\r\n//   },\r\n// ];\r\n\r\ntype GLTFResult = GLTF & {\r\n  nodes: { [name: string]: Mesh };\r\n  materials: { [name: string]: Material };\r\n};\r\n\r\nconst Model = ({ model, addNodes }: CustomiserModelProps) => {\r\n  const { nodes } = useGLTF(\r\n    model?.attributes?.model?.data?.attributes?.url as string,\r\n  ) as unknown as GLTFResult;\r\n\r\n  useEffect(() => {\r\n    delete nodes['Scene'];\r\n    addNodes(nodes);\r\n\r\n    return () => {\r\n      addNodes(nodes, true);\r\n    };\r\n  }, [nodes]);\r\n\r\n  return (\r\n    <>\r\n      {model?.attributes?.parts?.data.map((part) => {\r\n        return (\r\n          <Fragment key={part.id}>\r\n            {part?.attributes?.nodeId && (\r\n              <CustomiserMesh\r\n                key={part.attributes.nodeId}\r\n                node={nodes[part.attributes.nodeId]}\r\n                nodeId={part.attributes.nodeId}\r\n              />\r\n            )}\r\n          </Fragment>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Model;\r\n","import { Decal, useTexture } from '@react-three/drei';\r\nimport { EulerArray, FlagCustomiser, GraphicCustomiser, Vector3Array } from '@store/customiser';\r\nimport { log } from 'console';\r\nimport { useMemo } from 'react';\r\nimport { Euler, EulerOrder, MathUtils, Vector3 } from 'three';\r\nexport interface DecalGraphicProps {\r\n  flag?: FlagCustomiser;\r\n  graphic?: GraphicCustomiser;\r\n  position: Vector3Array;\r\n  orientation: EulerArray;\r\n  scale?: number;\r\n}\r\n\r\nconst DecalGraphic = ({ flag, graphic, position, orientation, scale = 1 }: DecalGraphicProps) => {\r\n  const texture = flag?.flag?.attributes?.image.data?.attributes?.url\r\n    ? [flag.flag.attributes.image.data.attributes.url]\r\n    : graphic?.graphic?.attributes?.image?.data?.attributes?.url\r\n    ? [graphic.graphic.attributes.image.data.attributes.url]\r\n    : [];\r\n\r\n  const [image] = useTexture(texture);\r\n\r\n  const ratio = useMemo(() => {\r\n    const width = image.source.data.width ?? 1;\r\n    const height = image.source.data.height ?? 1;\r\n    return width / height;\r\n  }, [image]);\r\n\r\n  const rotationModifier = useMemo(() => {\r\n    const orientationCopy = new Euler().fromArray(\r\n      orientation as [number, number, number, (EulerOrder | undefined)?, ...any[]],\r\n    );\r\n    const currentAngle = MathUtils.radToDeg(orientationCopy.z);\r\n    const decalRotation = flag?.decalRotation || graphic?.decalRotation;\r\n    const newAngle = currentAngle + (decalRotation ?? 0);\r\n    orientationCopy.z = MathUtils.degToRad(newAngle);\r\n    return orientationCopy;\r\n  }, [flag?.decalRotation, graphic?.decalRotation, orientation]);\r\n\r\n  const scaleModifier = useMemo(() => {\r\n    return new Vector3(1 * ratio * scale, 1 * scale, 4);\r\n  }, [scale]);\r\n\r\n  if (!image) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Decal position={position} rotation={rotationModifier} scale={scaleModifier}>\r\n      <meshPhongMaterial\r\n        map={image}\r\n        transparent\r\n        depthTest\r\n        depthWrite={false}\r\n        polygonOffset\r\n        polygonOffsetFactor={-20}\r\n        needsUpdate\r\n      />\r\n    </Decal>\r\n  );\r\n};\r\n\r\nexport default DecalGraphic;\r\n","import { Decal } from '@react-three/drei';\r\nimport { EulerArray, TextCustomiser, Vector3Array } from '@store/customiser';\r\nimport { useEffect, useMemo, useRef, useState } from 'react';\r\nimport {\r\n  Euler,\r\n  EulerOrder,\r\n  MathUtils,\r\n  MeshStandardMaterial,\r\n  Texture,\r\n  Vector2,\r\n  Vector3,\r\n} from 'three';\r\n\r\nexport interface DecalTextProps {\r\n  text?: TextCustomiser;\r\n  position: Vector3Array;\r\n  orientation: EulerArray;\r\n  scale?: number;\r\n}\r\n\r\nconst DecalText = ({ text = {}, position, orientation, scale = 1 }: DecalTextProps) => {\r\n  const rotationModifier = useMemo(() => {\r\n    const orientationCopy = new Euler().fromArray(\r\n      orientation as [number, number, number, (EulerOrder | undefined)?, ...any[]],\r\n    );\r\n    const currentAngle = MathUtils.radToDeg(orientationCopy.z);\r\n    const newAngle = currentAngle + (text?.decalRotation ?? 0);\r\n    orientationCopy.z = MathUtils.degToRad(newAngle);\r\n    return orientationCopy;\r\n  }, [text?.decalRotation, orientation]);\r\n\r\n  const texture =\r\n    text?.material?.attributes?.images?.length &&\r\n    text.material.attributes.images[0]?.image.data?.attributes?.url\r\n      ? [text.material.attributes.images[0].image.data.attributes.url]\r\n      : [];\r\n\r\n  const shouldNormalMap =\r\n    text.normalMap instanceof Texture && text.selectedName?.attributes?.name === 'Luxury';\r\n  const normalMap = shouldNormalMap ? text.normalMap : null;\r\n\r\n  // const isShiny = shouldNormalMap ? false : true;\r\n\r\n  const isLuxury: boolean = text.selectedName?.id === '2' ? true : false;\r\n  const hasPuff: boolean = text.puffPrice ? true : false;\r\n  const hasCrystals: boolean = text.crystalPrice ? true : false;\r\n\r\n  const textIsVisible = typeof text.isVisible === 'undefined' ? true : text.isVisible;\r\n\r\n  let normalScale = 1;\r\n  if (hasCrystals) {\r\n    normalScale = 4;\r\n  } else if (isLuxury && !hasPuff) {\r\n    normalScale = 0.5;\r\n  } else if (isLuxury && hasPuff) {\r\n    normalScale = 3;\r\n  }\r\n\r\n  const scaleModifier = useMemo(() => {\r\n    return new Vector3(3.2 * scale, 0.4 * scale, 4);\r\n  }, [scale]);\r\n\r\n  const matRef = useRef<MeshStandardMaterial>(null);\r\n\r\n  const [refreshCount, setRefreshCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (text.preview && matRef.current && text.preview instanceof Texture) {\r\n      text.preview.needsUpdate = true;\r\n      matRef.current.needsUpdate = true;\r\n    }\r\n  }, [text.preview]);\r\n\r\n  useEffect(() => {\r\n    setRefreshCount((cur) => cur + 1);\r\n  }, [text.normalMap, text.puffPrice, text.crystalPrice, text.selectedName?.id]);\r\n\r\n  return (\r\n    <Decal key={refreshCount} position={position} rotation={rotationModifier} scale={scaleModifier}>\r\n      <meshStandardMaterial\r\n        ref={matRef}\r\n        transparent\r\n        roughness={isLuxury && !hasCrystals ? 1 : 0}\r\n        depthTest\r\n        depthWrite={false}\r\n        map={text.preview instanceof Texture ? text.preview : null}\r\n        normalMap={normalMap}\r\n        normalScale={new Vector2(normalScale, normalScale)}\r\n        opacity={textIsVisible ? 1 : 0}\r\n      ></meshStandardMaterial>\r\n    </Decal>\r\n  );\r\n};\r\n\r\nexport default DecalText;\r\n","import { useCustomiserStore } from '@store/customiser';\r\nimport { BufferGeometry } from 'three';\r\nimport DecalGraphic from '../DecalGraphic';\r\nimport DecalText from '../DecalText';\r\n\r\nexport interface ModelDecalsProps {\r\n  geom: BufferGeometry;\r\n}\r\n\r\nconst ModelDecals = ({ geom }: ModelDecalsProps) => {\r\n  const flags = useCustomiserStore((state) => state.flags);\r\n  const texts = useCustomiserStore((state) => state.texts);\r\n  const graphics = useCustomiserStore((state) => state.graphics);\r\n  return (\r\n    <mesh geometry={geom} renderOrder={1}>\r\n      <meshStandardMaterial transparent colorWrite={false} />\r\n      {flags.map((flag) => {\r\n        if (flag.decalPosition && flag.decalOrientation)\r\n          return (\r\n            <DecalGraphic\r\n              key={flag.key}\r\n              flag={flag}\r\n              position={flag.decalPosition}\r\n              orientation={flag.decalOrientation}\r\n              scale={flag.decalScale}\r\n            />\r\n          );\r\n      })}\r\n      {graphics.map((graphic) => {\r\n        if (graphic.decalPosition && graphic.decalOrientation)\r\n          return (\r\n            <DecalGraphic\r\n              key={graphic.key}\r\n              graphic={graphic}\r\n              position={graphic.decalPosition}\r\n              orientation={graphic.decalOrientation}\r\n              scale={graphic.decalScale}\r\n            />\r\n          );\r\n      })}\r\n      {texts.map((text) => {\r\n        if (text.decalPosition && text.decalOrientation)\r\n          return (\r\n            <DecalText\r\n              key={text.key}\r\n              text={text}\r\n              position={text.decalPosition}\r\n              orientation={text.decalOrientation}\r\n              scale={text.decalScale}\r\n            />\r\n          );\r\n      })}\r\n    </mesh>\r\n  );\r\n};\r\n\r\nexport default ModelDecals;\r\n","import { useCustomiserStore } from '@store/customiser';\r\nimport { ReactElement, useMemo, useState } from 'react';\r\nimport { BufferGeometry, Material, Mesh } from 'three';\r\nimport * as BufferGeometryUtils from 'three/examples/jsm/utils/BufferGeometryUtils';\r\n\r\nexport type ModelMergeNodes = {\r\n  [name: string]: Mesh<BufferGeometry, Material | Material[]>;\r\n};\r\n\r\nexport interface ModelMergeProps {\r\n  children(addNodes: {\r\n    addNodes: (newNodes: ModelMergeNodes, remove?: boolean) => void;\r\n    geom: BufferGeometry | null;\r\n  }): ReactElement;\r\n}\r\n\r\nconst ModelMerge = ({ children }: ModelMergeProps) => {\r\n  const [nodes, setNodes] = useState<ModelMergeNodes>();\r\n  const { customProduct } = useCustomiserStore();\r\n\r\n  const geom = useMemo(() => {\r\n    const geometries = [];\r\n    if (nodes) {\r\n      for (const [nodeId, node] of Object.entries(nodes)) {\r\n        const optionalPart = (customProduct?.attributes?.parts ?? [])\r\n          .filter((p) => p?.optional)\r\n          .map((p) => p?.modelParts?.data)\r\n          .flat()\r\n          .find((p) => p?.attributes?.nodeId === nodeId);\r\n\r\n        if (node.isMesh && !optionalPart) {\r\n          geometries.push(node.geometry.clone());\r\n        }\r\n      }\r\n    }\r\n\r\n    return geometries.length ? BufferGeometryUtils.mergeBufferGeometries(geometries) : null;\r\n  }, [nodes]);\r\n\r\n  function addNodes(newNodes: ModelMergeNodes, remove?: boolean) {\r\n    if (remove) {\r\n      const cleanNodes = { ...nodes };\r\n      for (const k in newNodes) {\r\n        delete cleanNodes[k];\r\n      }\r\n      setNodes({ ...cleanNodes });\r\n    } else {\r\n      setNodes((prev) => ({ ...prev, ...newNodes }));\r\n    }\r\n  }\r\n\r\n  return children({\r\n    addNodes,\r\n    geom,\r\n  });\r\n};\r\n\r\nexport default ModelMerge;\r\n","import { EventHandlers } from '@react-three/fiber/dist/declarations/src/core/events';\r\nimport { CustomiserState, useCustomiserStore } from '@store/customiser';\r\nimport { useDesignStore } from '@store/design';\r\nimport { forwardRef, useEffect } from 'react';\r\nimport { Group, MathUtils } from 'three';\r\nimport Model from '../Model';\r\nimport ModelDecals from '../ModelDecals';\r\nimport ModelMerge from '../ModelMerge';\r\n\r\nconst models = (state: CustomiserState) => state.selectedModels;\r\n\r\nexport interface SceneProps {\r\n  onPointerDown?: EventHandlers['onPointerDown'];\r\n  onPointerUp?: EventHandlers['onPointerUp'];\r\n  onPointerMove?: EventHandlers['onPointerMove'];\r\n  onClick?: EventHandlers['onClick'];\r\n}\r\n\r\nconst Scene = forwardRef<Group, SceneProps>(\r\n  ({ onPointerDown, onPointerUp, onPointerMove, onClick }: SceneProps, groupRef) => {\r\n    const selectedModels = useCustomiserStore(models);\r\n    const { remountTrigger } = useCustomiserStore();\r\n    const modelRotation = useDesignStore((state) => state.modelRotation);\r\n    const addingToCart = useDesignStore((state) => state.addingToCart);\r\n\r\n    useEffect(() => {\r\n      if (addingToCart && typeof groupRef !== 'function' && groupRef?.current) {\r\n        groupRef.current.rotateY(MathUtils.degToRad(modelRotation));\r\n      }\r\n    }, [addingToCart, modelRotation]);\r\n\r\n    return (\r\n      <group\r\n        name='meshGroup'\r\n        ref={groupRef}\r\n        onPointerDown={onPointerDown}\r\n        onPointerUp={onPointerUp}\r\n        onPointerMove={onPointerMove}\r\n        onClick={onClick}\r\n        dispose={null}\r\n      >\r\n        <ModelMerge key={remountTrigger}>\r\n          {({ addNodes, geom }) => (\r\n            <>\r\n              {selectedModels.map((m) => (\r\n                <Model key={m.model?.id} model={m.model} addNodes={addNodes} />\r\n              ))}\r\n              {geom && <ModelDecals geom={geom} />}\r\n            </>\r\n          )}\r\n        </ModelMerge>\r\n      </group>\r\n    );\r\n  },\r\n);\r\nScene.displayName = 'Scene';\r\n\r\nexport default Scene;\r\n"],"names":["ClonedTextureMesh","_ref","node","texture","tasselsTexture","tassels","hex","textures","setTextures","useState","materialRef","useRef","meshRef","isPointerDown","setIsPointerDown","isPointerMoved","setIsPointerMoved","clonedTextures","useMemo","Object","fromEntries","entries","map","_ref2","k","v","clone","customProduct","setSelectedNav","selectedNav","savedParts","navTabs","texts","updateText","updateIsMinimizedCustomiserNav","useCustomiserStore","editText","find","t","edit","part","_customProduct$attrib","_customProduct$attrib2","attributes","parts","p","_p$modelParts","modelParts","data","mp","_mp$attributes","_mp$attributes2","nodeId","userData","name","navItem","id","findNavItem","value","key","navItemText","useEffect","current","updatedTextures","wrapS","wrapT","RepeatWrapping","boundingBox","Box3","setFromObject","boxSize","Vector3","dimensions","getSize","area","x","y","repeat","set","needsUpdate","_jsx","_Fragment","children","geometry","ref","onPointerDown","e","onPointerUp","onPointerMove","onClick","_e$intersections$find","intersectedText","intersections","intersection","object","text","undefined","index","stopPropagation","transparent","bumpScale","side","DoubleSide","metalness","displacementScale","displacementMap","_ref3","useCallback","state","optional","includes","materialTexture","useTexture","materials","alphaMap","bumpMap","flipY","_model$attributes","_model$attributes$mod","_model$attributes$mod2","_model$attributes$mod3","_model$attributes2","_model$attributes2$pa","model","addNodes","nodes","useGLTF","url","_part$attributes","Fragment","CustomiserMesh","_flag$flag","_flag$flag$attributes","_flag$flag$attributes2","_flag$flag$attributes3","_graphic$graphic","_graphic$graphic$attr","_graphic$graphic$attr2","_graphic$graphic$attr3","_graphic$graphic$attr4","flag","graphic","position","orientation","scale","image","ratio","_image$source$data$wi","_image$source$data$he","source","width","height","rotationModifier","orientationCopy","Euler","fromArray","currentAngle","MathUtils","radToDeg","z","decalRotation","newAngle","degToRad","scaleModifier","Decal","rotation","depthTest","depthWrite","polygonOffset","polygonOffsetFactor","_text$material","_text$material$attrib","_text$material$attrib2","_text$material$attrib3","_text$material$attrib4","_text$material$attrib5","_text$selectedName","_text$selectedName$at","_text$selectedName2","_text$selectedName3","_text$decalRotation","normalMap","material","images","length","Texture","selectedName","isLuxury","hasPuff","puffPrice","hasCrystals","crystalPrice","textIsVisible","isVisible","normalScale","matRef","refreshCount","setRefreshCount","preview","cur","roughness","Vector2","opacity","geom","flags","graphics","_jsxs","renderOrder","colorWrite","decalPosition","decalOrientation","DecalGraphic","decalScale","DecalText","setNodes","newNodes","remove","cleanNodes","prev","geometries","optionalPart","filter","flat","_p$attributes","isMesh","push","BufferGeometryUtils","models","selectedModels","Scene","forwardRef","groupRef","remountTrigger","modelRotation","useDesignStore","addingToCart","rotateY","dispose","ModelMerge","m","_m$model","Model","ModelDecals","displayName"],"sourceRoot":""}