{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Reian\\\\Desktop\\\\Work\\\\Freelance\\\\Boxxer World\\\\boxxerworld-shopify-frontend\\\\customiser\\\\src\\\\components\\\\nav\\\\NavText\\\\NavTextPreview.tsx\",\n  _s = $RefreshSig$();\nimport { CanvasText, getMaterialUrl } from '@lib/canvas';\nimport { useCustomiserStore } from '@store/customiser';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { CanvasTexture } from 'three';\nimport { usePortalRef } from '@hooks';\nimport { createPortal } from 'react-dom';\nimport styles from './NavText.module.scss';\nimport { loadImage } from '@lib/img.util';\nimport NavTextPreviewScene from '@components/three/CustomiserCanvas/NavTextScene';\n\n// TODO - Pre load the fonts somewhere\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nasync function loadFonts(fontUrl) {\n  const font = new FontFace('testFont', `url(${fontUrl})`);\n  await font.load();\n  document.fonts.add(font);\n}\nfunction getPatternType({\n  hasCrystals,\n  isLuxury\n}) {\n  if (!hasCrystals && isLuxury) return 'embroidery';else if (hasCrystals) return 'crystals';\n  return '';\n}\nconst NavTextPreview = ({\n  editText\n}) => {\n  _s();\n  var _editText$selectedNam, _previewImgRef$curren;\n  const previewImgRef = useRef(null);\n  const [fontFamily, setFontFamily] = useState(editText === null || editText === void 0 ? void 0 : editText.font);\n  const [isVisiblePreview, setIsVisiblePreview] = useState(false);\n  const hasCrystals = editText !== null && editText !== void 0 && editText.crystalPrice ? true : false;\n  const hasCrystalBackground = true;\n  const isLuxury = (editText === null || editText === void 0 ? void 0 : (_editText$selectedNam = editText.selectedName) === null || _editText$selectedNam === void 0 ? void 0 : _editText$selectedNam.id) === '2' ? true : false;\n  const hasPuff = editText !== null && editText !== void 0 && editText.puffPrice && !hasCrystals ? true : false; // 3D puff\n  const toNormalMap = hasCrystals ? false : true;\n  const patternType = getPatternType({\n    hasCrystals,\n    isLuxury\n  });\n  const {\n    updateText\n  } = useCustomiserStore();\n  const portalRef = usePortalRef('NavHeaderAfter');\n\n  /**\r\n   * Save image here\r\n   */\n  const materialImgMemo = useMemo(() => {\n    return loadImage(getMaterialUrl(editText === null || editText === void 0 ? void 0 : editText.material));\n  }, [editText === null || editText === void 0 ? void 0 : editText.material]);\n  const outlineImgMemo = useMemo(() => {\n    return loadImage(getMaterialUrl(editText === null || editText === void 0 ? void 0 : editText.outline));\n  }, [editText === null || editText === void 0 ? void 0 : editText.outline]);\n  const fabricPatternImgMemo = useMemo(() => {\n    return loadImage('/Fabric_Knitted_006_height_small.png');\n  }, []);\n  const crystalNormalMapImgMemo = useMemo(() => {\n    return loadImage('/crystal-12.png');\n  }, []);\n  const crystalBgPatternImgMemo = useMemo(() => {\n    return loadImage('/crystal-bg-pattern.png');\n  }, []);\n  const crystalEmissiveMapImgMemo = useMemo(() => {\n    return loadImage('/crystal-emissive-12.png');\n  }, []);\n  useEffect(() => {\n    const previewImgDom = previewImgRef.current;\n    (async () => {\n      const canvasText = new CanvasText({\n        hasPuff,\n        toNormalMap,\n        patternType,\n        text: editText === null || editText === void 0 ? void 0 : editText.text\n      });\n      if (!editText || !editText.key || !isVisiblePreview) {\n        canvasText.clear();\n        return;\n      }\n      if (!editText.text) {\n        canvasText.clear();\n        updateText(editText.key, {\n          preview: new CanvasTexture(canvasText.getOutlineCanvas())\n        });\n        return;\n      }\n\n      // Adjust this once preloading fonts has been implemented\n      if (fontFamily !== (editText === null || editText === void 0 ? void 0 : editText.font)) {\n        setFontFamily(editText === null || editText === void 0 ? void 0 : editText.font);\n        await loadFonts(editText === null || editText === void 0 ? void 0 : editText.font);\n      }\n      const img = (editText === null || editText === void 0 ? void 0 : editText.material) && (await materialImgMemo);\n      const outlineImg = (editText === null || editText === void 0 ? void 0 : editText.outline) && (await outlineImgMemo);\n      const embroideryPattern = await fabricPatternImgMemo;\n      const crystalNormalMap = await crystalNormalMapImgMemo;\n      const crystalBgPatternImg = await crystalBgPatternImgMemo;\n      // temporary crystal BG\n      const crystalBgImg = outlineImg;\n      const shouldUsePattern = isLuxury && !hasPuff;\n      const patternImg = shouldUsePattern && (hasCrystals ? crystalNormalMap : embroideryPattern);\n      await canvasText.previewText({\n        material: img,\n        outline: outlineImg,\n        previewImg: previewImgDom,\n        normalMapPatternImg: patternImg,\n        crystalBgPatternImg,\n        crystalBgImg\n      });\n      updateText(editText.key, {\n        preview: new CanvasTexture(canvasText.getOutlineCanvas()),\n        normalMap: new CanvasTexture(canvasText.getNormalMapOutlineCanvas())\n      });\n    })();\n  }, [editText === null || editText === void 0 ? void 0 : editText.text, editText === null || editText === void 0 ? void 0 : editText.material, editText === null || editText === void 0 ? void 0 : editText.outline, editText === null || editText === void 0 ? void 0 : editText.font, isVisiblePreview, editText === null || editText === void 0 ? void 0 : editText.puffPrice, editText === null || editText === void 0 ? void 0 : editText.crystalPrice]);\n  if (!portalRef) {\n    return null;\n  }\n  return /*#__PURE__*/createPortal( /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"testPreview\",\n      style: {\n        position: 'absolute',\n        zIndex: '100'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.textPreview,\n      children: !(editText !== null && editText !== void 0 && editText.text) ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.noText,\n        children: \"Enter text to show preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.textPreview__imgContainer,\n          style: {\n            display: 'none'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            height: 80,\n            width: 640,\n            ref: el => {\n              previewImgRef.current = el;\n              setIsVisiblePreview(!!el);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this), (_previewImgRef$curren = previewImgRef.current) !== null && _previewImgRef$curren !== void 0 && _previewImgRef$curren.src ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(NavTextPreviewScene, {\n            text: editText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 17\n          }, this)\n        }, void 0, false) : '']\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true), portalRef);\n};\n_s(NavTextPreview, \"7pEVXnJEulrv2MRTfuR1omhLzX0=\", false, function () {\n  return [useCustomiserStore, usePortalRef];\n});\n_c = NavTextPreview;\nexport default NavTextPreview;\nvar _c;\n$RefreshReg$(_c, \"NavTextPreview\");","map":{"version":3,"names":["CanvasText","getMaterialUrl","useCustomiserStore","useEffect","useMemo","useRef","useState","CanvasTexture","usePortalRef","createPortal","styles","loadImage","NavTextPreviewScene","jsxDEV","_jsxDEV","Fragment","_Fragment","loadFonts","fontUrl","font","FontFace","load","document","fonts","add","getPatternType","hasCrystals","isLuxury","NavTextPreview","editText","_s","_editText$selectedNam","_previewImgRef$curren","previewImgRef","fontFamily","setFontFamily","isVisiblePreview","setIsVisiblePreview","crystalPrice","hasCrystalBackground","selectedName","id","hasPuff","puffPrice","toNormalMap","patternType","updateText","portalRef","materialImgMemo","material","outlineImgMemo","outline","fabricPatternImgMemo","crystalNormalMapImgMemo","crystalBgPatternImgMemo","crystalEmissiveMapImgMemo","previewImgDom","current","canvasText","text","key","clear","preview","getOutlineCanvas","img","outlineImg","embroideryPattern","crystalNormalMap","crystalBgPatternImg","crystalBgImg","shouldUsePattern","patternImg","previewText","previewImg","normalMapPatternImg","normalMap","getNormalMapOutlineCanvas","children","style","position","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","className","textPreview","noText","textPreview__imgContainer","display","height","width","ref","el","src","_c","$RefreshReg$"],"sources":["C:/Users/Reian/Desktop/Work/Freelance/Boxxer World/boxxerworld-shopify-frontend/customiser/src/components/nav/NavText/NavTextPreview.tsx"],"sourcesContent":["import { CanvasText, PatternType, getMaterialUrl } from '@lib/canvas';\r\nimport { useCustomiserStore } from '@store/customiser';\r\nimport { useEffect, useMemo, useRef, useState } from 'react';\r\nimport { CanvasTexture } from 'three';\r\nimport type { NavTextSelectProps } from './NavTextSelect';\r\nimport { usePortalRef } from '@hooks';\r\nimport { createPortal } from 'react-dom';\r\n\r\nimport styles from './NavText.module.scss';\r\nimport { loadImage } from '@lib/img.util';\r\nimport NavTextPreviewScene from '@components/three/CustomiserCanvas/NavTextScene';\r\n\r\n// TODO - Pre load the fonts somewhere\r\nasync function loadFonts(fontUrl: string) {\r\n  const font = new FontFace('testFont', `url(${fontUrl})`);\r\n  await font.load();\r\n  document.fonts.add(font);\r\n}\r\n\r\nfunction getPatternType({\r\n  hasCrystals,\r\n  isLuxury,\r\n}: {\r\n  hasCrystals: boolean;\r\n  isLuxury: boolean;\r\n}): PatternType {\r\n  if (!hasCrystals && isLuxury) return 'embroidery';\r\n  else if (hasCrystals) return 'crystals';\r\n\r\n  return '';\r\n}\r\n\r\nconst NavTextPreview = ({ editText }: NavTextSelectProps) => {\r\n  const previewImgRef = useRef<HTMLImageElement | null>(null);\r\n  const [fontFamily, setFontFamily] = useState<string | undefined>(editText?.font);\r\n  const [isVisiblePreview, setIsVisiblePreview] = useState(false);\r\n\r\n  const hasCrystals: boolean = editText?.crystalPrice ? true : false;\r\n  const hasCrystalBackground = true;\r\n  const isLuxury: boolean = editText?.selectedName?.id === '2' ? true : false;\r\n  const hasPuff: boolean = editText?.puffPrice && !hasCrystals ? true : false; // 3D puff\r\n  const toNormalMap = hasCrystals ? false : true;\r\n  const patternType = getPatternType({ hasCrystals, isLuxury });\r\n\r\n  const { updateText } = useCustomiserStore();\r\n\r\n  const portalRef = usePortalRef('NavHeaderAfter');\r\n\r\n  /**\r\n   * Save image here\r\n   */\r\n  const materialImgMemo = useMemo<Promise<HTMLImageElement>>(() => {\r\n    return loadImage(getMaterialUrl(editText?.material));\r\n  }, [editText?.material]);\r\n  const outlineImgMemo = useMemo<Promise<HTMLImageElement>>(() => {\r\n    return loadImage(getMaterialUrl(editText?.outline));\r\n  }, [editText?.outline]);\r\n  const fabricPatternImgMemo = useMemo<Promise<HTMLImageElement>>(() => {\r\n    return loadImage('/Fabric_Knitted_006_height_small.png');\r\n  }, []);\r\n  const crystalNormalMapImgMemo = useMemo<Promise<HTMLImageElement>>(() => {\r\n    return loadImage('/crystal-12.png');\r\n  }, []);\r\n  const crystalBgPatternImgMemo = useMemo<Promise<HTMLImageElement>>(() => {\r\n    return loadImage('/crystal-bg-pattern.png');\r\n  }, []);\r\n  const crystalEmissiveMapImgMemo = useMemo<Promise<HTMLImageElement>>(() => {\r\n    return loadImage('/crystal-emissive-12.png');\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const previewImgDom = previewImgRef.current as HTMLImageElement;\r\n\r\n    (async () => {\r\n      const canvasText = new CanvasText({\r\n        hasPuff,\r\n        toNormalMap,\r\n        patternType,\r\n        text: editText?.text,\r\n      });\r\n\r\n      if (!editText || !editText.key || !isVisiblePreview) {\r\n        canvasText.clear();\r\n        return;\r\n      }\r\n\r\n      if (!editText.text) {\r\n        canvasText.clear();\r\n        updateText(editText.key, {\r\n          preview: new CanvasTexture(canvasText.getOutlineCanvas()),\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Adjust this once preloading fonts has been implemented\r\n      if (fontFamily !== editText?.font) {\r\n        setFontFamily(editText?.font);\r\n        await loadFonts(editText?.font as string);\r\n      }\r\n\r\n      const img = editText?.material && (await materialImgMemo);\r\n      const outlineImg = editText?.outline && (await outlineImgMemo);\r\n      const embroideryPattern = await fabricPatternImgMemo;\r\n      const crystalNormalMap = await crystalNormalMapImgMemo;\r\n      const crystalBgPatternImg = await crystalBgPatternImgMemo;\r\n      // temporary crystal BG\r\n      const crystalBgImg = outlineImg;\r\n\r\n      const shouldUsePattern = isLuxury && !hasPuff;\r\n      const patternImg = shouldUsePattern && (hasCrystals ? crystalNormalMap : embroideryPattern);\r\n\r\n      await canvasText.previewText({\r\n        material: img,\r\n        outline: outlineImg,\r\n        previewImg: previewImgDom,\r\n        normalMapPatternImg: patternImg,\r\n        crystalBgPatternImg,\r\n        crystalBgImg,\r\n      });\r\n\r\n      updateText(editText.key, {\r\n        preview: new CanvasTexture(canvasText.getOutlineCanvas()),\r\n        normalMap: new CanvasTexture(canvasText.getNormalMapOutlineCanvas()),\r\n      });\r\n    })();\r\n  }, [\r\n    editText?.text,\r\n    editText?.material,\r\n    editText?.outline,\r\n    editText?.font,\r\n    isVisiblePreview,\r\n    editText?.puffPrice,\r\n    editText?.crystalPrice,\r\n  ]);\r\n\r\n  if (!portalRef) {\r\n    return null;\r\n  }\r\n\r\n  return createPortal(\r\n    <>\r\n      <div id='testPreview' style={{ position: 'absolute', zIndex: '100' }} />\r\n      <div className={styles.textPreview}>\r\n        {!editText?.text ? (\r\n          <div className={styles.noText}>Enter text to show preview</div>\r\n        ) : (\r\n          <>\r\n            {/* Image is no longer needed, remove this */}\r\n            <div className={styles.textPreview__imgContainer} style={{ display: 'none' }}>\r\n              <img\r\n                height={80}\r\n                width={640}\r\n                ref={(el) => {\r\n                  previewImgRef.current = el;\r\n                  setIsVisiblePreview(!!el);\r\n                }}\r\n              />\r\n            </div>\r\n            {previewImgRef.current?.src ? (\r\n              <>\r\n                <NavTextPreviewScene text={editText} />\r\n              </>\r\n            ) : (\r\n              ''\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </>,\r\n    portalRef,\r\n  );\r\n};\r\n\r\nexport default NavTextPreview;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}