{"ast":null,"code":"import{useGetMaterialsQuery}from'@graphql/generated/graphql';import{graphQLClient}from'@graphql/graphql-client';import cn from'classnames';import{useEffect}from'react';import styles from'./MaterialGroup.module.scss';import{createStore,Provider,useMaterialGroupStore}from'./MaterialGroupState';import{MaterialType}from'./MaterialType';import SelectedMaterialInfo from'./SelectedMaterialInfo';import testMaterial from'./test-material';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const MaterialGroupLoader=_ref=>{var _materialGroup$attrib;let{className,materialGroup,materialType,colourGroup,onMaterialSelected,hideColorGroups}=_ref;const colourGroups=useMaterialGroupStore(state=>state.colourGroups);const selectedColourGroup=useMaterialGroupStore(state=>state.selectedColourGroup);const setMaterials=useMaterialGroupStore(state=>state.setMaterials);const setColourGroup=useMaterialGroupStore(state=>state.setColourGroup);const rootClassName=cn(styles.root,className);const typeIds=materialGroup!==null&&materialGroup!==void 0&&(_materialGroup$attrib=materialGroup.attributes)!==null&&_materialGroup$attrib!==void 0&&_materialGroup$attrib.materialTypes?materialGroup.attributes.materialTypes.data.map(t=>t.id):[];const{data:materials}=useGetMaterialsQuery(graphQLClient,{filters:{type:{id:{in:typeIds}}},pagination:{pageSize:200}},{select:data=>{var _data$materials;return(_data$materials=data.materials)===null||_data$materials===void 0?void 0:_data$materials.data;}});useEffect(()=>{if(materials!==null&&materials!==void 0&&materials.length){// TODO - remove: temporary for testing rainbow\nif(!materials.find(a=>a.id==='999')){// eslint-disable-next-line\n// @ts-ignore\nmaterials.push(testMaterial);}console.log('materials',materials);setMaterials(materials,materialType,colourGroup);}},[materials]);if(!materialGroup){return null;}return/*#__PURE__*/_jsxs(\"div\",{className:rootClassName,children:[!hideColorGroups&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h5\",{children:\"Colour\"}),/*#__PURE__*/_jsx(\"div\",{className:styles.colourGroups,children:colourGroups.map(group=>{var _group$attributes$col,_group$attributes,_group$attributes$col2,_group$attributes2;return/*#__PURE__*/_jsx(\"button\",{onClick:()=>setColourGroup(group),children:/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",viewBox:\"0 0 42 42\",strokeWidth:4,stroke:(selectedColourGroup===null||selectedColourGroup===void 0?void 0:selectedColourGroup.id)===group.id?'#000':(_group$attributes$col=(_group$attributes=group.attributes)===null||_group$attributes===void 0?void 0:_group$attributes.colour)!==null&&_group$attributes$col!==void 0?_group$attributes$col:'#000',fill:(_group$attributes$col2=(_group$attributes2=group.attributes)===null||_group$attributes2===void 0?void 0:_group$attributes2.colour)!==null&&_group$attributes$col2!==void 0?_group$attributes$col2:'#000',children:/*#__PURE__*/_jsx(\"rect\",{width:\"100%\",height:\"100%\"})})},group.id);})})]}),/*#__PURE__*/_jsx(MaterialType,{hideColorGroups:hideColorGroups,onMaterialSelected:onMaterialSelected}),/*#__PURE__*/_jsx(SelectedMaterialInfo,{})]});};const MaterialGroup=props=>{return/*#__PURE__*/_jsx(Provider,{createStore:createStore,children:/*#__PURE__*/_jsx(MaterialGroupLoader,{...props})});};export default MaterialGroup;","map":{"version":3,"names":["useGetMaterialsQuery","graphQLClient","cn","useEffect","styles","createStore","Provider","useMaterialGroupStore","MaterialType","SelectedMaterialInfo","testMaterial","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","MaterialGroupLoader","_ref","_materialGroup$attrib","className","materialGroup","materialType","colourGroup","onMaterialSelected","hideColorGroups","colourGroups","state","selectedColourGroup","setMaterials","setColourGroup","rootClassName","root","typeIds","attributes","materialTypes","data","map","t","id","materials","filters","type","in","pagination","pageSize","select","_data$materials","length","find","a","push","console","log","children","group","_group$attributes$col","_group$attributes","_group$attributes$col2","_group$attributes2","onClick","xmlns","viewBox","strokeWidth","stroke","colour","fill","width","height","MaterialGroup","props"],"sources":["C:/Users/Reian/Desktop/Work/Freelance/Boxxer World/boxxerworld-shopify-frontend/customiser/src/components/nav/MaterialGroup/MaterialGroup.tsx"],"sourcesContent":["import {\r\n  InputMaybe,\r\n  MaterialColourGroupEntity,\r\n  MaterialEntity,\r\n  MaterialFragment,\r\n  MaterialGroupEntity,\r\n  MaterialTypeEntity,\r\n  Maybe,\r\n  useGetMaterialsQuery,\r\n} from '@graphql/generated/graphql';\r\nimport { graphQLClient } from '@graphql/graphql-client';\r\n\r\nimport cn from 'classnames';\r\nimport { useEffect } from 'react';\r\n\r\nimport styles from './MaterialGroup.module.scss';\r\nimport { createStore, Provider, useMaterialGroupStore } from './MaterialGroupState';\r\nimport { MaterialType } from './MaterialType';\r\nimport SelectedMaterialInfo from './SelectedMaterialInfo';\r\nimport testMaterial from './test-material';\r\n\r\nexport interface MaterialGroupProps {\r\n  className?: string;\r\n  materialGroup?: Maybe<MaterialGroupEntity>;\r\n  materialType?: Maybe<MaterialTypeEntity>;\r\n  colourGroup?: Maybe<MaterialColourGroupEntity>;\r\n  onMaterialSelected: (material: MaterialFragment) => void;\r\n  hideColorGroups?: boolean;\r\n}\r\n\r\nconst MaterialGroupLoader = ({\r\n  className,\r\n  materialGroup,\r\n  materialType,\r\n  colourGroup,\r\n  onMaterialSelected,\r\n  hideColorGroups,\r\n}: MaterialGroupProps) => {\r\n  const colourGroups = useMaterialGroupStore((state) => state.colourGroups);\r\n  const selectedColourGroup = useMaterialGroupStore((state) => state.selectedColourGroup);\r\n  const setMaterials = useMaterialGroupStore((state) => state.setMaterials);\r\n  const setColourGroup = useMaterialGroupStore((state) => state.setColourGroup);\r\n  const rootClassName = cn(styles.root, className);\r\n\r\n  const typeIds = materialGroup?.attributes?.materialTypes\r\n    ? (materialGroup.attributes.materialTypes.data.map((t) => t.id) as InputMaybe<string>[])\r\n    : [];\r\n\r\n  const { data: materials } = useGetMaterialsQuery(\r\n    graphQLClient,\r\n    { filters: { type: { id: { in: typeIds } } }, pagination: { pageSize: 200 } },\r\n    {\r\n      select: (data) => data.materials?.data as MaterialEntity[],\r\n    },\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (materials?.length) {\r\n      // TODO - remove: temporary for testing rainbow\r\n      if (!materials.find((a) => a.id === '999')) {\r\n        // eslint-disable-next-line\r\n        // @ts-ignore\r\n        materials.push(testMaterial);\r\n      }\r\n      console.log('materials', materials);\r\n      setMaterials(materials, materialType, colourGroup);\r\n    }\r\n  }, [materials]);\r\n\r\n  if (!materialGroup) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className={rootClassName}>\r\n      {!hideColorGroups && (\r\n        <>\r\n          <h5>Colour</h5>\r\n          <div className={styles.colourGroups}>\r\n            {colourGroups.map((group) => (\r\n              <button key={group.id} onClick={() => setColourGroup(group)}>\r\n                <svg\r\n                  xmlns='http://www.w3.org/2000/svg'\r\n                  viewBox='0 0 42 42'\r\n                  strokeWidth={4}\r\n                  stroke={\r\n                    selectedColourGroup?.id === group.id\r\n                      ? '#000'\r\n                      : group.attributes?.colour ?? '#000'\r\n                  }\r\n                  fill={group.attributes?.colour ?? '#000'}\r\n                >\r\n                  <rect width='100%' height='100%' />\r\n                </svg>\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n      <MaterialType hideColorGroups={hideColorGroups} onMaterialSelected={onMaterialSelected} />\r\n      <SelectedMaterialInfo />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MaterialGroup = (props: MaterialGroupProps) => {\r\n  return (\r\n    <Provider createStore={createStore}>\r\n      <MaterialGroupLoader {...props} />\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default MaterialGroup;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}