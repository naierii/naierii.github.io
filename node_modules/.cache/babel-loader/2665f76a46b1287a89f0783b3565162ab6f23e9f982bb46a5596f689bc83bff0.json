{"ast":null,"code":"import{useGLTF}from'@react-three/drei';import{Fragment,useEffect}from'react';import CustomiserMesh from'../CustomiserMesh';// const parts = [\n//   {\n//     id: 1,\n//     attributes: {\n//       nodeId: 'LeePerrySmith',\n//     },\n//   },\n// ];\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const Model=_ref=>{var _model$attributes,_model$attributes$mod,_model$attributes$mod2,_model$attributes$mod3,_model$attributes2,_model$attributes2$pa;let{model,addNodes}=_ref;const{nodes}=useGLTF(model===null||model===void 0?void 0:(_model$attributes=model.attributes)===null||_model$attributes===void 0?void 0:(_model$attributes$mod=_model$attributes.model)===null||_model$attributes$mod===void 0?void 0:(_model$attributes$mod2=_model$attributes$mod.data)===null||_model$attributes$mod2===void 0?void 0:(_model$attributes$mod3=_model$attributes$mod2.attributes)===null||_model$attributes$mod3===void 0?void 0:_model$attributes$mod3.url);useEffect(()=>{delete nodes['Scene'];addNodes(nodes);return()=>{addNodes(nodes,true);};},[nodes]);return/*#__PURE__*/_jsx(_Fragment,{children:model===null||model===void 0?void 0:(_model$attributes2=model.attributes)===null||_model$attributes2===void 0?void 0:(_model$attributes2$pa=_model$attributes2.parts)===null||_model$attributes2$pa===void 0?void 0:_model$attributes2$pa.data.map(part=>{var _part$attributes;return/*#__PURE__*/_jsx(Fragment,{children:(part===null||part===void 0?void 0:(_part$attributes=part.attributes)===null||_part$attributes===void 0?void 0:_part$attributes.nodeId)&&/*#__PURE__*/_jsx(CustomiserMesh,{node:nodes[part.attributes.nodeId],nodeId:part.attributes.nodeId},part.attributes.nodeId)},part.id);})});};export default Model;","map":{"version":3,"names":["useGLTF","Fragment","useEffect","CustomiserMesh","jsx","_jsx","_Fragment","Model","_ref","_model$attributes","_model$attributes$mod","_model$attributes$mod2","_model$attributes$mod3","_model$attributes2","_model$attributes2$pa","model","addNodes","nodes","attributes","data","url","children","parts","map","part","_part$attributes","nodeId","node","id"],"sources":["C:/Users/Reian/Desktop/Work/Freelance/Boxxer World/boxxerworld-shopify-frontend/customiser/src/components/three/Model/Model.tsx"],"sourcesContent":["import { Maybe, ModelFragment } from '@graphql/generated/graphql';\r\nimport { useGLTF } from '@react-three/drei';\r\nimport { Fragment, useEffect } from 'react';\r\nimport { Material, Mesh } from 'three';\r\nimport { GLTF } from 'three-stdlib';\r\nimport CustomiserMesh from '../CustomiserMesh';\r\nimport { ModelMergeNodes } from '../ModelMerge/ModelMerge';\r\nexport interface CustomiserModelProps {\r\n  model?: Maybe<ModelFragment>;\r\n  addNodes: (newNodes: ModelMergeNodes, remove?: boolean) => void;\r\n}\r\n\r\n// const parts = [\r\n//   {\r\n//     id: 1,\r\n//     attributes: {\r\n//       nodeId: 'LeePerrySmith',\r\n//     },\r\n//   },\r\n// ];\r\n\r\ntype GLTFResult = GLTF & {\r\n  nodes: { [name: string]: Mesh };\r\n  materials: { [name: string]: Material };\r\n};\r\n\r\nconst Model = ({ model, addNodes }: CustomiserModelProps) => {\r\n  const { nodes } = useGLTF(\r\n    model?.attributes?.model?.data?.attributes?.url as string,\r\n  ) as unknown as GLTFResult;\r\n\r\n  useEffect(() => {\r\n    delete nodes['Scene'];\r\n    addNodes(nodes);\r\n\r\n    return () => {\r\n      addNodes(nodes, true);\r\n    };\r\n  }, [nodes]);\r\n\r\n  return (\r\n    <>\r\n      {model?.attributes?.parts?.data.map((part) => {\r\n        return (\r\n          <Fragment key={part.id}>\r\n            {part?.attributes?.nodeId && (\r\n              <CustomiserMesh\r\n                key={part.attributes.nodeId}\r\n                node={nodes[part.attributes.nodeId]}\r\n                nodeId={part.attributes.nodeId}\r\n              />\r\n            )}\r\n          </Fragment>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Model;\r\n"],"mappings":"AACA,OAASA,OAAO,KAAQ,mBAAmB,CAC3C,OAASC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAG3C,MAAO,CAAAC,cAAc,KAAM,mBAAmB,CAO9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,OAAAC,GAAA,IAAAC,IAAA,gCAAAJ,QAAA,IAAAK,SAAA,yBAOA,KAAM,CAAAC,KAAK,CAAGC,IAAA,EAA+C,KAAAC,iBAAA,CAAAC,qBAAA,CAAAC,sBAAA,CAAAC,sBAAA,CAAAC,kBAAA,CAAAC,qBAAA,IAA9C,CAAEC,KAAK,CAAEC,QAA+B,CAAC,CAAAR,IAAA,CACtD,KAAM,CAAES,KAAM,CAAC,CAAGjB,OAAO,CACvBe,KAAK,SAALA,KAAK,kBAAAN,iBAAA,CAALM,KAAK,CAAEG,UAAU,UAAAT,iBAAA,kBAAAC,qBAAA,CAAjBD,iBAAA,CAAmBM,KAAK,UAAAL,qBAAA,kBAAAC,sBAAA,CAAxBD,qBAAA,CAA0BS,IAAI,UAAAR,sBAAA,kBAAAC,sBAAA,CAA9BD,sBAAA,CAAgCO,UAAU,UAAAN,sBAAA,iBAA1CA,sBAAA,CAA4CQ,GAC9C,CAA0B,CAE1BlB,SAAS,CAAC,IAAM,CACd,MAAO,CAAAe,KAAK,CAAC,OAAO,CAAC,CACrBD,QAAQ,CAACC,KAAK,CAAC,CAEf,MAAO,IAAM,CACXD,QAAQ,CAACC,KAAK,CAAE,IAAI,CAAC,CACvB,CAAC,CACH,CAAC,CAAE,CAACA,KAAK,CAAC,CAAC,CAEX,mBACEZ,IAAA,CAAAC,SAAA,EAAAe,QAAA,CACGN,KAAK,SAALA,KAAK,kBAAAF,kBAAA,CAALE,KAAK,CAAEG,UAAU,UAAAL,kBAAA,kBAAAC,qBAAA,CAAjBD,kBAAA,CAAmBS,KAAK,UAAAR,qBAAA,iBAAxBA,qBAAA,CAA0BK,IAAI,CAACI,GAAG,CAAEC,IAAI,EAAK,KAAAC,gBAAA,CAC5C,mBACEpB,IAAA,CAACJ,QAAQ,EAAAoB,QAAA,CACN,CAAAG,IAAI,SAAJA,IAAI,kBAAAC,gBAAA,CAAJD,IAAI,CAAEN,UAAU,UAAAO,gBAAA,iBAAhBA,gBAAA,CAAkBC,MAAM,gBACvBrB,IAAA,CAACF,cAAc,EAEbwB,IAAI,CAAEV,KAAK,CAACO,IAAI,CAACN,UAAU,CAACQ,MAAM,CAAE,CACpCA,MAAM,CAAEF,IAAI,CAACN,UAAU,CAACQ,MAAO,EAF1BF,IAAI,CAACN,UAAU,CAACQ,MAGtB,CACF,EAPYF,IAAI,CAACI,EAQV,CAAC,CAEf,CAAC,CAAC,CACF,CAAC,CAEP,CAAC,CAED,cAAe,CAAArB,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}