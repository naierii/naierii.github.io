{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Reian\\\\Desktop\\\\Work\\\\Freelance\\\\Boxxer World\\\\boxxerworld-shopify-frontend\\\\customiser\\\\src\\\\components\\\\nav\\\\NavText\\\\NavTextPreview.tsx\",\n  _s = $RefreshSig$();\nimport { CanvasText, getMaterialUrl } from '@lib/canvas';\nimport { useCustomiserStore } from '@store/customiser';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { CanvasTexture } from 'three';\nimport { usePortalRef } from '@hooks';\nimport { createPortal } from 'react-dom';\nimport styles from './NavText.module.scss';\nimport { loadImage } from '@lib/img.util';\nimport NavTextPreviewScene from '@components/three/CustomiserCanvas/NavTextScene';\nimport FormInput from '@components/ui/FormInput';\n\n// TODO - Pre load the fonts somewhere\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nasync function loadFonts(fontUrl) {\n  const font = new FontFace('testFont', `url(${fontUrl})`);\n  await font.load();\n  document.fonts.add(font);\n}\nfunction getPatternType({\n  hasCrystals,\n  isLuxury\n}) {\n  if (!hasCrystals && isLuxury) return 'embroidery';else if (hasCrystals) return 'crystals';\n  return '';\n}\nconst NavTextPreview = ({\n  editText,\n  mainTextInputRef\n}) => {\n  _s();\n  var _editText$selectedNam, _previewImgRef$curren;\n  const previewImgRef = useRef(null);\n  const [fontFamily, setFontFamily] = useState(editText === null || editText === void 0 ? void 0 : editText.font);\n  const [isVisiblePreview, setIsVisiblePreview] = useState(false);\n  const hasCrystals = editText !== null && editText !== void 0 && editText.crystalPrice ? true : false;\n  const isLuxury = (editText === null || editText === void 0 ? void 0 : (_editText$selectedNam = editText.selectedName) === null || _editText$selectedNam === void 0 ? void 0 : _editText$selectedNam.id) === '2' ? true : false;\n  const hasPuff = editText !== null && editText !== void 0 && editText.puffPrice && !hasCrystals ? true : false; // 3D puff\n  const toNormalMap = hasCrystals ? false : true;\n  const patternType = getPatternType({\n    hasCrystals,\n    isLuxury\n  });\n  const {\n    updateText\n  } = useCustomiserStore();\n  const portalRef = usePortalRef('NavHeaderAfter');\n  const handleOnChange = e => {\n    var _mainTextInputRef$cur;\n    if (!(editText !== null && editText !== void 0 && editText.key)) return;\n    updateText(editText === null || editText === void 0 ? void 0 : editText.key, {\n      text: e.target.value\n    });\n    mainTextInputRef === null || mainTextInputRef === void 0 ? void 0 : (_mainTextInputRef$cur = mainTextInputRef.current) === null || _mainTextInputRef$cur === void 0 ? void 0 : _mainTextInputRef$cur.focus();\n  };\n\n  /**\r\n   * Save image here\r\n   */\n  const materialImgMemo = useMemo(() => {\n    return loadImage(getMaterialUrl(editText === null || editText === void 0 ? void 0 : editText.material));\n  }, [editText === null || editText === void 0 ? void 0 : editText.material]);\n  const outlineImgMemo = useMemo(() => {\n    return loadImage(getMaterialUrl(editText === null || editText === void 0 ? void 0 : editText.outline));\n  }, [editText === null || editText === void 0 ? void 0 : editText.outline]);\n  const fabricPatternImgMemo = useMemo(() => {\n    return loadImage('/Fabric_Knitted_006_height_small.png');\n  }, []);\n  const crystalNormalMapImgMemo = useMemo(() => {\n    return loadImage('/crystal-12.png');\n  }, []);\n  const crystalBgImgMemo = useMemo(() => {\n    return loadImage(getMaterialUrl(editText === null || editText === void 0 ? void 0 : editText.crystalBackground));\n  }, [editText === null || editText === void 0 ? void 0 : editText.crystalBackground]);\n  const crystalBgPatternImgMemo = useMemo(() => {\n    return loadImage('/crystal-bg-pattern.png');\n  }, []);\n  useEffect(() => {\n    const previewImgDom = previewImgRef.current;\n    (async () => {\n      const canvasText = new CanvasText({\n        hasPuff,\n        toNormalMap,\n        patternType,\n        text: editText === null || editText === void 0 ? void 0 : editText.text\n      });\n      if (!editText || !editText.key || !isVisiblePreview) {\n        canvasText.clear();\n        return;\n      }\n      if (!editText.text) {\n        canvasText.clear();\n        updateText(editText.key, {\n          preview: new CanvasTexture(canvasText.getOutlineCanvas())\n        });\n        return;\n      }\n\n      // Adjust this once preloading fonts has been implemented\n      if (fontFamily !== (editText === null || editText === void 0 ? void 0 : editText.font)) {\n        setFontFamily(editText === null || editText === void 0 ? void 0 : editText.font);\n        await loadFonts(editText === null || editText === void 0 ? void 0 : editText.font);\n      }\n      const img = (editText === null || editText === void 0 ? void 0 : editText.material) && (await materialImgMemo);\n      const outlineImg = (editText === null || editText === void 0 ? void 0 : editText.outline) && (await outlineImgMemo);\n      const embroideryPattern = await fabricPatternImgMemo;\n      const crystalNormalMap = await crystalNormalMapImgMemo;\n      const crystalBgPatternImg = await crystalBgPatternImgMemo;\n      const crystalBgImg = (editText === null || editText === void 0 ? void 0 : editText.crystalBackground) && (await crystalBgImgMemo);\n      const shouldUsePattern = isLuxury && !hasPuff;\n      const patternImg = shouldUsePattern && (hasCrystals ? crystalNormalMap : embroideryPattern);\n      await canvasText.previewText({\n        material: img,\n        outline: outlineImg,\n        previewImg: previewImgDom,\n        normalMapPatternImg: patternImg,\n        crystalBgPatternImg,\n        crystalBgImg\n      });\n      updateText(editText.key, {\n        preview: new CanvasTexture(canvasText.getOutlineCanvas()),\n        normalMap: new CanvasTexture(canvasText.getNormalMapOutlineCanvas())\n      });\n    })();\n  }, [editText === null || editText === void 0 ? void 0 : editText.text, editText === null || editText === void 0 ? void 0 : editText.material, editText === null || editText === void 0 ? void 0 : editText.outline, editText === null || editText === void 0 ? void 0 : editText.font, editText === null || editText === void 0 ? void 0 : editText.crystalBackground, isVisiblePreview, editText === null || editText === void 0 ? void 0 : editText.puffPrice, editText === null || editText === void 0 ? void 0 : editText.crystalPrice]);\n  if (!portalRef) {\n    return null;\n  }\n  return /*#__PURE__*/createPortal( /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"testPreview\",\n      style: {\n        position: 'absolute',\n        zIndex: '100'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.textPreview,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: !(editText !== null && editText !== void 0 && editText.text) ?\n        /*#__PURE__*/\n        // <div className={styles.noText}>Enter text to show preview</div>\n        _jsxDEV(FormInput, {\n          onChange: handleOnChange,\n          value: editText === null || editText === void 0 ? void 0 : editText.text,\n          placeholder: \"Type text here...\",\n          className: styles.textPreviewTextInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.textPreview__imgContainer,\n            style: {\n              display: 'none'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              height: 80,\n              width: 640,\n              ref: el => {\n                previewImgRef.current = el;\n                setIsVisiblePreview(!!el);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this), (_previewImgRef$curren = previewImgRef.current) !== null && _previewImgRef$curren !== void 0 && _previewImgRef$curren.src ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(NavTextPreviewScene, {\n              text: editText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 19\n            }, this)\n          }, void 0, false) : '']\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true), portalRef);\n};\n_s(NavTextPreview, \"t5HKszQyKvDCSl/1smV7QDZgvAk=\", false, function () {\n  return [useCustomiserStore, usePortalRef];\n});\n_c = NavTextPreview;\nexport default NavTextPreview;\nvar _c;\n$RefreshReg$(_c, \"NavTextPreview\");","map":{"version":3,"names":["CanvasText","getMaterialUrl","useCustomiserStore","useEffect","useMemo","useRef","useState","CanvasTexture","usePortalRef","createPortal","styles","loadImage","NavTextPreviewScene","FormInput","jsxDEV","_jsxDEV","Fragment","_Fragment","loadFonts","fontUrl","font","FontFace","load","document","fonts","add","getPatternType","hasCrystals","isLuxury","NavTextPreview","editText","mainTextInputRef","_s","_editText$selectedNam","_previewImgRef$curren","previewImgRef","fontFamily","setFontFamily","isVisiblePreview","setIsVisiblePreview","crystalPrice","selectedName","id","hasPuff","puffPrice","toNormalMap","patternType","updateText","portalRef","handleOnChange","e","_mainTextInputRef$cur","key","text","target","value","current","focus","materialImgMemo","material","outlineImgMemo","outline","fabricPatternImgMemo","crystalNormalMapImgMemo","crystalBgImgMemo","crystalBackground","crystalBgPatternImgMemo","previewImgDom","canvasText","clear","preview","getOutlineCanvas","img","outlineImg","embroideryPattern","crystalNormalMap","crystalBgPatternImg","crystalBgImg","shouldUsePattern","patternImg","previewText","previewImg","normalMapPatternImg","normalMap","getNormalMapOutlineCanvas","children","style","position","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","className","textPreview","onChange","placeholder","textPreviewTextInput","textPreview__imgContainer","display","height","width","ref","el","src","_c","$RefreshReg$"],"sources":["C:/Users/Reian/Desktop/Work/Freelance/Boxxer World/boxxerworld-shopify-frontend/customiser/src/components/nav/NavText/NavTextPreview.tsx"],"sourcesContent":["import { CanvasText, PatternType, getMaterialUrl } from '@lib/canvas';\r\nimport { useCustomiserStore } from '@store/customiser';\r\nimport { useEffect, useMemo, useRef, useState } from 'react';\r\nimport { CanvasTexture } from 'three';\r\nimport type { NavTextSelectProps } from './NavTextSelect';\r\nimport { usePortalRef } from '@hooks';\r\nimport { createPortal } from 'react-dom';\r\n\r\nimport styles from './NavText.module.scss';\r\nimport { loadImage } from '@lib/img.util';\r\nimport NavTextPreviewScene from '@components/three/CustomiserCanvas/NavTextScene';\r\nimport FormInput from '@components/ui/FormInput';\r\n\r\n// TODO - Pre load the fonts somewhere\r\nasync function loadFonts(fontUrl: string) {\r\n  const font = new FontFace('testFont', `url(${fontUrl})`);\r\n  await font.load();\r\n  document.fonts.add(font);\r\n}\r\n\r\nfunction getPatternType({\r\n  hasCrystals,\r\n  isLuxury,\r\n}: {\r\n  hasCrystals: boolean;\r\n  isLuxury: boolean;\r\n}): PatternType {\r\n  if (!hasCrystals && isLuxury) return 'embroidery';\r\n  else if (hasCrystals) return 'crystals';\r\n\r\n  return '';\r\n}\r\n\r\ninterface NavTextPreviewProps extends NavTextSelectProps {\r\n  mainTextInputRef: React.MutableRefObject<HTMLInputElement | null>;\r\n}\r\n\r\nconst NavTextPreview = ({ editText, mainTextInputRef }: NavTextPreviewProps) => {\r\n  const previewImgRef = useRef<HTMLImageElement | null>(null);\r\n  const [fontFamily, setFontFamily] = useState<string | undefined>(editText?.font);\r\n  const [isVisiblePreview, setIsVisiblePreview] = useState(false);\r\n\r\n  const hasCrystals: boolean = editText?.crystalPrice ? true : false;\r\n  const isLuxury: boolean = editText?.selectedName?.id === '2' ? true : false;\r\n  const hasPuff: boolean = editText?.puffPrice && !hasCrystals ? true : false; // 3D puff\r\n  const toNormalMap = hasCrystals ? false : true;\r\n  const patternType = getPatternType({ hasCrystals, isLuxury });\r\n\r\n  const { updateText } = useCustomiserStore();\r\n\r\n  const portalRef = usePortalRef('NavHeaderAfter');\r\n\r\n  const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (!editText?.key) return;\r\n    updateText(editText?.key, {\r\n      text: e.target.value,\r\n    });\r\n    mainTextInputRef?.current?.focus();\r\n  };\r\n\r\n  /**\r\n   * Save image here\r\n   */\r\n  const materialImgMemo = useMemo<Promise<HTMLImageElement>>(() => {\r\n    return loadImage(getMaterialUrl(editText?.material));\r\n  }, [editText?.material]);\r\n  const outlineImgMemo = useMemo<Promise<HTMLImageElement>>(() => {\r\n    return loadImage(getMaterialUrl(editText?.outline));\r\n  }, [editText?.outline]);\r\n  const fabricPatternImgMemo = useMemo<Promise<HTMLImageElement>>(() => {\r\n    return loadImage('/Fabric_Knitted_006_height_small.png');\r\n  }, []);\r\n  const crystalNormalMapImgMemo = useMemo<Promise<HTMLImageElement>>(() => {\r\n    return loadImage('/crystal-12.png');\r\n  }, []);\r\n  const crystalBgImgMemo = useMemo<Promise<HTMLImageElement>>(() => {\r\n    return loadImage(getMaterialUrl(editText?.crystalBackground));\r\n  }, [editText?.crystalBackground]);\r\n  const crystalBgPatternImgMemo = useMemo<Promise<HTMLImageElement>>(() => {\r\n    return loadImage('/crystal-bg-pattern.png');\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const previewImgDom = previewImgRef.current as HTMLImageElement;\r\n\r\n    (async () => {\r\n      const canvasText = new CanvasText({\r\n        hasPuff,\r\n        toNormalMap,\r\n        patternType,\r\n        text: editText?.text,\r\n      });\r\n\r\n      if (!editText || !editText.key || !isVisiblePreview) {\r\n        canvasText.clear();\r\n        return;\r\n      }\r\n\r\n      if (!editText.text) {\r\n        canvasText.clear();\r\n        updateText(editText.key, {\r\n          preview: new CanvasTexture(canvasText.getOutlineCanvas()),\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Adjust this once preloading fonts has been implemented\r\n      if (fontFamily !== editText?.font) {\r\n        setFontFamily(editText?.font);\r\n        await loadFonts(editText?.font as string);\r\n      }\r\n\r\n      const img = editText?.material && (await materialImgMemo);\r\n      const outlineImg = editText?.outline && (await outlineImgMemo);\r\n      const embroideryPattern = await fabricPatternImgMemo;\r\n      const crystalNormalMap = await crystalNormalMapImgMemo;\r\n      const crystalBgPatternImg = await crystalBgPatternImgMemo;\r\n      const crystalBgImg = editText?.crystalBackground && (await crystalBgImgMemo);\r\n\r\n      const shouldUsePattern = isLuxury && !hasPuff;\r\n      const patternImg = shouldUsePattern && (hasCrystals ? crystalNormalMap : embroideryPattern);\r\n\r\n      await canvasText.previewText({\r\n        material: img,\r\n        outline: outlineImg,\r\n        previewImg: previewImgDom,\r\n        normalMapPatternImg: patternImg,\r\n        crystalBgPatternImg,\r\n        crystalBgImg,\r\n      });\r\n\r\n      updateText(editText.key, {\r\n        preview: new CanvasTexture(canvasText.getOutlineCanvas()),\r\n        normalMap: new CanvasTexture(canvasText.getNormalMapOutlineCanvas()),\r\n      });\r\n    })();\r\n  }, [\r\n    editText?.text,\r\n    editText?.material,\r\n    editText?.outline,\r\n    editText?.font,\r\n    editText?.crystalBackground,\r\n    isVisiblePreview,\r\n    editText?.puffPrice,\r\n    editText?.crystalPrice,\r\n  ]);\r\n\r\n  if (!portalRef) {\r\n    return null;\r\n  }\r\n\r\n  return createPortal(\r\n    <>\r\n      <div id='testPreview' style={{ position: 'absolute', zIndex: '100' }} />\r\n      <div className={styles.textPreview}>\r\n        <div>\r\n          {!editText?.text ? (\r\n            // <div className={styles.noText}>Enter text to show preview</div>\r\n            <FormInput\r\n              onChange={handleOnChange}\r\n              value={editText?.text}\r\n              placeholder='Type text here...'\r\n              className={styles.textPreviewTextInput}\r\n            />\r\n          ) : (\r\n            <>\r\n              {/* Image is no longer needed, remove this */}\r\n              <div className={styles.textPreview__imgContainer} style={{ display: 'none' }}>\r\n                <img\r\n                  height={80}\r\n                  width={640}\r\n                  ref={(el) => {\r\n                    previewImgRef.current = el;\r\n                    setIsVisiblePreview(!!el);\r\n                  }}\r\n                />\r\n              </div>\r\n              {previewImgRef.current?.src ? (\r\n                <>\r\n                  <NavTextPreviewScene text={editText} />\r\n                </>\r\n              ) : (\r\n                ''\r\n              )}\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>,\r\n    portalRef,\r\n  );\r\n};\r\n\r\nexport default NavTextPreview;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}