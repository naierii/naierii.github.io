{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Reian\\\\Desktop\\\\Work\\\\Freelance\\\\Boxxer World\\\\boxxerworld-shopify-frontend\\\\customiser\\\\src\\\\components\\\\nav\\\\NavButtons\\\\NavButtons.tsx\",\n  _s = $RefreshSig$();\nimport { usePortalRef } from '@hooks';\nimport { useCustomiserStore } from '@store/customiser';\nimport cn from 'classnames';\nimport ReactDOM from 'react-dom';\nimport styles from './NavButtons.module.scss';\nimport DontShowAgain from '../../ui/DontShowAgain';\nimport { useState } from 'react';\nimport ContainedButton from '@components/ui/Button/ContainedButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NavButtons = ({\n  className,\n  confirmText,\n  confirmStorage\n}) => {\n  _s();\n  const rootClassName = cn(styles.root, className);\n  const cancelPartChange = useCustomiserStore(state => state.cancelPartChange);\n  const resetNav = useCustomiserStore(state => state.resetNav);\n  const navItems = useCustomiserStore(state => state.navItems);\n  const selectedNav = useCustomiserStore(state => state.selectedNav);\n  const navIndex = navItems.findIndex(nav => nav.name === (selectedNav === null || selectedNav === void 0 ? void 0 : selectedNav.name));\n  const setSelectedNav = useCustomiserStore(state => state.setSelectedNav);\n  const portalRef = usePortalRef('CustomiserNavActions');\n  const popupPortalRef = usePortalRef('popupContainer');\n  const [showPopup, setShowPopup] = useState(false);\n  const notifTitle = confirmStorage;\n  const localStorageItem = localStorage.getItem(notifTitle || '');\n  const shouldShowNotification = !localStorageItem;\n  const saveHandler = () => {\n    if (navIndex !== -1) {\n      setSelectedNav(navIndex + 1);\n    }\n  };\n  console.log(navItems);\n  const finishedNavs = [{\n    name: 'Fitting',\n    finished: false\n  }, {\n    name: 'Waist',\n    finished: false\n  }, {\n    name: ''\n  }];\n  if (!portalRef || !popupPortalRef) {\n    return null;\n  }\n  return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: rootClassName,\n      children: [/*#__PURE__*/_jsxDEV(ContainedButton, {\n        onClick: () => cancelPartChange(),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContainedButton, {\n        onClick: () => {\n          // if (!confirmText) {\n          //   resetNav();\n          // } else {\n          //   if (shouldShowNotification) {\n          //     setShowPopup(true);\n          //   } else {\n          //     resetNav();\n          //   }\n          // }\n          saveHandler();\n        },\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContainedButton, {\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), confirmText && showPopup && shouldShowNotification && notifTitle && /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(DontShowAgain, {\n      cb: resetNav,\n      setShowNotification: setShowPopup,\n      notifName: notifTitle,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: confirmText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }, this), popupPortalRef)]\n  }, void 0, true), portalRef);\n};\n_s(NavButtons, \"MrmcMNN8LznWu/32/BnmhACDtfI=\", false, function () {\n  return [useCustomiserStore, useCustomiserStore, useCustomiserStore, useCustomiserStore, useCustomiserStore, usePortalRef, usePortalRef];\n});\n_c = NavButtons;\nexport default NavButtons;\nvar _c;\n$RefreshReg$(_c, \"NavButtons\");","map":{"version":3,"names":["usePortalRef","useCustomiserStore","cn","ReactDOM","styles","DontShowAgain","useState","ContainedButton","jsxDEV","_jsxDEV","Fragment","_Fragment","NavButtons","className","confirmText","confirmStorage","_s","rootClassName","root","cancelPartChange","state","resetNav","navItems","selectedNav","navIndex","findIndex","nav","name","setSelectedNav","portalRef","popupPortalRef","showPopup","setShowPopup","notifTitle","localStorageItem","localStorage","getItem","shouldShowNotification","saveHandler","console","log","finishedNavs","finished","createPortal","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","cb","setShowNotification","notifName","_c","$RefreshReg$"],"sources":["C:/Users/Reian/Desktop/Work/Freelance/Boxxer World/boxxerworld-shopify-frontend/customiser/src/components/nav/NavButtons/NavButtons.tsx"],"sourcesContent":["import { usePortalRef } from '@hooks';\r\nimport { useCustomiserStore } from '@store/customiser';\r\nimport cn from 'classnames';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport styles from './NavButtons.module.scss';\r\nimport { Falsey } from 'lodash';\r\n\r\nimport DontShowAgain from '../../ui/DontShowAgain';\r\nimport { useState } from 'react';\r\nimport ContainedButton from '@components/ui/Button/ContainedButton';\r\nimport { finished } from 'stream';\r\n\r\nexport interface NavButtonsProps {\r\n  className?: string;\r\n  confirmText?: string | Falsey;\r\n  confirmStorage?: string;\r\n}\r\n\r\nconst NavButtons = ({ className, confirmText, confirmStorage }: NavButtonsProps) => {\r\n  const rootClassName = cn(styles.root, className);\r\n  const cancelPartChange = useCustomiserStore((state) => state.cancelPartChange);\r\n  const resetNav = useCustomiserStore((state) => state.resetNav);\r\n  const navItems = useCustomiserStore((state) => state.navItems);\r\n  const selectedNav = useCustomiserStore((state) => state.selectedNav);\r\n  const navIndex = navItems.findIndex((nav) => nav.name === selectedNav?.name);\r\n  const setSelectedNav = useCustomiserStore((state) => state.setSelectedNav);\r\n  const portalRef = usePortalRef('CustomiserNavActions');\r\n\r\n  const popupPortalRef = usePortalRef('popupContainer');\r\n  const [showPopup, setShowPopup] = useState<boolean>(false);\r\n\r\n  const notifTitle = confirmStorage;\r\n  const localStorageItem = localStorage.getItem(notifTitle || '');\r\n  const shouldShowNotification = !localStorageItem;\r\n\r\n  const saveHandler = () => {\r\n    if (navIndex !== -1) {\r\n      setSelectedNav(navIndex + 1);\r\n    }\r\n  };\r\n\r\n  console.log(navItems);\r\n  const finishedNavs = [\r\n    {\r\n      name: 'Fitting',\r\n      finished: false,\r\n    },\r\n    {\r\n      name: 'Waist',\r\n      finished: false,\r\n    },\r\n    {\r\n      name: '',\r\n    },\r\n  ];\r\n\r\n  if (!portalRef || !popupPortalRef) {\r\n    return null;\r\n  }\r\n\r\n  return ReactDOM.createPortal(\r\n    <>\r\n      <div className={rootClassName}>\r\n        <ContainedButton onClick={() => cancelPartChange()}>Cancel</ContainedButton>\r\n        <ContainedButton\r\n          onClick={() => {\r\n            // if (!confirmText) {\r\n            //   resetNav();\r\n            // } else {\r\n            //   if (shouldShowNotification) {\r\n            //     setShowPopup(true);\r\n            //   } else {\r\n            //     resetNav();\r\n            //   }\r\n            // }\r\n            saveHandler();\r\n          }}\r\n        >\r\n          Save\r\n        </ContainedButton>\r\n        <ContainedButton>Next</ContainedButton>\r\n      </div>\r\n      {confirmText &&\r\n        showPopup &&\r\n        shouldShowNotification &&\r\n        notifTitle &&\r\n        ReactDOM.createPortal(\r\n          <DontShowAgain cb={resetNav} setShowNotification={setShowPopup} notifName={notifTitle}>\r\n            <span>{confirmText}</span>\r\n          </DontShowAgain>,\r\n          popupPortalRef,\r\n        )}\r\n    </>,\r\n    portalRef,\r\n  );\r\n};\r\n\r\nexport default NavButtons;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}