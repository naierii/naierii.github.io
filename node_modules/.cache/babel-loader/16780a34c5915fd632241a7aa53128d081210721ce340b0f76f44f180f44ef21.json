{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Reian\\\\Desktop\\\\Work\\\\Freelance\\\\Boxxer World\\\\boxxerworld-shopify-frontend\\\\customiser\\\\src\\\\components\\\\nav\\\\NavText\\\\NavText.tsx\",\n  _s = $RefreshSig$();\nimport { useCustomiserStore } from '@store/customiser';\nimport { startTransition, useEffect, useMemo, useRef, useState } from 'react';\nimport NavDecalAdjust from '../NavDecalAdjust';\nimport styles from './NavText.module.scss';\nimport NavTextFinish from './NavTextFinish';\nimport NavTextNameTypes from './NavTextNameTypes';\nimport NavTextOutline from './NavTextOutline';\nimport NavTextSelect from './NavTextSelect';\nimport NavTextsSelection from './NavTextsSelection';\nimport NavTextPreview from './NavTextPreview';\nimport { usePortalRef } from '@hooks';\nimport { createPortal } from 'react-dom';\nimport NavTextCategories from './NavTextCategories';\nimport NavTextNavSteps from './NavTextNavSteps';\nimport NavTextInput from './NavTextInput';\nimport ContainedButton from '@components/ui/Button/ContainedButton';\nimport DontShowAgain from '@components/ui/DontShowAgain';\nimport InfoDisplay from '@components/ui/InfoButton/InfoDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NavText = ({\n  showEditText,\n  setShowEditText\n}) => {\n  _s();\n  const [step, setStep] = useState(0);\n  const texts = useCustomiserStore(state => state.texts);\n  const updateText = useCustomiserStore(state => state.updateText);\n  const deleteText = useCustomiserStore(state => state.deleteText);\n  const updateIsMinimizedCustomiserNav = useCustomiserStore(state => state.updateIsMinimizedCustomiserNav);\n  const isMinimizedCustomiserNav = useCustomiserStore(state => state.isMinimizedCustomiserNav);\n  const editText = useMemo(() => texts === null || texts === void 0 ? void 0 : texts.find(g => g.edit), [texts]);\n  const [isPickingOutline, setIsPickingOutline] = useState(false);\n  const [isPickingCrystal, setIsPickingCrystal] = useState(false);\n  const navHeaderRef = usePortalRef('NavHeader');\n  const popupContainerRef = usePortalRef('popupContainer');\n  const mainTextInputRef = useRef(null);\n  const noOutlineSelected = step === 2 && isPickingOutline && !(editText !== null && editText !== void 0 && editText.outline);\n  const noCrystalSelected = step === 3 && isPickingCrystal && !(editText !== null && editText !== void 0 && editText.crystalBackground);\n  const hasFinishedAllSteps = step === 3 && ((editText === null || editText === void 0 ? void 0 : editText.crystalBackground) || !isPickingCrystal);\n  const hasFinishedStep1 = !!(editText !== null && editText !== void 0 && editText.text);\n  const hasFinishedStep2 = !!(editText !== null && editText !== void 0 && editText.material);\n  const hasFinishedStep3 = !!(editText !== null && editText !== void 0 && editText.outline);\n  const hasFinishedStep4 = !!(editText !== null && editText !== void 0 && editText.crystalBackground);\n  const finishedSteps = [hasFinishedStep1, hasFinishedStep2, !noOutlineSelected, !noCrystalSelected];\n  const isVisiblePrev = step !== 0;\n  const isClickableNext = finishedSteps[step || 0];\n  const isVisibleNext = typeof step === 'number' ? step < 3 : false;\n  console.log('isVisibleNext', isVisibleNext);\n  console.log('step', step);\n  const saveAndApplyChecker = () => {\n    if (!hasFinishedStep1) {\n      alert('Please enter a text to continue');\n      setStep(0);\n      return false;\n    } else if (!hasFinishedStep2) {\n      alert('Select a text color to continue');\n      setStep(1);\n      return false;\n    }\n    return true;\n  };\n  useEffect(() => {\n    if (editText !== null && editText !== void 0 && editText.key) {\n      setShowEditText(true);\n    } else {\n      setShowEditText(false);\n    }\n  }, [editText]);\n  useEffect(() => {\n    setShowEditText((editText === null || editText === void 0 ? void 0 : editText.key) !== undefined);\n    return () => {\n      setShowEditText(false);\n    };\n  }, []);\n  const addText = () => {\n    setShowEditText(true);\n  };\n  const setScale = event => {\n    startTransition(() => {\n      if (editText !== null && editText !== void 0 && editText.key) updateText(editText.key, {\n        decalScale: Number(event)\n      });\n    });\n  };\n  const setRotation = event => {\n    startTransition(() => {\n      if (editText !== null && editText !== void 0 && editText.key) updateText(editText.key, {\n        decalRotation: Number(event)\n      });\n    });\n  };\n  const placeText = () => {\n    if (isPickingCrystal && noCrystalSelected) {\n      alert('Select a crystal type');\n      return;\n    }\n    if (editText !== null && editText !== void 0 && editText.key && !(editText !== null && editText !== void 0 && editText.decalPosition)) {\n      updateText(editText.key, {\n        decalFreeze: true,\n        decalPosition: [-0.01989325641440387, 2.436930108198209, 1.6226380277735046],\n        decalOrientation: [-0.14799034762565572, -0.17866277612764514, -0.026487426629834374, 'XYZ']\n      });\n    }\n    updateIsMinimizedCustomiserNav(true);\n  };\n  const applyText = () => {\n    if (editText !== null && editText !== void 0 && editText.key) {\n      updateText(editText.key, {\n        decalFreeze: false,\n        edit: false,\n        hasApplied: true\n      });\n    }\n    setStep(0);\n    setShowEditText(false);\n  };\n  const localStorageConfirmCancelText = localStorage.getItem('confirmCancelText');\n  const shouldShowConfirmCancelText = !localStorageConfirmCancelText;\n  const [showConfirmCancelPopup, setShowConfirmCancelPopup] = useState(false);\n  const [shouldShowInfoDisplay, setShouldShowInfoDisplay] = useState(true);\n  const cancelText = () => {\n    if (editText !== null && editText !== void 0 && editText.key) {\n      applyText();\n      if (editText !== null && editText !== void 0 && editText.text && !(editText !== null && editText !== void 0 && editText.hasApplied)) {\n        deleteText(editText.key);\n      }\n    }\n  };\n  const cancelTextHandler = () => {\n    if (editText !== null && editText !== void 0 && editText.text) {\n      setShowConfirmCancelPopup(true);\n    } else {\n      cancelText();\n    }\n  };\n  const handleTitleClick = _step => {\n    if (_step === step) {\n      setStep(undefined);\n    } else {\n      setStep(_step);\n    }\n  };\n  const maxStep = 4;\n  const handleNext = () => {\n    if (step === undefined) {\n      setStep(0);\n    } else if (step < maxStep - 1) {\n      switch (step) {\n        case 0:\n          if (!(editText !== null && editText !== void 0 && editText.text)) {\n            alert('Please enter a text to continue');\n            return;\n          }\n          break;\n        case 1:\n          if (!(editText !== null && editText !== void 0 && editText.selectedName)) {\n            alert('Select a text color type');\n            return;\n          } else if (!(editText !== null && editText !== void 0 && editText.material)) {\n            alert('Select a color for text');\n            return;\n          }\n          break;\n        case 2:\n          if (isPickingOutline && !(editText !== null && editText !== void 0 && editText.outline)) {\n            alert('Select an outline');\n            return;\n          }\n          break;\n        default:\n          break;\n      }\n      console.log('editText', editText);\n      setStep(step + 1);\n    }\n  };\n  const handlePrevious = () => {\n    if (step === undefined) {\n      setStep(0);\n    } else if (step > 0) {\n      setStep(step - 1);\n    }\n  };\n  const navCategoryNames = ['Font', 'Color', 'Outline', 'Finish'];\n  const NavTextCategoriesItems = () => {\n    const handleOnClick = index => {\n      if (navCategoryNames[index] === 'Outline' || navCategoryNames[index] === 'Finish') {\n        if (!saveAndApplyChecker()) return;\n      }\n      if (!(editText !== null && editText !== void 0 && editText.text)) {\n        alert('Please enter a text to continue');\n        return;\n      }\n      handleTitleClick(index);\n    };\n    const finishedCategories = [hasFinishedStep1, hasFinishedStep2, hasFinishedStep3, hasFinishedStep4];\n    return navCategoryNames.map((name, index) => {\n      const isSelectedCategory = step === index;\n      const categoryClassNames = `\n        ${isSelectedCategory ? styles.selectedCategoryItem : ''}\n        ${finishedCategories[index] ? styles.finishedCategoryItem : ''}\n      `;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: categoryClassNames,\n        onClick: () => handleOnClick(index),\n        children: name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  const CategoryDisplay = () => {\n    switch (step) {\n      case 0:\n        return /*#__PURE__*/_jsxDEV(NavTextSelect, {\n          editText: editText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 16\n        }, this);\n      case 1:\n        return /*#__PURE__*/_jsxDEV(NavTextNameTypes, {\n          editText: editText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 16\n        }, this);\n      case 2:\n        return /*#__PURE__*/_jsxDEV(NavTextOutline, {\n          editText: editText,\n          setIsPickingOutline: setIsPickingOutline\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 16\n        }, this);\n      case 3:\n        return /*#__PURE__*/_jsxDEV(NavTextFinish, {\n          setIsPickingCrystal: setIsPickingCrystal,\n          editText: editText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this);\n      default:\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: showEditText ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.navTextEdit,\n        children: [/*#__PURE__*/_jsxDEV(NavTextPreview, {\n          mainTextInputRef: mainTextInputRef,\n          editText: editText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(NavTextCategories, {\n          children: NavTextCategoriesItems()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }, this), CategoryDisplay(), /*#__PURE__*/_jsxDEV(NavTextNavSteps, {\n          onClickNext: handleNext,\n          onClickPrev: handlePrevious,\n          onClickCancel: cancelTextHandler,\n          onClickSave: placeText,\n          isVisiblePrev: isVisiblePrev,\n          isVisibleNext: isVisibleNext,\n          isClickableNext: isClickableNext\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this), (editText === null || editText === void 0 ? void 0 : editText.key) && editText.decalPosition && isMinimizedCustomiserNav && popupContainerRef && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(NavDecalAdjust, {\n            scale: editText === null || editText === void 0 ? void 0 : editText.decalScale,\n            rotation: editText === null || editText === void 0 ? void 0 : editText.decalRotation,\n            onScale: setScale,\n            onRotate: setRotation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 19\n          }, this), shouldShowInfoDisplay && /*#__PURE__*/createPortal( /*#__PURE__*/_jsxDEV(InfoDisplay, {\n            cb: () => {\n              setShouldShowInfoDisplay(false);\n            },\n            title: \"Apply Text\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Click where you want the text to go\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              style: {\n                maxWidth: '100%'\n              },\n              src: \"examples/NavText/sample-apply-text.png\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 23\n          }, this), popupContainerRef)]\n        }, void 0, true), editText && isMinimizedCustomiserNav && navHeaderRef && hasFinishedAllSteps && /*#__PURE__*/createPortal( /*#__PURE__*/_jsxDEV(ContainedButton, {\n          onClick: () => {\n            if (!saveAndApplyChecker()) {\n              return updateIsMinimizedCustomiserNav(false);\n            }\n            applyText();\n            updateIsMinimizedCustomiserNav(false);\n          },\n          classNames: styles.navHeaderSaveText,\n          children: \"SAVE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 17\n        }, this), navHeaderRef), popupContainerRef && /*#__PURE__*/createPortal( /*#__PURE__*/_jsxDEV(NavTextInput, {\n          ref: mainTextInputRef,\n          editText: editText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 17\n        }, this), popupContainerRef)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }, this), popupContainerRef && shouldShowConfirmCancelText && showConfirmCancelPopup && /*#__PURE__*/createPortal( /*#__PURE__*/_jsxDEV(DontShowAgain, {\n        cb: cancelText,\n        setShowNotification: setShowConfirmCancelPopup,\n        notifName: 'editTextCancelText',\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Cancel text customization?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 15\n      }, this), popupContainerRef)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(NavTextsSelection, {\n        onAddTextClicked: addText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)\n  }, void 0, false);\n};\n_s(NavText, \"AUSxf/DW11xalVDmSbKTj4fxF4M=\", false, function () {\n  return [useCustomiserStore, useCustomiserStore, useCustomiserStore, useCustomiserStore, useCustomiserStore, usePortalRef, usePortalRef];\n});\n_c = NavText;\nexport default NavText;\nvar _c;\n$RefreshReg$(_c, \"NavText\");","map":{"version":3,"names":["useCustomiserStore","startTransition","useEffect","useMemo","useRef","useState","NavDecalAdjust","styles","NavTextFinish","NavTextNameTypes","NavTextOutline","NavTextSelect","NavTextsSelection","NavTextPreview","usePortalRef","createPortal","NavTextCategories","NavTextNavSteps","NavTextInput","ContainedButton","DontShowAgain","InfoDisplay","jsxDEV","_jsxDEV","Fragment","_Fragment","NavText","showEditText","setShowEditText","_s","step","setStep","texts","state","updateText","deleteText","updateIsMinimizedCustomiserNav","isMinimizedCustomiserNav","editText","find","g","edit","isPickingOutline","setIsPickingOutline","isPickingCrystal","setIsPickingCrystal","navHeaderRef","popupContainerRef","mainTextInputRef","noOutlineSelected","outline","noCrystalSelected","crystalBackground","hasFinishedAllSteps","hasFinishedStep1","text","hasFinishedStep2","material","hasFinishedStep3","hasFinishedStep4","finishedSteps","isVisiblePrev","isClickableNext","isVisibleNext","console","log","saveAndApplyChecker","alert","key","undefined","addText","setScale","event","decalScale","Number","setRotation","decalRotation","placeText","decalPosition","decalFreeze","decalOrientation","applyText","hasApplied","localStorageConfirmCancelText","localStorage","getItem","shouldShowConfirmCancelText","showConfirmCancelPopup","setShowConfirmCancelPopup","shouldShowInfoDisplay","setShouldShowInfoDisplay","cancelText","cancelTextHandler","handleTitleClick","_step","maxStep","handleNext","selectedName","handlePrevious","navCategoryNames","NavTextCategoriesItems","handleOnClick","index","finishedCategories","map","name","isSelectedCategory","categoryClassNames","selectedCategoryItem","finishedCategoryItem","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","CategoryDisplay","navTextEdit","onClickNext","onClickPrev","onClickCancel","onClickSave","scale","rotation","onScale","onRotate","cb","title","style","maxWidth","src","classNames","navHeaderSaveText","ref","setShowNotification","notifName","onAddTextClicked","_c","$RefreshReg$"],"sources":["C:/Users/Reian/Desktop/Work/Freelance/Boxxer World/boxxerworld-shopify-frontend/customiser/src/components/nav/NavText/NavText.tsx"],"sourcesContent":["import { useCustomiserStore } from '@store/customiser';\r\nimport { LegacyRef, startTransition, useEffect, useMemo, useRef, useState } from 'react';\r\nimport NavDecalAdjust from '../NavDecalAdjust';\r\n\r\nimport Accordion from '@components/ui/Accordion/Accordion';\r\nimport NavStepButtons from '../NavStepButtons';\r\nimport styles from './NavText.module.scss';\r\nimport NavTextFinish from './NavTextFinish';\r\nimport NavTextNameTypes from './NavTextNameTypes';\r\nimport NavTextOutline from './NavTextOutline';\r\nimport NavTextSelect from './NavTextSelect';\r\nimport NavTextsSelection from './NavTextsSelection';\r\nimport NavTextPreview from './NavTextPreview';\r\nimport { usePortalRef } from '@hooks';\r\nimport Button from '@components/ui/Button';\r\nimport { createPortal } from 'react-dom';\r\nimport NavTextCategories from './NavTextCategories';\r\nimport NavTextNavSteps from './NavTextNavSteps';\r\nimport { has } from 'lodash';\r\nimport FormInput from '@components/ui/FormInput';\r\nimport NavTextInput from './NavTextInput';\r\nimport ContainedButton from '@components/ui/Button/ContainedButton';\r\nimport DontShowAgain from '@components/ui/DontShowAgain';\r\nimport InfoDisplay from '@components/ui/InfoButton/InfoDisplay';\r\n\r\ninterface NavTextProps {\r\n  showEditText: boolean;\r\n  setShowEditText: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst NavText = ({ showEditText, setShowEditText }: NavTextProps) => {\r\n  const [step, setStep] = useState<number | undefined>(0);\r\n\r\n  const texts = useCustomiserStore((state) => state.texts);\r\n  const updateText = useCustomiserStore((state) => state.updateText);\r\n  const deleteText = useCustomiserStore((state) => state.deleteText);\r\n  const updateIsMinimizedCustomiserNav = useCustomiserStore(\r\n    (state) => state.updateIsMinimizedCustomiserNav,\r\n  );\r\n  const isMinimizedCustomiserNav = useCustomiserStore((state) => state.isMinimizedCustomiserNav);\r\n  const editText = useMemo(() => texts?.find((g) => g.edit), [texts]);\r\n  const [isPickingOutline, setIsPickingOutline] = useState(false);\r\n  const [isPickingCrystal, setIsPickingCrystal] = useState(false);\r\n  const navHeaderRef = usePortalRef('NavHeader');\r\n  const popupContainerRef = usePortalRef('popupContainer');\r\n\r\n  const mainTextInputRef = useRef<HTMLInputElement | null>(null);\r\n\r\n  const noOutlineSelected = step === 2 && isPickingOutline && !editText?.outline;\r\n  const noCrystalSelected = step === 3 && isPickingCrystal && !editText?.crystalBackground;\r\n  const hasFinishedAllSteps = step === 3 && (editText?.crystalBackground || !isPickingCrystal);\r\n\r\n  const hasFinishedStep1 = !!editText?.text;\r\n  const hasFinishedStep2 = !!editText?.material;\r\n  const hasFinishedStep3 = !!editText?.outline;\r\n  const hasFinishedStep4 = !!editText?.crystalBackground;\r\n\r\n  const finishedSteps = [\r\n    hasFinishedStep1,\r\n    hasFinishedStep2,\r\n    !noOutlineSelected,\r\n    !noCrystalSelected,\r\n  ];\r\n\r\n  const isVisiblePrev = step !== 0;\r\n  const isClickableNext = finishedSteps[step || 0];\r\n  const isVisibleNext = typeof step === 'number' ? step < 3 : false;\r\n  console.log('isVisibleNext', isVisibleNext);\r\n  console.log('step', step);\r\n\r\n  const saveAndApplyChecker = () => {\r\n    if (!hasFinishedStep1) {\r\n      alert('Please enter a text to continue');\r\n      setStep(0);\r\n      return false;\r\n    } else if (!hasFinishedStep2) {\r\n      alert('Select a text color to continue');\r\n      setStep(1);\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (editText?.key) {\r\n      setShowEditText(true);\r\n    } else {\r\n      setShowEditText(false);\r\n    }\r\n  }, [editText]);\r\n\r\n  useEffect(() => {\r\n    setShowEditText(editText?.key !== undefined);\r\n    return () => {\r\n      setShowEditText(false);\r\n    };\r\n  }, []);\r\n\r\n  const addText = () => {\r\n    setShowEditText(true);\r\n  };\r\n\r\n  const setScale = (event: number) => {\r\n    startTransition(() => {\r\n      if (editText?.key) updateText(editText.key, { decalScale: Number(event) });\r\n    });\r\n  };\r\n\r\n  const setRotation = (event: number) => {\r\n    startTransition(() => {\r\n      if (editText?.key) updateText(editText.key, { decalRotation: Number(event) });\r\n    });\r\n  };\r\n\r\n  const placeText = () => {\r\n    if (isPickingCrystal && noCrystalSelected) {\r\n      alert('Select a crystal type');\r\n      return;\r\n    }\r\n    if (editText?.key && !editText?.decalPosition) {\r\n      updateText(editText.key, {\r\n        decalFreeze: true,\r\n        decalPosition: [-0.01989325641440387, 2.436930108198209, 1.6226380277735046],\r\n        decalOrientation: [\r\n          -0.14799034762565572,\r\n          -0.17866277612764514,\r\n          -0.026487426629834374,\r\n          'XYZ',\r\n        ],\r\n      });\r\n    }\r\n    updateIsMinimizedCustomiserNav(true);\r\n  };\r\n\r\n  const applyText = () => {\r\n    if (editText?.key) {\r\n      updateText(editText.key, {\r\n        decalFreeze: false,\r\n        edit: false,\r\n        hasApplied: true,\r\n      });\r\n    }\r\n\r\n    setStep(0);\r\n\r\n    setShowEditText(false);\r\n  };\r\n\r\n  const localStorageConfirmCancelText = localStorage.getItem('confirmCancelText');\r\n  const shouldShowConfirmCancelText = !localStorageConfirmCancelText;\r\n\r\n  const [showConfirmCancelPopup, setShowConfirmCancelPopup] = useState(false);\r\n  const [shouldShowInfoDisplay, setShouldShowInfoDisplay] = useState(true);\r\n\r\n  const cancelText = () => {\r\n    if (editText?.key) {\r\n      applyText();\r\n      if (editText?.text && !editText?.hasApplied) {\r\n        deleteText(editText.key);\r\n      }\r\n    }\r\n  };\r\n\r\n  const cancelTextHandler = () => {\r\n    if (editText?.text) {\r\n      setShowConfirmCancelPopup(true);\r\n    } else {\r\n      cancelText();\r\n    }\r\n  };\r\n\r\n  const handleTitleClick = (_step: number | string) => {\r\n    if (_step === step) {\r\n      setStep(undefined);\r\n    } else {\r\n      setStep(_step as number);\r\n    }\r\n  };\r\n\r\n  const maxStep = 4;\r\n\r\n  const handleNext = () => {\r\n    if (step === undefined) {\r\n      setStep(0);\r\n    } else if (step < maxStep - 1) {\r\n      switch (step) {\r\n        case 0:\r\n          if (!editText?.text) {\r\n            alert('Please enter a text to continue');\r\n            return;\r\n          }\r\n          break;\r\n        case 1:\r\n          if (!editText?.selectedName) {\r\n            alert('Select a text color type');\r\n            return;\r\n          } else if (!editText?.material) {\r\n            alert('Select a color for text');\r\n            return;\r\n          }\r\n          break;\r\n        case 2:\r\n          if (isPickingOutline && !editText?.outline) {\r\n            alert('Select an outline');\r\n            return;\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      console.log('editText', editText);\r\n      setStep(step + 1);\r\n    }\r\n  };\r\n\r\n  const handlePrevious = () => {\r\n    if (step === undefined) {\r\n      setStep(0);\r\n    } else if (step > 0) {\r\n      setStep(step - 1);\r\n    }\r\n  };\r\n\r\n  const navCategoryNames = ['Font', 'Color', 'Outline', 'Finish'];\r\n  const NavTextCategoriesItems = () => {\r\n    const handleOnClick = (index: number) => {\r\n      if (navCategoryNames[index] === 'Outline' || navCategoryNames[index] === 'Finish') {\r\n        if (!saveAndApplyChecker()) return;\r\n      }\r\n      if (!editText?.text) {\r\n        alert('Please enter a text to continue');\r\n        return;\r\n      }\r\n      handleTitleClick(index);\r\n    };\r\n\r\n    const finishedCategories = [\r\n      hasFinishedStep1,\r\n      hasFinishedStep2,\r\n      hasFinishedStep3,\r\n      hasFinishedStep4,\r\n    ];\r\n\r\n    return navCategoryNames.map((name, index) => {\r\n      const isSelectedCategory = step === index;\r\n      const categoryClassNames = `\r\n        ${isSelectedCategory ? styles.selectedCategoryItem : ''}\r\n        ${finishedCategories[index] ? styles.finishedCategoryItem : ''}\r\n      `;\r\n      return (\r\n        <div key={index} className={categoryClassNames} onClick={() => handleOnClick(index)}>\r\n          {name}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  const CategoryDisplay = () => {\r\n    switch (step) {\r\n      case 0:\r\n        return <NavTextSelect editText={editText} />;\r\n      case 1:\r\n        return <NavTextNameTypes editText={editText} />;\r\n      case 2:\r\n        return <NavTextOutline editText={editText} setIsPickingOutline={setIsPickingOutline} />;\r\n      case 3:\r\n        return (\r\n          <NavTextFinish\r\n            setIsPickingCrystal={setIsPickingCrystal}\r\n            editText={editText}\r\n          ></NavTextFinish>\r\n        );\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {showEditText ? (\r\n        <>\r\n          <div className={styles.navTextEdit}>\r\n            <NavTextPreview mainTextInputRef={mainTextInputRef} editText={editText} />\r\n            <NavTextCategories>{NavTextCategoriesItems()}</NavTextCategories>\r\n            {CategoryDisplay()}\r\n            <NavTextNavSteps\r\n              onClickNext={handleNext}\r\n              onClickPrev={handlePrevious}\r\n              onClickCancel={cancelTextHandler}\r\n              onClickSave={placeText}\r\n              isVisiblePrev={isVisiblePrev}\r\n              isVisibleNext={isVisibleNext}\r\n              isClickableNext={isClickableNext}\r\n            />\r\n            {editText?.key &&\r\n              editText.decalPosition &&\r\n              isMinimizedCustomiserNav &&\r\n              popupContainerRef && (\r\n                <>\r\n                  <NavDecalAdjust\r\n                    scale={editText?.decalScale}\r\n                    rotation={editText?.decalRotation}\r\n                    onScale={setScale}\r\n                    onRotate={setRotation}\r\n                  />\r\n                  {shouldShowInfoDisplay &&\r\n                    createPortal(\r\n                      <InfoDisplay\r\n                        cb={() => {\r\n                          setShouldShowInfoDisplay(false);\r\n                        }}\r\n                        title='Apply Text'\r\n                      >\r\n                        <h5>Click where you want the text to go</h5>\r\n                        <img\r\n                          style={{ maxWidth: '100%' }}\r\n                          src='examples/NavText/sample-apply-text.png'\r\n                        />\r\n                      </InfoDisplay>,\r\n                      popupContainerRef,\r\n                    )}\r\n                </>\r\n              )}\r\n            {editText &&\r\n              isMinimizedCustomiserNav &&\r\n              navHeaderRef &&\r\n              hasFinishedAllSteps &&\r\n              createPortal(\r\n                <ContainedButton\r\n                  onClick={() => {\r\n                    if (!saveAndApplyChecker()) {\r\n                      return updateIsMinimizedCustomiserNav(false);\r\n                    }\r\n\r\n                    applyText();\r\n                    updateIsMinimizedCustomiserNav(false);\r\n                  }}\r\n                  classNames={styles.navHeaderSaveText}\r\n                >\r\n                  SAVE\r\n                </ContainedButton>,\r\n                navHeaderRef,\r\n              )}\r\n            {popupContainerRef &&\r\n              createPortal(\r\n                <NavTextInput ref={mainTextInputRef} editText={editText} />,\r\n                popupContainerRef,\r\n              )}\r\n          </div>\r\n          {popupContainerRef &&\r\n            shouldShowConfirmCancelText &&\r\n            showConfirmCancelPopup &&\r\n            createPortal(\r\n              <DontShowAgain\r\n                cb={cancelText}\r\n                setShowNotification={setShowConfirmCancelPopup}\r\n                notifName={'editTextCancelText'}\r\n              >\r\n                <span>Cancel text customization?</span>\r\n              </DontShowAgain>,\r\n              popupContainerRef,\r\n            )}\r\n        </>\r\n      ) : (\r\n        <>\r\n          <NavTextsSelection onAddTextClicked={addText}></NavTextsSelection>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavText;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}