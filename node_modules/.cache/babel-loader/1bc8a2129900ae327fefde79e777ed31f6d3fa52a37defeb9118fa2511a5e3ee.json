{"ast":null,"code":"import { BufferGeometry, Float32BufferAttribute, Matrix4, Vector3 } from 'three';\n\n/**\n * You can use this geometry to create a decal mesh, that serves different kinds of purposes.\n * e.g. adding unique details to models, performing dynamic visual environmental changes or covering seams.\n *\n * Constructor parameter:\n *\n * mesh — Any mesh object\n * position — Position of the decal projector\n * orientation — Orientation of the decal projector\n * size — Size of the decal projector\n *\n * reference: http://blog.wolfire.com/2009/06/how-to-project-decals/\n *\n */\n\nclass DecalGeometry extends BufferGeometry {\n  constructor(mesh, position, orientation, size) {\n    super();\n\n    // buffers\n\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    // helpers\n\n    const plane = new Vector3();\n\n    // this matrix represents the transformation of the decal projector\n\n    const projectorMatrix = new Matrix4();\n    projectorMatrix.makeRotationFromEuler(orientation);\n    projectorMatrix.setPosition(position);\n    const projectorMatrixInverse = new Matrix4();\n    projectorMatrixInverse.copy(projectorMatrix).invert();\n\n    // generate buffers\n\n    generate();\n\n    // build geometry\n\n    this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    function generate() {\n      let decalVertices = [];\n      const vertex = new Vector3();\n      const normal = new Vector3();\n\n      // handle different geometry types\n\n      const geometry = mesh.geometry;\n      const positionAttribute = geometry.attributes.position;\n      const normalAttribute = geometry.attributes.normal;\n\n      // first, create an array of 'DecalVertex' objects\n      // three consecutive 'DecalVertex' objects represent a single face\n      //\n      // this data structure will be later used to perform the clipping\n\n      if (geometry.index !== null) {\n        // indexed BufferGeometry\n\n        const index = geometry.index;\n        for (let i = 0; i < index.count; i++) {\n          vertex.fromBufferAttribute(positionAttribute, index.getX(i));\n          normal.fromBufferAttribute(normalAttribute, index.getX(i));\n          pushDecalVertex(decalVertices, vertex, normal);\n        }\n      } else {\n        // non-indexed BufferGeometry\n\n        for (let i = 0; i < positionAttribute.count; i++) {\n          vertex.fromBufferAttribute(positionAttribute, i);\n          normal.fromBufferAttribute(normalAttribute, i);\n          pushDecalVertex(decalVertices, vertex, normal);\n        }\n      }\n\n      // second, clip the geometry so that it doesn't extend out from the projector\n\n      decalVertices = clipGeometry(decalVertices, plane.set(1, 0, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(-1, 0, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, 1, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, -1, 0));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, 0, 1));\n      decalVertices = clipGeometry(decalVertices, plane.set(0, 0, -1));\n\n      // third, generate final vertices, normals and uvs\n\n      for (let i = 0; i < decalVertices.length; i++) {\n        const decalVertex = decalVertices[i];\n\n        // create texture coordinates (we are still in projector space)\n\n        uvs.push(0.5 + decalVertex.position.x / size.x, 0.5 + decalVertex.position.y / size.y);\n\n        // transform the vertex back to world space\n\n        decalVertex.position.applyMatrix4(projectorMatrix);\n\n        // now create vertex and normal buffer data\n\n        vertices.push(decalVertex.position.x, decalVertex.position.y, decalVertex.position.z);\n        normals.push(decalVertex.normal.x, decalVertex.normal.y, decalVertex.normal.z);\n      }\n    }\n    function pushDecalVertex(decalVertices, vertex, normal) {\n      // transform the vertex to world space, then to projector space\n\n      vertex.applyMatrix4(mesh.matrixWorld);\n      vertex.applyMatrix4(projectorMatrixInverse);\n      normal.transformDirection(mesh.matrixWorld);\n      decalVertices.push(new DecalVertex(vertex.clone(), normal.clone()));\n    }\n    function clipGeometry(inVertices, plane) {\n      const outVertices = [];\n      const s = 0.5 * Math.abs(size.dot(plane));\n\n      // a single iteration clips one face,\n      // which consists of three consecutive 'DecalVertex' objects\n\n      for (let i = 0; i < inVertices.length; i += 3) {\n        let total = 0;\n        let nV1;\n        let nV2;\n        let nV3;\n        let nV4;\n        const d1 = inVertices[i + 0].position.dot(plane) - s;\n        const d2 = inVertices[i + 1].position.dot(plane) - s;\n        const d3 = inVertices[i + 2].position.dot(plane) - s;\n        const v1Out = d1 > 0;\n        const v2Out = d2 > 0;\n        const v3Out = d3 > 0;\n\n        // calculate, how many vertices of the face lie outside of the clipping plane\n\n        total = (v1Out ? 1 : 0) + (v2Out ? 1 : 0) + (v3Out ? 1 : 0);\n        switch (total) {\n          case 0:\n            {\n              // the entire face lies inside of the plane, no clipping needed\n\n              outVertices.push(inVertices[i]);\n              outVertices.push(inVertices[i + 1]);\n              outVertices.push(inVertices[i + 2]);\n              break;\n            }\n          case 1:\n            {\n              // one vertex lies outside of the plane, perform clipping\n\n              if (v1Out) {\n                nV1 = inVertices[i + 1];\n                nV2 = inVertices[i + 2];\n                nV3 = clip(inVertices[i], nV1, plane, s);\n                nV4 = clip(inVertices[i], nV2, plane, s);\n              }\n              if (v2Out) {\n                nV1 = inVertices[i];\n                nV2 = inVertices[i + 2];\n                nV3 = clip(inVertices[i + 1], nV1, plane, s);\n                nV4 = clip(inVertices[i + 1], nV2, plane, s);\n                outVertices.push(nV3);\n                outVertices.push(nV2.clone());\n                outVertices.push(nV1.clone());\n                outVertices.push(nV2.clone());\n                outVertices.push(nV3.clone());\n                outVertices.push(nV4);\n                break;\n              }\n              if (v3Out) {\n                nV1 = inVertices[i];\n                nV2 = inVertices[i + 1];\n                nV3 = clip(inVertices[i + 2], nV1, plane, s);\n                nV4 = clip(inVertices[i + 2], nV2, plane, s);\n              }\n              outVertices.push(nV1.clone());\n              outVertices.push(nV2.clone());\n              outVertices.push(nV3);\n              outVertices.push(nV4);\n              outVertices.push(nV3.clone());\n              outVertices.push(nV2.clone());\n              break;\n            }\n          case 2:\n            {\n              // two vertices lies outside of the plane, perform clipping\n\n              if (!v1Out) {\n                nV1 = inVertices[i].clone();\n                nV2 = clip(nV1, inVertices[i + 1], plane, s);\n                nV3 = clip(nV1, inVertices[i + 2], plane, s);\n                outVertices.push(nV1);\n                outVertices.push(nV2);\n                outVertices.push(nV3);\n              }\n              if (!v2Out) {\n                nV1 = inVertices[i + 1].clone();\n                nV2 = clip(nV1, inVertices[i + 2], plane, s);\n                nV3 = clip(nV1, inVertices[i], plane, s);\n                outVertices.push(nV1);\n                outVertices.push(nV2);\n                outVertices.push(nV3);\n              }\n              if (!v3Out) {\n                nV1 = inVertices[i + 2].clone();\n                nV2 = clip(nV1, inVertices[i], plane, s);\n                nV3 = clip(nV1, inVertices[i + 1], plane, s);\n                outVertices.push(nV1);\n                outVertices.push(nV2);\n                outVertices.push(nV3);\n              }\n              break;\n            }\n          case 3:\n            {\n              // the entire face lies outside of the plane, so let's discard the corresponding vertices\n\n              break;\n            }\n        }\n      }\n      return outVertices;\n    }\n    function clip(v0, v1, p, s) {\n      const d0 = v0.position.dot(p) - s;\n      const d1 = v1.position.dot(p) - s;\n      const s0 = d0 / (d0 - d1);\n      const v = new DecalVertex(new Vector3(v0.position.x + s0 * (v1.position.x - v0.position.x), v0.position.y + s0 * (v1.position.y - v0.position.y), v0.position.z + s0 * (v1.position.z - v0.position.z)), new Vector3(v0.normal.x + s0 * (v1.normal.x - v0.normal.x), v0.normal.y + s0 * (v1.normal.y - v0.normal.y), v0.normal.z + s0 * (v1.normal.z - v0.normal.z)));\n\n      // need to clip more values (texture coordinates)? do it this way:\n      // intersectpoint.value = a.value + s * ( b.value - a.value );\n\n      return v;\n    }\n  }\n}\n\n// helper\n\nclass DecalVertex {\n  constructor(position, normal) {\n    this.position = position;\n    this.normal = normal;\n  }\n  clone() {\n    return new this.constructor(this.position.clone(), this.normal.clone());\n  }\n}\nexport { DecalGeometry, DecalVertex };","map":{"version":3,"names":["BufferGeometry","Float32BufferAttribute","Matrix4","Vector3","DecalGeometry","constructor","mesh","position","orientation","size","vertices","normals","uvs","plane","projectorMatrix","makeRotationFromEuler","setPosition","projectorMatrixInverse","copy","invert","generate","setAttribute","decalVertices","vertex","normal","geometry","positionAttribute","attributes","normalAttribute","index","i","count","fromBufferAttribute","getX","pushDecalVertex","clipGeometry","set","length","decalVertex","push","x","y","applyMatrix4","z","matrixWorld","transformDirection","DecalVertex","clone","inVertices","outVertices","s","Math","abs","dot","total","nV1","nV2","nV3","nV4","d1","d2","d3","v1Out","v2Out","v3Out","clip","v0","v1","p","d0","s0","v"],"sources":["C:/Users/Reian/Desktop/Work/Freelance/Boxxer World/boxxerworld-shopify-frontend/customiser/node_modules/three/examples/jsm/geometries/DecalGeometry.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tMatrix4,\n\tVector3\n} from 'three';\n\n/**\n * You can use this geometry to create a decal mesh, that serves different kinds of purposes.\n * e.g. adding unique details to models, performing dynamic visual environmental changes or covering seams.\n *\n * Constructor parameter:\n *\n * mesh — Any mesh object\n * position — Position of the decal projector\n * orientation — Orientation of the decal projector\n * size — Size of the decal projector\n *\n * reference: http://blog.wolfire.com/2009/06/how-to-project-decals/\n *\n */\n\nclass DecalGeometry extends BufferGeometry {\n\n\tconstructor( mesh, position, orientation, size ) {\n\n\t\tsuper();\n\n\t\t// buffers\n\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helpers\n\n\t\tconst plane = new Vector3();\n\n\t\t// this matrix represents the transformation of the decal projector\n\n\t\tconst projectorMatrix = new Matrix4();\n\t\tprojectorMatrix.makeRotationFromEuler( orientation );\n\t\tprojectorMatrix.setPosition( position );\n\n\t\tconst projectorMatrixInverse = new Matrix4();\n\t\tprojectorMatrixInverse.copy( projectorMatrix ).invert();\n\n\t\t// generate buffers\n\n\t\tgenerate();\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generate() {\n\n\t\t\tlet decalVertices = [];\n\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst normal = new Vector3();\n\n\t\t\t// handle different geometry types\n\n\t\t\tconst geometry = mesh.geometry;\n\n\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\tconst normalAttribute = geometry.attributes.normal;\n\n\t\t\t// first, create an array of 'DecalVertex' objects\n\t\t\t// three consecutive 'DecalVertex' objects represent a single face\n\t\t\t//\n\t\t\t// this data structure will be later used to perform the clipping\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tconst index = geometry.index;\n\n\t\t\t\tfor ( let i = 0; i < index.count; i ++ ) {\n\n\t\t\t\t\tvertex.fromBufferAttribute( positionAttribute, index.getX( i ) );\n\t\t\t\t\tnormal.fromBufferAttribute( normalAttribute, index.getX( i ) );\n\n\t\t\t\t\tpushDecalVertex( decalVertices, vertex, normal );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\n\n\t\t\t\t\tvertex.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t\tnormal.fromBufferAttribute( normalAttribute, i );\n\n\t\t\t\t\tpushDecalVertex( decalVertices, vertex, normal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// second, clip the geometry so that it doesn't extend out from the projector\n\n\t\t\tdecalVertices = clipGeometry( decalVertices, plane.set( 1, 0, 0 ) );\n\t\t\tdecalVertices = clipGeometry( decalVertices, plane.set( - 1, 0, 0 ) );\n\t\t\tdecalVertices = clipGeometry( decalVertices, plane.set( 0, 1, 0 ) );\n\t\t\tdecalVertices = clipGeometry( decalVertices, plane.set( 0, - 1, 0 ) );\n\t\t\tdecalVertices = clipGeometry( decalVertices, plane.set( 0, 0, 1 ) );\n\t\t\tdecalVertices = clipGeometry( decalVertices, plane.set( 0, 0, - 1 ) );\n\n\t\t\t// third, generate final vertices, normals and uvs\n\n\t\t\tfor ( let i = 0; i < decalVertices.length; i ++ ) {\n\n\t\t\t\tconst decalVertex = decalVertices[ i ];\n\n\t\t\t\t// create texture coordinates (we are still in projector space)\n\n\t\t\t\tuvs.push(\n\t\t\t\t\t0.5 + ( decalVertex.position.x / size.x ),\n\t\t\t\t\t0.5 + ( decalVertex.position.y / size.y )\n\t\t\t\t);\n\n\t\t\t\t// transform the vertex back to world space\n\n\t\t\t\tdecalVertex.position.applyMatrix4( projectorMatrix );\n\n\t\t\t\t// now create vertex and normal buffer data\n\n\t\t\t\tvertices.push( decalVertex.position.x, decalVertex.position.y, decalVertex.position.z );\n\t\t\t\tnormals.push( decalVertex.normal.x, decalVertex.normal.y, decalVertex.normal.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushDecalVertex( decalVertices, vertex, normal ) {\n\n\t\t\t// transform the vertex to world space, then to projector space\n\n\t\t\tvertex.applyMatrix4( mesh.matrixWorld );\n\t\t\tvertex.applyMatrix4( projectorMatrixInverse );\n\n\t\t\tnormal.transformDirection( mesh.matrixWorld );\n\n\t\t\tdecalVertices.push( new DecalVertex( vertex.clone(), normal.clone() ) );\n\n\t\t}\n\n\t\tfunction clipGeometry( inVertices, plane ) {\n\n\t\t\tconst outVertices = [];\n\n\t\t\tconst s = 0.5 * Math.abs( size.dot( plane ) );\n\n\t\t\t// a single iteration clips one face,\n\t\t\t// which consists of three consecutive 'DecalVertex' objects\n\n\t\t\tfor ( let i = 0; i < inVertices.length; i += 3 ) {\n\n\t\t\t\tlet total = 0;\n\t\t\t\tlet nV1;\n\t\t\t\tlet nV2;\n\t\t\t\tlet nV3;\n\t\t\t\tlet nV4;\n\n\t\t\t\tconst d1 = inVertices[ i + 0 ].position.dot( plane ) - s;\n\t\t\t\tconst d2 = inVertices[ i + 1 ].position.dot( plane ) - s;\n\t\t\t\tconst d3 = inVertices[ i + 2 ].position.dot( plane ) - s;\n\n\t\t\t\tconst v1Out = d1 > 0;\n\t\t\t\tconst v2Out = d2 > 0;\n\t\t\t\tconst v3Out = d3 > 0;\n\n\t\t\t\t// calculate, how many vertices of the face lie outside of the clipping plane\n\n\t\t\t\ttotal = ( v1Out ? 1 : 0 ) + ( v2Out ? 1 : 0 ) + ( v3Out ? 1 : 0 );\n\n\t\t\t\tswitch ( total ) {\n\n\t\t\t\t\tcase 0: {\n\n\t\t\t\t\t\t// the entire face lies inside of the plane, no clipping needed\n\n\t\t\t\t\t\toutVertices.push( inVertices[ i ] );\n\t\t\t\t\t\toutVertices.push( inVertices[ i + 1 ] );\n\t\t\t\t\t\toutVertices.push( inVertices[ i + 2 ] );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 1: {\n\n\t\t\t\t\t\t// one vertex lies outside of the plane, perform clipping\n\n\t\t\t\t\t\tif ( v1Out ) {\n\n\t\t\t\t\t\t\tnV1 = inVertices[ i + 1 ];\n\t\t\t\t\t\t\tnV2 = inVertices[ i + 2 ];\n\t\t\t\t\t\t\tnV3 = clip( inVertices[ i ], nV1, plane, s );\n\t\t\t\t\t\t\tnV4 = clip( inVertices[ i ], nV2, plane, s );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( v2Out ) {\n\n\t\t\t\t\t\t\tnV1 = inVertices[ i ];\n\t\t\t\t\t\t\tnV2 = inVertices[ i + 2 ];\n\t\t\t\t\t\t\tnV3 = clip( inVertices[ i + 1 ], nV1, plane, s );\n\t\t\t\t\t\t\tnV4 = clip( inVertices[ i + 1 ], nV2, plane, s );\n\n\t\t\t\t\t\t\toutVertices.push( nV3 );\n\t\t\t\t\t\t\toutVertices.push( nV2.clone() );\n\t\t\t\t\t\t\toutVertices.push( nV1.clone() );\n\n\t\t\t\t\t\t\toutVertices.push( nV2.clone() );\n\t\t\t\t\t\t\toutVertices.push( nV3.clone() );\n\t\t\t\t\t\t\toutVertices.push( nV4 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( v3Out ) {\n\n\t\t\t\t\t\t\tnV1 = inVertices[ i ];\n\t\t\t\t\t\t\tnV2 = inVertices[ i + 1 ];\n\t\t\t\t\t\t\tnV3 = clip( inVertices[ i + 2 ], nV1, plane, s );\n\t\t\t\t\t\t\tnV4 = clip( inVertices[ i + 2 ], nV2, plane, s );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toutVertices.push( nV1.clone() );\n\t\t\t\t\t\toutVertices.push( nV2.clone() );\n\t\t\t\t\t\toutVertices.push( nV3 );\n\n\t\t\t\t\t\toutVertices.push( nV4 );\n\t\t\t\t\t\toutVertices.push( nV3.clone() );\n\t\t\t\t\t\toutVertices.push( nV2.clone() );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 2: {\n\n\t\t\t\t\t\t// two vertices lies outside of the plane, perform clipping\n\n\t\t\t\t\t\tif ( ! v1Out ) {\n\n\t\t\t\t\t\t\tnV1 = inVertices[ i ].clone();\n\t\t\t\t\t\t\tnV2 = clip( nV1, inVertices[ i + 1 ], plane, s );\n\t\t\t\t\t\t\tnV3 = clip( nV1, inVertices[ i + 2 ], plane, s );\n\t\t\t\t\t\t\toutVertices.push( nV1 );\n\t\t\t\t\t\t\toutVertices.push( nV2 );\n\t\t\t\t\t\t\toutVertices.push( nV3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! v2Out ) {\n\n\t\t\t\t\t\t\tnV1 = inVertices[ i + 1 ].clone();\n\t\t\t\t\t\t\tnV2 = clip( nV1, inVertices[ i + 2 ], plane, s );\n\t\t\t\t\t\t\tnV3 = clip( nV1, inVertices[ i ], plane, s );\n\t\t\t\t\t\t\toutVertices.push( nV1 );\n\t\t\t\t\t\t\toutVertices.push( nV2 );\n\t\t\t\t\t\t\toutVertices.push( nV3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! v3Out ) {\n\n\t\t\t\t\t\t\tnV1 = inVertices[ i + 2 ].clone();\n\t\t\t\t\t\t\tnV2 = clip( nV1, inVertices[ i ], plane, s );\n\t\t\t\t\t\t\tnV3 = clip( nV1, inVertices[ i + 1 ], plane, s );\n\t\t\t\t\t\t\toutVertices.push( nV1 );\n\t\t\t\t\t\t\toutVertices.push( nV2 );\n\t\t\t\t\t\t\toutVertices.push( nV3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 3: {\n\n\t\t\t\t\t\t// the entire face lies outside of the plane, so let's discard the corresponding vertices\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn outVertices;\n\n\t\t}\n\n\t\tfunction clip( v0, v1, p, s ) {\n\n\t\t\tconst d0 = v0.position.dot( p ) - s;\n\t\t\tconst d1 = v1.position.dot( p ) - s;\n\n\t\t\tconst s0 = d0 / ( d0 - d1 );\n\n\t\t\tconst v = new DecalVertex(\n\t\t\t\tnew Vector3(\n\t\t\t\t\tv0.position.x + s0 * ( v1.position.x - v0.position.x ),\n\t\t\t\t\tv0.position.y + s0 * ( v1.position.y - v0.position.y ),\n\t\t\t\t\tv0.position.z + s0 * ( v1.position.z - v0.position.z )\n\t\t\t\t),\n\t\t\t\tnew Vector3(\n\t\t\t\t\tv0.normal.x + s0 * ( v1.normal.x - v0.normal.x ),\n\t\t\t\t\tv0.normal.y + s0 * ( v1.normal.y - v0.normal.y ),\n\t\t\t\t\tv0.normal.z + s0 * ( v1.normal.z - v0.normal.z )\n\t\t\t\t)\n\t\t\t);\n\n\t\t\t// need to clip more values (texture coordinates)? do it this way:\n\t\t\t// intersectpoint.value = a.value + s * ( b.value - a.value );\n\n\t\t\treturn v;\n\n\t\t}\n\n\t}\n\n}\n\n// helper\n\nclass DecalVertex {\n\n\tconstructor( position, normal ) {\n\n\t\tthis.position = position;\n\t\tthis.normal = normal;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.position.clone(), this.normal.clone() );\n\n\t}\n\n}\n\nexport { DecalGeometry, DecalVertex };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}