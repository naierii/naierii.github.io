{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Reian\\\\Desktop\\\\Work\\\\Freelance\\\\Boxxer World\\\\boxxerworld-shopify-frontend\\\\customiser\\\\src\\\\components\\\\nav\\\\NavButtons\\\\NavButtons.tsx\",\n  _s = $RefreshSig$();\nimport { usePortalRef } from '@hooks';\nimport { useCustomiserStore } from '@store/customiser';\nimport cn from 'classnames';\nimport ReactDOM from 'react-dom';\nimport styles from './NavButtons.module.scss';\nimport DontShowAgain from '../../ui/DontShowAgain';\nimport { useState } from 'react';\nimport ContainedButton from '@components/ui/Button/ContainedButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NavButtons = ({\n  className,\n  confirmText,\n  confirmStorage\n}) => {\n  _s();\n  var _finishedNavs$find;\n  const rootClassName = cn(styles.root, className);\n  const {\n    navItems,\n    selectedNav,\n    parts,\n    cancelPartChange,\n    resetNav,\n    setSelectedNav\n  } = useCustomiserStore();\n  const navIndex = navItems.findIndex(nav => nav.name === (selectedNav === null || selectedNav === void 0 ? void 0 : selectedNav.name));\n  const portalRef = usePortalRef('CustomiserNavActions');\n  const popupPortalRef = usePortalRef('popupContainer');\n  const [showPopup, setShowPopup] = useState(false);\n  const notifTitle = confirmStorage;\n  const localStorageItem = localStorage.getItem(notifTitle || '');\n  const shouldShowNotification = !localStorageItem;\n  const saveHandler = () => {\n    if (navIndex !== -1) {\n      setSelectedNav(navIndex + 1);\n    }\n  };\n  console.log(selectedNav);\n  const finishedNavs = parts.map(part => {\n    const partName = part.part.name;\n    if (!partName) return;\n    const isFinishedPart = !!navItems.find(navItem => {\n      return navItem.name === partName;\n    });\n    return {\n      name: partName,\n      isFinished: isFinishedPart\n    };\n  });\n  const isFinishedCurrentNav = selectedNav && ((_finishedNavs$find = finishedNavs.find(nav => (nav === null || nav === void 0 ? void 0 : nav.name) === selectedNav.name)) === null || _finishedNavs$find === void 0 ? void 0 : _finishedNavs$find.isFinished);\n\n  // const isFinishedNav = (name: string) => {\n  //   const finishedNav = finishedNavs.find((nav) => nav.name === name);\n  //   return finishedNav?.finished;\n  // };\n\n  if (!portalRef || !popupPortalRef) {\n    return null;\n  }\n  return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: rootClassName,\n      children: [/*#__PURE__*/_jsxDEV(ContainedButton, {\n        onClick: () => cancelPartChange(),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContainedButton, {\n        onClick: () => {\n          // if (!confirmText) {\n          //   resetNav();\n          // } else {\n          //   if (shouldShowNotification) {\n          //     setShowPopup(true);\n          //   } else {\n          //     resetNav();\n          //   }\n          // }\n          saveHandler();\n        },\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContainedButton, {\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), confirmText && showPopup && shouldShowNotification && notifTitle && /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(DontShowAgain, {\n      cb: resetNav,\n      setShowNotification: setShowPopup,\n      notifName: notifTitle,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: confirmText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }, this), popupPortalRef)]\n  }, void 0, true), portalRef);\n};\n_s(NavButtons, \"yNGJ5fdOQ1foE9mEa4vhzMCAQzs=\", false, function () {\n  return [useCustomiserStore, usePortalRef, usePortalRef];\n});\n_c = NavButtons;\nexport default NavButtons;\nvar _c;\n$RefreshReg$(_c, \"NavButtons\");","map":{"version":3,"names":["usePortalRef","useCustomiserStore","cn","ReactDOM","styles","DontShowAgain","useState","ContainedButton","jsxDEV","_jsxDEV","Fragment","_Fragment","NavButtons","className","confirmText","confirmStorage","_s","_finishedNavs$find","rootClassName","root","navItems","selectedNav","parts","cancelPartChange","resetNav","setSelectedNav","navIndex","findIndex","nav","name","portalRef","popupPortalRef","showPopup","setShowPopup","notifTitle","localStorageItem","localStorage","getItem","shouldShowNotification","saveHandler","console","log","finishedNavs","map","part","partName","isFinishedPart","find","navItem","isFinished","isFinishedCurrentNav","createPortal","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","cb","setShowNotification","notifName","_c","$RefreshReg$"],"sources":["C:/Users/Reian/Desktop/Work/Freelance/Boxxer World/boxxerworld-shopify-frontend/customiser/src/components/nav/NavButtons/NavButtons.tsx"],"sourcesContent":["import { usePortalRef } from '@hooks';\r\nimport { useCustomiserStore } from '@store/customiser';\r\nimport cn from 'classnames';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport styles from './NavButtons.module.scss';\r\nimport { Falsey } from 'lodash';\r\n\r\nimport DontShowAgain from '../../ui/DontShowAgain';\r\nimport { useState } from 'react';\r\nimport ContainedButton from '@components/ui/Button/ContainedButton';\r\nimport { finished } from 'stream';\r\n\r\nexport interface NavButtonsProps {\r\n  className?: string;\r\n  confirmText?: string | Falsey;\r\n  confirmStorage?: string;\r\n}\r\n\r\nconst NavButtons = ({ className, confirmText, confirmStorage }: NavButtonsProps) => {\r\n  const rootClassName = cn(styles.root, className);\r\n\r\n  const {\r\n    navItems,\r\n    selectedNav,\r\n    parts,\r\n\r\n    cancelPartChange,\r\n    resetNav,\r\n    setSelectedNav,\r\n  } = useCustomiserStore();\r\n\r\n  const navIndex = navItems.findIndex((nav) => nav.name === selectedNav?.name);\r\n\r\n  const portalRef = usePortalRef('CustomiserNavActions');\r\n\r\n  const popupPortalRef = usePortalRef('popupContainer');\r\n  const [showPopup, setShowPopup] = useState<boolean>(false);\r\n\r\n  const notifTitle = confirmStorage;\r\n  const localStorageItem = localStorage.getItem(notifTitle || '');\r\n  const shouldShowNotification = !localStorageItem;\r\n\r\n  const saveHandler = () => {\r\n    if (navIndex !== -1) {\r\n      setSelectedNav(navIndex + 1);\r\n    }\r\n  };\r\n\r\n  console.log(selectedNav);\r\n\r\n  const finishedNavs = parts.map((part) => {\r\n    const partName = part.part.name;\r\n    if (!partName) return;\r\n    const isFinishedPart = !!navItems.find((navItem) => {\r\n      return navItem.name === partName;\r\n    });\r\n    return {\r\n      name: partName,\r\n      isFinished: isFinishedPart,\r\n    };\r\n  });\r\n\r\n  const isFinishedCurrentNav =\r\n    selectedNav && finishedNavs.find((nav) => nav?.name === selectedNav.name)?.isFinished;\r\n\r\n  // const isFinishedNav = (name: string) => {\r\n  //   const finishedNav = finishedNavs.find((nav) => nav.name === name);\r\n  //   return finishedNav?.finished;\r\n  // };\r\n\r\n  if (!portalRef || !popupPortalRef) {\r\n    return null;\r\n  }\r\n\r\n  return ReactDOM.createPortal(\r\n    <>\r\n      <div className={rootClassName}>\r\n        <ContainedButton onClick={() => cancelPartChange()}>Cancel</ContainedButton>\r\n        <ContainedButton\r\n          onClick={() => {\r\n            // if (!confirmText) {\r\n            //   resetNav();\r\n            // } else {\r\n            //   if (shouldShowNotification) {\r\n            //     setShowPopup(true);\r\n            //   } else {\r\n            //     resetNav();\r\n            //   }\r\n            // }\r\n            saveHandler();\r\n          }}\r\n        >\r\n          Save\r\n        </ContainedButton>\r\n        <ContainedButton>Next</ContainedButton>\r\n      </div>\r\n      {confirmText &&\r\n        showPopup &&\r\n        shouldShowNotification &&\r\n        notifTitle &&\r\n        ReactDOM.createPortal(\r\n          <DontShowAgain cb={resetNav} setShowNotification={setShowPopup} notifName={notifTitle}>\r\n            <span>{confirmText}</span>\r\n          </DontShowAgain>,\r\n          popupPortalRef,\r\n        )}\r\n    </>,\r\n    portalRef,\r\n  );\r\n};\r\n\r\nexport default NavButtons;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}