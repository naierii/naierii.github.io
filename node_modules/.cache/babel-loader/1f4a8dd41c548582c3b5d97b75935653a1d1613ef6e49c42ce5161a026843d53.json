{"ast":null,"code":"import * as THREE from 'three';\nfunction shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {\n  const material = class material extends THREE.ShaderMaterial {\n    constructor() {\n      const entries = Object.entries(uniforms); // Create unforms and shaders\n\n      super({\n        uniforms: entries.reduce((acc, [name, value]) => {\n          const uniform = THREE.UniformsUtils.clone({\n            [name]: {\n              value\n            }\n          });\n          return {\n            ...acc,\n            ...uniform\n          };\n        }, {}),\n        vertexShader,\n        fragmentShader\n      }); // Create getter/setters\n\n      this.key = '';\n      entries.forEach(([name]) => Object.defineProperty(this, name, {\n        get: () => this.uniforms[name].value,\n        set: v => this.uniforms[name].value = v\n      }));\n      if (onInit) onInit(this);\n    }\n  };\n  material.key = THREE.MathUtils.generateUUID();\n  return material;\n}\nexport { shaderMaterial };","map":{"version":3,"names":["THREE","shaderMaterial","uniforms","vertexShader","fragmentShader","onInit","material","ShaderMaterial","constructor","entries","Object","reduce","acc","name","value","uniform","UniformsUtils","clone","key","forEach","defineProperty","get","set","v","MathUtils","generateUUID"],"sources":["C:/Users/Reian/Desktop/Work/Freelance/Boxxer World/boxxerworld-shopify-frontend/customiser/node_modules/@react-three/drei/core/shaderMaterial.js"],"sourcesContent":["import * as THREE from 'three';\n\nfunction shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {\n  const material = class material extends THREE.ShaderMaterial {\n    constructor() {\n      const entries = Object.entries(uniforms); // Create unforms and shaders\n\n      super({\n        uniforms: entries.reduce((acc, [name, value]) => {\n          const uniform = THREE.UniformsUtils.clone({\n            [name]: {\n              value\n            }\n          });\n          return { ...acc,\n            ...uniform\n          };\n        }, {}),\n        vertexShader,\n        fragmentShader\n      }); // Create getter/setters\n\n      this.key = '';\n      entries.forEach(([name]) => Object.defineProperty(this, name, {\n        get: () => this.uniforms[name].value,\n        set: v => this.uniforms[name].value = v\n      }));\n      if (onInit) onInit(this);\n    }\n\n  };\n  material.key = THREE.MathUtils.generateUUID();\n  return material;\n}\n\nexport { shaderMaterial };\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,cAAcA,CAACC,QAAQ,EAAEC,YAAY,EAAEC,cAAc,EAAEC,MAAM,EAAE;EACtE,MAAMC,QAAQ,GAAG,MAAMA,QAAQ,SAASN,KAAK,CAACO,cAAc,CAAC;IAC3DC,WAAWA,CAAA,EAAG;MACZ,MAAMC,OAAO,GAAGC,MAAM,CAACD,OAAO,CAACP,QAAQ,CAAC,CAAC,CAAC;;MAE1C,KAAK,CAAC;QACJA,QAAQ,EAAEO,OAAO,CAACE,MAAM,CAAC,CAACC,GAAG,EAAE,CAACC,IAAI,EAAEC,KAAK,CAAC,KAAK;UAC/C,MAAMC,OAAO,GAAGf,KAAK,CAACgB,aAAa,CAACC,KAAK,CAAC;YACxC,CAACJ,IAAI,GAAG;cACNC;YACF;UACF,CAAC,CAAC;UACF,OAAO;YAAE,GAAGF,GAAG;YACb,GAAGG;UACL,CAAC;QACH,CAAC,EAAE,CAAC,CAAC,CAAC;QACNZ,YAAY;QACZC;MACF,CAAC,CAAC,CAAC,CAAC;;MAEJ,IAAI,CAACc,GAAG,GAAG,EAAE;MACbT,OAAO,CAACU,OAAO,CAAC,CAAC,CAACN,IAAI,CAAC,KAAKH,MAAM,CAACU,cAAc,CAAC,IAAI,EAAEP,IAAI,EAAE;QAC5DQ,GAAG,EAAEA,CAAA,KAAM,IAAI,CAACnB,QAAQ,CAACW,IAAI,CAAC,CAACC,KAAK;QACpCQ,GAAG,EAAEC,CAAC,IAAI,IAAI,CAACrB,QAAQ,CAACW,IAAI,CAAC,CAACC,KAAK,GAAGS;MACxC,CAAC,CAAC,CAAC;MACH,IAAIlB,MAAM,EAAEA,MAAM,CAAC,IAAI,CAAC;IAC1B;EAEF,CAAC;EACDC,QAAQ,CAACY,GAAG,GAAGlB,KAAK,CAACwB,SAAS,CAACC,YAAY,CAAC,CAAC;EAC7C,OAAOnB,QAAQ;AACjB;AAEA,SAASL,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}