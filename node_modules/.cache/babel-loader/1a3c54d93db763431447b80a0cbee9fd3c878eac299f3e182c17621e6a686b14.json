{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Reian\\\\Desktop\\\\Work\\\\Freelance\\\\Boxxer World\\\\boxxerworld-shopify-frontend\\\\customiser\\\\src\\\\components\\\\nav\\\\MaterialGroup\\\\MaterialGroup.tsx\",\n  _s = $RefreshSig$();\nimport { useGetMaterialsQuery } from '@graphql/generated/graphql';\nimport { graphQLClient } from '@graphql/graphql-client';\nimport cn from 'classnames';\nimport { useEffect } from 'react';\nimport styles from './MaterialGroup.module.scss';\nimport { createStore, Provider, useMaterialGroupStore } from './MaterialGroupState';\nimport { MaterialType } from './MaterialType';\nimport SelectedMaterialInfo from './SelectedMaterialInfo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MaterialGroupLoader = ({\n  className,\n  materialGroup,\n  materialType,\n  colourGroup,\n  onMaterialSelected,\n  hideColorGroups\n}) => {\n  _s();\n  var _materialGroup$attrib;\n  const colourGroups = useMaterialGroupStore(state => state.colourGroups);\n  const selectedColourGroup = useMaterialGroupStore(state => state.selectedColourGroup);\n  const setMaterials = useMaterialGroupStore(state => state.setMaterials);\n  const setColourGroup = useMaterialGroupStore(state => state.setColourGroup);\n  const rootClassName = cn(styles.root, className);\n  const typeIds = materialGroup !== null && materialGroup !== void 0 && (_materialGroup$attrib = materialGroup.attributes) !== null && _materialGroup$attrib !== void 0 && _materialGroup$attrib.materialTypes ? materialGroup.attributes.materialTypes.data.map(t => t.id) : [];\n  const {\n    data: materials\n  } = useGetMaterialsQuery(graphQLClient, {\n    filters: {\n      type: {\n        id: {\n          in: typeIds\n        }\n      }\n    },\n    pagination: {\n      pageSize: 200\n    }\n  }, {\n    select: data => {\n      var _data$materials;\n      return (_data$materials = data.materials) === null || _data$materials === void 0 ? void 0 : _data$materials.data;\n    }\n  });\n  useEffect(() => {\n    if (materials !== null && materials !== void 0 && materials.length) {\n      // // TODO - remove: temporary for testing rainbow\n      // if (!materials.find((a) => a.id === '999')) {\n      //   // eslint-disable-next-line\n      //   // @ts-ignore\n      //   materials.push(testMaterial);\n      // }\n      // console.log('materials', materials);\n      setMaterials(materials, materialType, colourGroup);\n    }\n  }, [materials]);\n  if (!materialGroup) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: rootClassName,\n    children: [!hideColorGroups && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Colour\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.colourGroups,\n        children: colourGroups.map(group => {\n          var _group$attributes$col, _group$attributes, _group$attributes$col2, _group$attributes2;\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setColourGroup(group),\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              viewBox: \"0 0 42 42\",\n              strokeWidth: 4,\n              stroke: (selectedColourGroup === null || selectedColourGroup === void 0 ? void 0 : selectedColourGroup.id) === group.id ? '#000' : (_group$attributes$col = (_group$attributes = group.attributes) === null || _group$attributes === void 0 ? void 0 : _group$attributes.colour) !== null && _group$attributes$col !== void 0 ? _group$attributes$col : '#000',\n              fill: (_group$attributes$col2 = (_group$attributes2 = group.attributes) === null || _group$attributes2 === void 0 ? void 0 : _group$attributes2.colour) !== null && _group$attributes$col2 !== void 0 ? _group$attributes$col2 : '#000',\n              children: /*#__PURE__*/_jsxDEV(\"rect\", {\n                width: \"100%\",\n                height: \"100%\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this)\n          }, group.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(MaterialType, {\n      hideColorGroups: hideColorGroups,\n      onMaterialSelected: onMaterialSelected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SelectedMaterialInfo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(MaterialGroupLoader, \"MpY+zmjFsAgj6A3VeW23mD4OoSw=\", false, function () {\n  return [useMaterialGroupStore, useMaterialGroupStore, useMaterialGroupStore, useMaterialGroupStore, useGetMaterialsQuery];\n});\n_c = MaterialGroupLoader;\nconst MaterialGroup = props => {\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    createStore: createStore,\n    children: /*#__PURE__*/_jsxDEV(MaterialGroupLoader, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_c2 = MaterialGroup;\nexport default MaterialGroup;\nvar _c, _c2;\n$RefreshReg$(_c, \"MaterialGroupLoader\");\n$RefreshReg$(_c2, \"MaterialGroup\");","map":{"version":3,"names":["useGetMaterialsQuery","graphQLClient","cn","useEffect","styles","createStore","Provider","useMaterialGroupStore","MaterialType","SelectedMaterialInfo","jsxDEV","_jsxDEV","Fragment","_Fragment","MaterialGroupLoader","className","materialGroup","materialType","colourGroup","onMaterialSelected","hideColorGroups","_s","_materialGroup$attrib","colourGroups","state","selectedColourGroup","setMaterials","setColourGroup","rootClassName","root","typeIds","attributes","materialTypes","data","map","t","id","materials","filters","type","in","pagination","pageSize","select","_data$materials","length","children","fileName","_jsxFileName","lineNumber","columnNumber","group","_group$attributes$col","_group$attributes","_group$attributes$col2","_group$attributes2","onClick","xmlns","viewBox","strokeWidth","stroke","colour","fill","width","height","_c","MaterialGroup","props","_c2","$RefreshReg$"],"sources":["C:/Users/Reian/Desktop/Work/Freelance/Boxxer World/boxxerworld-shopify-frontend/customiser/src/components/nav/MaterialGroup/MaterialGroup.tsx"],"sourcesContent":["import {\r\n  InputMaybe,\r\n  MaterialColourGroupEntity,\r\n  MaterialEntity,\r\n  MaterialFragment,\r\n  MaterialGroupEntity,\r\n  MaterialTypeEntity,\r\n  Maybe,\r\n  useGetMaterialsQuery,\r\n} from '@graphql/generated/graphql';\r\nimport { graphQLClient } from '@graphql/graphql-client';\r\n\r\nimport cn from 'classnames';\r\nimport { useEffect } from 'react';\r\n\r\nimport styles from './MaterialGroup.module.scss';\r\nimport { createStore, Provider, useMaterialGroupStore } from './MaterialGroupState';\r\nimport { MaterialType } from './MaterialType';\r\nimport SelectedMaterialInfo from './SelectedMaterialInfo';\r\nimport { Falsey } from 'lodash';\r\n\r\nexport interface MaterialGroupProps {\r\n  className?: string;\r\n  materialGroup?: Maybe<MaterialGroupEntity>;\r\n  materialType?: Maybe<MaterialTypeEntity>;\r\n  colourGroup?: Maybe<MaterialColourGroupEntity>;\r\n  onMaterialSelected: (material: MaterialFragment) => void;\r\n  hideColorGroups?: boolean;\r\n  selectedMaterialId?: Falsey | string;\r\n}\r\n\r\nconst MaterialGroupLoader = ({\r\n  className,\r\n  materialGroup,\r\n  materialType,\r\n  colourGroup,\r\n  onMaterialSelected,\r\n  hideColorGroups,\r\n}: MaterialGroupProps) => {\r\n  const colourGroups = useMaterialGroupStore((state) => state.colourGroups);\r\n  const selectedColourGroup = useMaterialGroupStore((state) => state.selectedColourGroup);\r\n  const setMaterials = useMaterialGroupStore((state) => state.setMaterials);\r\n  const setColourGroup = useMaterialGroupStore((state) => state.setColourGroup);\r\n  const rootClassName = cn(styles.root, className);\r\n\r\n  const typeIds = materialGroup?.attributes?.materialTypes\r\n    ? (materialGroup.attributes.materialTypes.data.map((t) => t.id) as InputMaybe<string>[])\r\n    : [];\r\n\r\n  const { data: materials } = useGetMaterialsQuery(\r\n    graphQLClient,\r\n    { filters: { type: { id: { in: typeIds } } }, pagination: { pageSize: 200 } },\r\n    {\r\n      select: (data) => data.materials?.data as MaterialEntity[],\r\n    },\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (materials?.length) {\r\n      // // TODO - remove: temporary for testing rainbow\r\n      // if (!materials.find((a) => a.id === '999')) {\r\n      //   // eslint-disable-next-line\r\n      //   // @ts-ignore\r\n      //   materials.push(testMaterial);\r\n      // }\r\n      // console.log('materials', materials);\r\n      setMaterials(materials, materialType, colourGroup);\r\n    }\r\n  }, [materials]);\r\n\r\n  if (!materialGroup) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className={rootClassName}>\r\n      {!hideColorGroups && (\r\n        <>\r\n          <h5>Colour</h5>\r\n          <div className={styles.colourGroups}>\r\n            {colourGroups.map((group) => (\r\n              <button key={group.id} onClick={() => setColourGroup(group)}>\r\n                <svg\r\n                  xmlns='http://www.w3.org/2000/svg'\r\n                  viewBox='0 0 42 42'\r\n                  strokeWidth={4}\r\n                  stroke={\r\n                    selectedColourGroup?.id === group.id\r\n                      ? '#000'\r\n                      : group.attributes?.colour ?? '#000'\r\n                  }\r\n                  fill={group.attributes?.colour ?? '#000'}\r\n                >\r\n                  <rect width='100%' height='100%' />\r\n                </svg>\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n      <MaterialType hideColorGroups={hideColorGroups} onMaterialSelected={onMaterialSelected} />\r\n      <SelectedMaterialInfo />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MaterialGroup = (props: MaterialGroupProps) => {\r\n  return (\r\n    <Provider createStore={createStore}>\r\n      <MaterialGroupLoader {...props} />\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default MaterialGroup;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}