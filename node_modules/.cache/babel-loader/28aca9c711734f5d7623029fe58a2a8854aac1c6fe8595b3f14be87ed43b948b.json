{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Reian\\\\Desktop\\\\Work\\\\Freelance\\\\Boxxer World\\\\boxxerworld-shopify-frontend\\\\customiser\\\\src\\\\components\\\\three\\\\CustomiserMesh\\\\CustomiserMesh.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\n\nimport { useTexture } from '@react-three/drei';\nimport { useCustomiserStore } from '@store/customiser';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { Box3, DoubleSide, RepeatWrapping, Vector3 } from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ClonedTextureMesh = ({\n  node,\n  texture,\n  tasselsTexture,\n  tassels,\n  hex\n}) => {\n  _s();\n  const [textures, setTextures] = useState();\n  const materialRef = useRef(null);\n  const meshRef = useRef(null);\n  const [isPointerDown, setIsPointerDown] = useState(false);\n  const [isPointerMoved, setIsPointerMoved] = useState(false);\n  const clonedTextures = useMemo(() => Object.fromEntries(Object.entries(texture).map(([k, v]) => [k, v.clone()])), [texture]);\n  const {\n    navItems,\n    customProduct,\n    setSelectedNav,\n    texts,\n    updateText\n  } = useCustomiserStore();\n  const editText = useMemo(() => texts.find(t => t.edit), [texts]);\n  const part = useMemo(() => {\n    var _customProduct$attrib, _customProduct$attrib2;\n    return customProduct === null || customProduct === void 0 ? void 0 : (_customProduct$attrib = customProduct.attributes) === null || _customProduct$attrib === void 0 ? void 0 : (_customProduct$attrib2 = _customProduct$attrib.parts) === null || _customProduct$attrib2 === void 0 ? void 0 : _customProduct$attrib2.find(p => {\n      var _p$modelParts;\n      return p === null || p === void 0 ? void 0 : (_p$modelParts = p.modelParts) === null || _p$modelParts === void 0 ? void 0 : _p$modelParts.data.find(mp => {\n        var _mp$attributes, _mp$attributes2;\n        return ((_mp$attributes = mp.attributes) === null || _mp$attributes === void 0 ? void 0 : _mp$attributes.nodeId) === node.userData.name || ((_mp$attributes2 = mp.attributes) === null || _mp$attributes2 === void 0 ? void 0 : _mp$attributes2.nodeId) === node.name;\n      });\n    });\n  }, [customProduct, node]);\n  const navItem = useMemo(() => navItems.find(navItem => navItem.id === (part === null || part === void 0 ? void 0 : part.id)), [part, navItems]);\n  console.log('part ccccccc', part);\n  console.log('navItem ccccccc', navItem);\n  const navItemText = useMemo(() => navItems.find(navItem => navItem.type === 'names'), [navItems]);\n  useEffect(() => {\n    if (clonedTextures && meshRef.current) {\n      let updatedTextures = {};\n      for (const [key, clone] of Object.entries(clonedTextures)) {\n        clone.wrapS = clone.wrapT = RepeatWrapping;\n        const boundingBox = new Box3().setFromObject(meshRef.current);\n        const boxSize = new Vector3();\n        const dimensions = boundingBox.getSize(boxSize);\n        const area = dimensions.x * dimensions.y;\n        clone.repeat.set(0.0005 * area, 0.0005 * area);\n        updatedTextures = {\n          ...updatedTextures,\n          [key]: clone\n        };\n      }\n      console.log('part', part && part.name);\n      console.log('updatedTextures', updatedTextures);\n      // updatedTextures = {};\n      setTextures(updatedTextures);\n    }\n  }, [clonedTextures]);\n  if (materialRef.current) {\n    materialRef.current.needsUpdate = true;\n  }\n  console.log('aaaaaaa textures', textures);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n      name: node.name,\n      geometry: node.geometry,\n      ref: meshRef,\n      userData: {\n        name: node.userData.name\n      },\n      onPointerDown: e => {\n        setIsPointerDown(true);\n      },\n      onPointerMove: e => {\n        if (isPointerDown) {\n          setIsPointerMoved(true);\n        }\n      },\n      onClick: e => {\n        var _e$intersections$find;\n        setIsPointerDown(false);\n        setIsPointerMoved(false);\n        if (!isPointerDown || isPointerMoved) {\n          return;\n        }\n        if (editText !== null && editText !== void 0 && editText.key) {\n          return;\n        }\n        const intersectedText = (_e$intersections$find = e.intersections.find(intersection => intersection.object.userData.text)) === null || _e$intersections$find === void 0 ? void 0 : _e$intersections$find.object.userData.text;\n\n        /**\r\n         * If text is clicked, go to NavItem to text\r\n         */\n        if (navItemText && navItemText.index !== undefined && intersectedText && intersectedText.key) {\n          setSelectedNav(navItemText.index);\n          updateText(intersectedText.key, {\n            edit: true\n          });\n          return;\n        }\n\n        /**\r\n         * If mesh part is clicked, go to NavItem of part\r\n         */\n        if (navItem && navItem.index !== undefined && e.intersections[0].object.name === node.name) {\n          e.stopPropagation();\n          setSelectedNav(navItem.index);\n        }\n      },\n      children: tassels ? /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n        ref: materialRef,\n        ...tasselsTexture,\n        transparent: true,\n        bumpScale: 0.15,\n        color: hex,\n        side: DoubleSide,\n        metalness: -0.5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n        side: DoubleSide,\n        ...textures,\n        // color={'yellow'}\n        displacementScale: textures !== null && textures !== void 0 && textures.displacementMap ? 0 : undefined,\n        ref: materialRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(ClonedTextureMesh, \"eO6SRBHk/Zph0G2dRubeK7kwqnk=\", false, function () {\n  return [useCustomiserStore];\n});\n_c = ClonedTextureMesh;\nconst CustomiserMesh = ({\n  node,\n  nodeId\n}) => {\n  _s2();\n  // console.log('[CustomiserMesh] - node', node);\n  // console.log('[CustomiserMesh] - nodeId', nodeId);\n  // const texture = useCustomiserStore(useCallback((state) => state.texture(nodeId), [nodeId]));\n  const texture = {\n    id: '113',\n    materials: {\n      aoMap: '#000000',\n      map: '#000000',\n      displacementMap: '#000000',\n      metalnessMap: '#000000',\n      normalMap: '#000000',\n      roughnessMap: '#000000'\n    },\n    hex: '#000000'\n  };\n  console.log('[CustomiserMesh] - texture', texture);\n  const optional = useCustomiserStore(useCallback(state => state.optional(nodeId), [nodeId]));\n  const tassels = useCustomiserStore(useCallback(state => state.tassels(nodeId), [nodeId]));\n  const materialTexture = useTexture({\n    ...texture.materials\n  });\n  console.log('[CustomiserMesh] - materialTexture', materialTexture);\n  const tasselsTexture = useTexture({\n    alphaMap: 'https://boxxer-api-dev.nyc3.cdn.digitaloceanspaces.com/tassels/tassels-opacity.jpg',\n    bumpMap: 'https://boxxer-api-dev.nyc3.cdn.digitaloceanspaces.com/tassels/tassels-bump.jpg'\n  }, textures => {\n    const [bumpMap, alphaMap] = textures;\n    alphaMap.wrapS = alphaMap.wrapT = RepeatWrapping;\n    alphaMap.flipY = false;\n    alphaMap.repeat.set(1.5, 1);\n    alphaMap.needsUpdate = true;\n    bumpMap.wrapS = bumpMap.wrapT = RepeatWrapping;\n    bumpMap.flipY = false;\n    bumpMap.repeat.set(1.5, 1);\n    bumpMap.needsUpdate = true;\n  });\n  if (optional) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(ClonedTextureMesh, {\n    node: node,\n    texture: materialTexture,\n    tasselsTexture: tasselsTexture,\n    tassels: tassels,\n    hex: texture.hex\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n};\n_s2(CustomiserMesh, \"+OJxPUdGy1E/S2FeXE2ZFyTKwzQ=\", false, function () {\n  return [useCustomiserStore, useCustomiserStore, useTexture, useTexture];\n});\n_c2 = CustomiserMesh;\nexport default CustomiserMesh;\nvar _c, _c2;\n$RefreshReg$(_c, \"ClonedTextureMesh\");\n$RefreshReg$(_c2, \"CustomiserMesh\");","map":{"version":3,"names":["useTexture","useCustomiserStore","useCallback","useEffect","useMemo","useRef","useState","Box3","DoubleSide","RepeatWrapping","Vector3","jsxDEV","_jsxDEV","Fragment","_Fragment","ClonedTextureMesh","node","texture","tasselsTexture","tassels","hex","_s","textures","setTextures","materialRef","meshRef","isPointerDown","setIsPointerDown","isPointerMoved","setIsPointerMoved","clonedTextures","Object","fromEntries","entries","map","k","v","clone","navItems","customProduct","setSelectedNav","texts","updateText","editText","find","t","edit","part","_customProduct$attrib","_customProduct$attrib2","attributes","parts","p","_p$modelParts","modelParts","data","mp","_mp$attributes","_mp$attributes2","nodeId","userData","name","navItem","id","console","log","navItemText","type","current","updatedTextures","key","wrapS","wrapT","boundingBox","setFromObject","boxSize","dimensions","getSize","area","x","y","repeat","set","needsUpdate","children","geometry","ref","onPointerDown","e","onPointerMove","onClick","_e$intersections$find","intersectedText","intersections","intersection","object","text","index","undefined","stopPropagation","transparent","bumpScale","color","side","metalness","fileName","_jsxFileName","lineNumber","columnNumber","displacementScale","displacementMap","_c","CustomiserMesh","_s2","materials","aoMap","metalnessMap","normalMap","roughnessMap","optional","state","materialTexture","alphaMap","bumpMap","flipY","_c2","$RefreshReg$"],"sources":["C:/Users/Reian/Desktop/Work/Freelance/Boxxer World/boxxerworld-shopify-frontend/customiser/src/components/three/CustomiserMesh/CustomiserMesh.tsx"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n// @ts-nocheck\r\nimport { MaterialTextureMapModel } from '@models';\r\nimport { useTexture } from '@react-three/drei';\r\nimport { TextCustomiser, useCustomiserStore } from '@store/customiser';\r\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\r\nimport {\r\n  Box3,\r\n  DoubleSide,\r\n  Mesh,\r\n  MeshStandardMaterial,\r\n  RepeatWrapping,\r\n  Texture,\r\n  Vector3,\r\n} from 'three';\r\nexport interface ClonedTextureMeshProps {\r\n  node: Mesh;\r\n  texture: MaterialTextureMapModel;\r\n  tasselsTexture: MaterialTextureMapModel;\r\n  tassels: boolean;\r\n  hex: string;\r\n}\r\n\r\nconst ClonedTextureMesh = ({\r\n  node,\r\n  texture,\r\n  tasselsTexture,\r\n  tassels,\r\n  hex,\r\n}: ClonedTextureMeshProps) => {\r\n  const [textures, setTextures] = useState<MaterialTextureMapModel>();\r\n  const materialRef = useRef<MeshStandardMaterial>(null);\r\n  const meshRef = useRef<Mesh>(null);\r\n\r\n  const [isPointerDown, setIsPointerDown] = useState(false);\r\n  const [isPointerMoved, setIsPointerMoved] = useState(false);\r\n\r\n  const clonedTextures = useMemo(\r\n    () => Object.fromEntries(Object.entries(texture).map(([k, v]) => [k, v.clone()])),\r\n    [texture],\r\n  );\r\n\r\n  const { navItems, customProduct, setSelectedNav, texts, updateText } = useCustomiserStore();\r\n\r\n  const editText = useMemo(() => texts.find((t) => t.edit), [texts]);\r\n\r\n  const part = useMemo(\r\n    () =>\r\n      customProduct?.attributes?.parts?.find((p) =>\r\n        p?.modelParts?.data.find(\r\n          (mp) =>\r\n            mp.attributes?.nodeId === node.userData.name || mp.attributes?.nodeId === node.name,\r\n        ),\r\n      ),\r\n    [customProduct, node],\r\n  );\r\n  const navItem = useMemo(\r\n    () => navItems.find((navItem) => navItem.id === part?.id),\r\n    [part, navItems],\r\n  );\r\n\r\n  console.log('part ccccccc', part);\r\n  console.log('navItem ccccccc', navItem);\r\n\r\n  const navItemText = useMemo(\r\n    () => navItems.find((navItem) => navItem.type === 'names'),\r\n    [navItems],\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (clonedTextures && meshRef.current) {\r\n      let updatedTextures: MaterialTextureMapModel = {};\r\n      for (const [key, clone] of Object.entries(clonedTextures)) {\r\n        clone.wrapS = clone.wrapT = RepeatWrapping;\r\n        const boundingBox = new Box3().setFromObject(meshRef.current);\r\n        const boxSize = new Vector3();\r\n        const dimensions = boundingBox.getSize(boxSize);\r\n        const area = dimensions.x * dimensions.y;\r\n        clone.repeat.set(0.0005 * area, 0.0005 * area);\r\n        updatedTextures = { ...updatedTextures, [key]: clone };\r\n      }\r\n\r\n      console.log('part', part && part.name);\r\n      console.log('updatedTextures', updatedTextures);\r\n      // updatedTextures = {};\r\n      setTextures(updatedTextures);\r\n    }\r\n  }, [clonedTextures]);\r\n\r\n  if (materialRef.current) {\r\n    materialRef.current.needsUpdate = true;\r\n  }\r\n\r\n  console.log('aaaaaaa textures', textures);\r\n\r\n  return (\r\n    <>\r\n      <mesh\r\n        name={node.name}\r\n        geometry={node.geometry}\r\n        ref={meshRef}\r\n        userData={{\r\n          name: node.userData.name,\r\n        }}\r\n        onPointerDown={(e) => {\r\n          setIsPointerDown(true);\r\n        }}\r\n        onPointerMove={(e) => {\r\n          if (isPointerDown) {\r\n            setIsPointerMoved(true);\r\n          }\r\n        }}\r\n        onClick={(e) => {\r\n          setIsPointerDown(false);\r\n          setIsPointerMoved(false);\r\n\r\n          if (!isPointerDown || isPointerMoved) {\r\n            return;\r\n          }\r\n\r\n          if (editText?.key) {\r\n            return;\r\n          }\r\n\r\n          const intersectedText = e.intersections.find(\r\n            (intersection) => intersection.object.userData.text,\r\n          )?.object.userData.text as TextCustomiser | undefined;\r\n\r\n          /**\r\n           * If text is clicked, go to NavItem to text\r\n           */\r\n          if (\r\n            navItemText &&\r\n            navItemText.index !== undefined &&\r\n            intersectedText &&\r\n            intersectedText.key\r\n          ) {\r\n            setSelectedNav(navItemText.index);\r\n            updateText(intersectedText.key, { edit: true });\r\n\r\n            return;\r\n          }\r\n\r\n          /**\r\n           * If mesh part is clicked, go to NavItem of part\r\n           */\r\n          if (\r\n            navItem &&\r\n            navItem.index !== undefined &&\r\n            e.intersections[0].object.name === node.name\r\n          ) {\r\n            e.stopPropagation();\r\n\r\n            setSelectedNav(navItem.index);\r\n          }\r\n        }}\r\n      >\r\n        {tassels ? (\r\n          <meshStandardMaterial\r\n            ref={materialRef}\r\n            {...tasselsTexture}\r\n            transparent\r\n            bumpScale={0.15}\r\n            color={hex}\r\n            side={DoubleSide}\r\n            metalness={-0.5}\r\n          />\r\n        ) : (\r\n          <meshStandardMaterial\r\n            side={DoubleSide}\r\n            {...textures}\r\n            // color={'yellow'}\r\n            displacementScale={textures?.displacementMap ? 0 : undefined}\r\n            ref={materialRef}\r\n          />\r\n        )}\r\n      </mesh>\r\n    </>\r\n  );\r\n};\r\nexport interface CustomiserMeshProps {\r\n  node: Mesh;\r\n  nodeId: string;\r\n}\r\n\r\nconst CustomiserMesh = ({ node, nodeId }: CustomiserMeshProps) => {\r\n  // console.log('[CustomiserMesh] - node', node);\r\n  // console.log('[CustomiserMesh] - nodeId', nodeId);\r\n  // const texture = useCustomiserStore(useCallback((state) => state.texture(nodeId), [nodeId]));\r\n  const texture = {\r\n    id: '113',\r\n    materials: {\r\n      aoMap: '#000000',\r\n      map: '#000000',\r\n      displacementMap: '#000000',\r\n      metalnessMap: '#000000',\r\n      normalMap: '#000000',\r\n      roughnessMap: '#000000',\r\n    },\r\n    hex: '#000000',\r\n  };\r\n  console.log('[CustomiserMesh] - texture', texture);\r\n  const optional = useCustomiserStore(useCallback((state) => state.optional(nodeId), [nodeId]));\r\n  const tassels = useCustomiserStore(useCallback((state) => state.tassels(nodeId), [nodeId]));\r\n\r\n  const materialTexture = useTexture({ ...texture.materials });\r\n  console.log('[CustomiserMesh] - materialTexture', materialTexture);\r\n  const tasselsTexture = useTexture(\r\n    {\r\n      alphaMap:\r\n        'https://boxxer-api-dev.nyc3.cdn.digitaloceanspaces.com/tassels/tassels-opacity.jpg',\r\n      bumpMap: 'https://boxxer-api-dev.nyc3.cdn.digitaloceanspaces.com/tassels/tassels-bump.jpg',\r\n    },\r\n    (textures) => {\r\n      const [bumpMap, alphaMap] = textures as Texture[];\r\n      alphaMap.wrapS = alphaMap.wrapT = RepeatWrapping;\r\n      alphaMap.flipY = false;\r\n      alphaMap.repeat.set(1.5, 1);\r\n      alphaMap.needsUpdate = true;\r\n      bumpMap.wrapS = bumpMap.wrapT = RepeatWrapping;\r\n      bumpMap.flipY = false;\r\n      bumpMap.repeat.set(1.5, 1);\r\n      bumpMap.needsUpdate = true;\r\n    },\r\n  );\r\n\r\n  if (optional) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ClonedTextureMesh\r\n      node={node}\r\n      texture={materialTexture}\r\n      tasselsTexture={tasselsTexture}\r\n      tassels={tassels}\r\n      hex={texture.hex}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CustomiserMesh;\r\n"],"mappings":";;;AAAA;AACA;;AAEA,SAASA,UAAU,QAAQ,mBAAmB;AAC9C,SAAyBC,kBAAkB,QAAQ,mBAAmB;AACtE,SAASC,WAAW,EAAEC,SAAS,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACzE,SACEC,IAAI,EACJC,UAAU,EAGVC,cAAc,EAEdC,OAAO,QACF,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AASf,MAAMC,iBAAiB,GAAGA,CAAC;EACzBC,IAAI;EACJC,OAAO;EACPC,cAAc;EACdC,OAAO;EACPC;AACsB,CAAC,KAAK;EAAAC,EAAA;EAC5B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAA0B,CAAC;EACnE,MAAMkB,WAAW,GAAGnB,MAAM,CAAuB,IAAI,CAAC;EACtD,MAAMoB,OAAO,GAAGpB,MAAM,CAAO,IAAI,CAAC;EAElC,MAAM,CAACqB,aAAa,EAAEC,gBAAgB,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACsB,cAAc,EAAEC,iBAAiB,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EAE3D,MAAMwB,cAAc,GAAG1B,OAAO,CAC5B,MAAM2B,MAAM,CAACC,WAAW,CAACD,MAAM,CAACE,OAAO,CAAChB,OAAO,CAAC,CAACiB,GAAG,CAAC,CAAC,CAACC,CAAC,EAAEC,CAAC,CAAC,KAAK,CAACD,CAAC,EAAEC,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EACjF,CAACpB,OAAO,CACV,CAAC;EAED,MAAM;IAAEqB,QAAQ;IAAEC,aAAa;IAAEC,cAAc;IAAEC,KAAK;IAAEC;EAAW,CAAC,GAAGzC,kBAAkB,CAAC,CAAC;EAE3F,MAAM0C,QAAQ,GAAGvC,OAAO,CAAC,MAAMqC,KAAK,CAACG,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,CAAC,EAAE,CAACL,KAAK,CAAC,CAAC;EAElE,MAAMM,IAAI,GAAG3C,OAAO,CAClB;IAAA,IAAA4C,qBAAA,EAAAC,sBAAA;IAAA,OACEV,aAAa,aAAbA,aAAa,wBAAAS,qBAAA,GAAbT,aAAa,CAAEW,UAAU,cAAAF,qBAAA,wBAAAC,sBAAA,GAAzBD,qBAAA,CAA2BG,KAAK,cAAAF,sBAAA,uBAAhCA,sBAAA,CAAkCL,IAAI,CAAEQ,CAAC;MAAA,IAAAC,aAAA;MAAA,OACvCD,CAAC,aAADA,CAAC,wBAAAC,aAAA,GAADD,CAAC,CAAEE,UAAU,cAAAD,aAAA,uBAAbA,aAAA,CAAeE,IAAI,CAACX,IAAI,CACrBY,EAAE;QAAA,IAAAC,cAAA,EAAAC,eAAA;QAAA,OACD,EAAAD,cAAA,GAAAD,EAAE,CAACN,UAAU,cAAAO,cAAA,uBAAbA,cAAA,CAAeE,MAAM,MAAK3C,IAAI,CAAC4C,QAAQ,CAACC,IAAI,IAAI,EAAAH,eAAA,GAAAF,EAAE,CAACN,UAAU,cAAAQ,eAAA,uBAAbA,eAAA,CAAeC,MAAM,MAAK3C,IAAI,CAAC6C,IAAI;MAAA,CACvF,CAAC;IAAA,CACH,CAAC;EAAA,GACH,CAACtB,aAAa,EAAEvB,IAAI,CACtB,CAAC;EACD,MAAM8C,OAAO,GAAG1D,OAAO,CACrB,MAAMkC,QAAQ,CAACM,IAAI,CAAEkB,OAAO,IAAKA,OAAO,CAACC,EAAE,MAAKhB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEgB,EAAE,EAAC,EACzD,CAAChB,IAAI,EAAET,QAAQ,CACjB,CAAC;EAED0B,OAAO,CAACC,GAAG,CAAC,cAAc,EAAElB,IAAI,CAAC;EACjCiB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEH,OAAO,CAAC;EAEvC,MAAMI,WAAW,GAAG9D,OAAO,CACzB,MAAMkC,QAAQ,CAACM,IAAI,CAAEkB,OAAO,IAAKA,OAAO,CAACK,IAAI,KAAK,OAAO,CAAC,EAC1D,CAAC7B,QAAQ,CACX,CAAC;EAEDnC,SAAS,CAAC,MAAM;IACd,IAAI2B,cAAc,IAAIL,OAAO,CAAC2C,OAAO,EAAE;MACrC,IAAIC,eAAwC,GAAG,CAAC,CAAC;MACjD,KAAK,MAAM,CAACC,GAAG,EAAEjC,KAAK,CAAC,IAAIN,MAAM,CAACE,OAAO,CAACH,cAAc,CAAC,EAAE;QACzDO,KAAK,CAACkC,KAAK,GAAGlC,KAAK,CAACmC,KAAK,GAAG/D,cAAc;QAC1C,MAAMgE,WAAW,GAAG,IAAIlE,IAAI,CAAC,CAAC,CAACmE,aAAa,CAACjD,OAAO,CAAC2C,OAAO,CAAC;QAC7D,MAAMO,OAAO,GAAG,IAAIjE,OAAO,CAAC,CAAC;QAC7B,MAAMkE,UAAU,GAAGH,WAAW,CAACI,OAAO,CAACF,OAAO,CAAC;QAC/C,MAAMG,IAAI,GAAGF,UAAU,CAACG,CAAC,GAAGH,UAAU,CAACI,CAAC;QACxC3C,KAAK,CAAC4C,MAAM,CAACC,GAAG,CAAC,MAAM,GAAGJ,IAAI,EAAE,MAAM,GAAGA,IAAI,CAAC;QAC9CT,eAAe,GAAG;UAAE,GAAGA,eAAe;UAAE,CAACC,GAAG,GAAGjC;QAAM,CAAC;MACxD;MAEA2B,OAAO,CAACC,GAAG,CAAC,MAAM,EAAElB,IAAI,IAAIA,IAAI,CAACc,IAAI,CAAC;MACtCG,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEI,eAAe,CAAC;MAC/C;MACA9C,WAAW,CAAC8C,eAAe,CAAC;IAC9B;EACF,CAAC,EAAE,CAACvC,cAAc,CAAC,CAAC;EAEpB,IAAIN,WAAW,CAAC4C,OAAO,EAAE;IACvB5C,WAAW,CAAC4C,OAAO,CAACe,WAAW,GAAG,IAAI;EACxC;EAEAnB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE3C,QAAQ,CAAC;EAEzC,oBACEV,OAAA,CAAAE,SAAA;IAAAsE,QAAA,eACExE,OAAA;MACEiD,IAAI,EAAE7C,IAAI,CAAC6C,IAAK;MAChBwB,QAAQ,EAAErE,IAAI,CAACqE,QAAS;MACxBC,GAAG,EAAE7D,OAAQ;MACbmC,QAAQ,EAAE;QACRC,IAAI,EAAE7C,IAAI,CAAC4C,QAAQ,CAACC;MACtB,CAAE;MACF0B,aAAa,EAAGC,CAAC,IAAK;QACpB7D,gBAAgB,CAAC,IAAI,CAAC;MACxB,CAAE;MACF8D,aAAa,EAAGD,CAAC,IAAK;QACpB,IAAI9D,aAAa,EAAE;UACjBG,iBAAiB,CAAC,IAAI,CAAC;QACzB;MACF,CAAE;MACF6D,OAAO,EAAGF,CAAC,IAAK;QAAA,IAAAG,qBAAA;QACdhE,gBAAgB,CAAC,KAAK,CAAC;QACvBE,iBAAiB,CAAC,KAAK,CAAC;QAExB,IAAI,CAACH,aAAa,IAAIE,cAAc,EAAE;UACpC;QACF;QAEA,IAAIe,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAE2B,GAAG,EAAE;UACjB;QACF;QAEA,MAAMsB,eAAe,IAAAD,qBAAA,GAAGH,CAAC,CAACK,aAAa,CAACjD,IAAI,CACzCkD,YAAY,IAAKA,YAAY,CAACC,MAAM,CAACnC,QAAQ,CAACoC,IACjD,CAAC,cAAAL,qBAAA,uBAFuBA,qBAAA,CAErBI,MAAM,CAACnC,QAAQ,CAACoC,IAAkC;;QAErD;AACV;AACA;QACU,IACE9B,WAAW,IACXA,WAAW,CAAC+B,KAAK,KAAKC,SAAS,IAC/BN,eAAe,IACfA,eAAe,CAACtB,GAAG,EACnB;UACA9B,cAAc,CAAC0B,WAAW,CAAC+B,KAAK,CAAC;UACjCvD,UAAU,CAACkD,eAAe,CAACtB,GAAG,EAAE;YAAExB,IAAI,EAAE;UAAK,CAAC,CAAC;UAE/C;QACF;;QAEA;AACV;AACA;QACU,IACEgB,OAAO,IACPA,OAAO,CAACmC,KAAK,KAAKC,SAAS,IAC3BV,CAAC,CAACK,aAAa,CAAC,CAAC,CAAC,CAACE,MAAM,CAAClC,IAAI,KAAK7C,IAAI,CAAC6C,IAAI,EAC5C;UACA2B,CAAC,CAACW,eAAe,CAAC,CAAC;UAEnB3D,cAAc,CAACsB,OAAO,CAACmC,KAAK,CAAC;QAC/B;MACF,CAAE;MAAAb,QAAA,EAEDjE,OAAO,gBACNP,OAAA;QACE0E,GAAG,EAAE9D,WAAY;QAAA,GACbN,cAAc;QAClBkF,WAAW;QACXC,SAAS,EAAE,IAAK;QAChBC,KAAK,EAAElF,GAAI;QACXmF,IAAI,EAAE/F,UAAW;QACjBgG,SAAS,EAAE,CAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjB,CAAC,gBAEFhG,OAAA;QACE2F,IAAI,EAAE/F,UAAW;QAAA,GACbc,QAAQ;QACZ;QACAuF,iBAAiB,EAAEvF,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEwF,eAAe,GAAG,CAAC,GAAGZ,SAAU;QAC7DZ,GAAG,EAAE9D;MAAY;QAAAiF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClB;IACF;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG;EAAC,gBACP,CAAC;AAEP,CAAC;AAACvF,EAAA,CA5JIN,iBAAiB;EAAA,QAmBkDd,kBAAkB;AAAA;AAAA8G,EAAA,GAnBrFhG,iBAAiB;AAkKvB,MAAMiG,cAAc,GAAGA,CAAC;EAAEhG,IAAI;EAAE2C;AAA4B,CAAC,KAAK;EAAAsD,GAAA;EAChE;EACA;EACA;EACA,MAAMhG,OAAO,GAAG;IACd8C,EAAE,EAAE,KAAK;IACTmD,SAAS,EAAE;MACTC,KAAK,EAAE,SAAS;MAChBjF,GAAG,EAAE,SAAS;MACd4E,eAAe,EAAE,SAAS;MAC1BM,YAAY,EAAE,SAAS;MACvBC,SAAS,EAAE,SAAS;MACpBC,YAAY,EAAE;IAChB,CAAC;IACDlG,GAAG,EAAE;EACP,CAAC;EACD4C,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEhD,OAAO,CAAC;EAClD,MAAMsG,QAAQ,GAAGtH,kBAAkB,CAACC,WAAW,CAAEsH,KAAK,IAAKA,KAAK,CAACD,QAAQ,CAAC5D,MAAM,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC,CAAC;EAC7F,MAAMxC,OAAO,GAAGlB,kBAAkB,CAACC,WAAW,CAAEsH,KAAK,IAAKA,KAAK,CAACrG,OAAO,CAACwC,MAAM,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC,CAAC;EAE3F,MAAM8D,eAAe,GAAGzH,UAAU,CAAC;IAAE,GAAGiB,OAAO,CAACiG;EAAU,CAAC,CAAC;EAC5DlD,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEwD,eAAe,CAAC;EAClE,MAAMvG,cAAc,GAAGlB,UAAU,CAC/B;IACE0H,QAAQ,EACN,oFAAoF;IACtFC,OAAO,EAAE;EACX,CAAC,EACArG,QAAQ,IAAK;IACZ,MAAM,CAACqG,OAAO,EAAED,QAAQ,CAAC,GAAGpG,QAAqB;IACjDoG,QAAQ,CAACnD,KAAK,GAAGmD,QAAQ,CAAClD,KAAK,GAAG/D,cAAc;IAChDiH,QAAQ,CAACE,KAAK,GAAG,KAAK;IACtBF,QAAQ,CAACzC,MAAM,CAACC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;IAC3BwC,QAAQ,CAACvC,WAAW,GAAG,IAAI;IAC3BwC,OAAO,CAACpD,KAAK,GAAGoD,OAAO,CAACnD,KAAK,GAAG/D,cAAc;IAC9CkH,OAAO,CAACC,KAAK,GAAG,KAAK;IACrBD,OAAO,CAAC1C,MAAM,CAACC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;IAC1ByC,OAAO,CAACxC,WAAW,GAAG,IAAI;EAC5B,CACF,CAAC;EAED,IAAIoC,QAAQ,EAAE;IACZ,OAAO,IAAI;EACb;EAEA,oBACE3G,OAAA,CAACG,iBAAiB;IAChBC,IAAI,EAAEA,IAAK;IACXC,OAAO,EAAEwG,eAAgB;IACzBvG,cAAc,EAAEA,cAAe;IAC/BC,OAAO,EAAEA,OAAQ;IACjBC,GAAG,EAAEH,OAAO,CAACG;EAAI;IAAAqF,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClB,CAAC;AAEN,CAAC;AAACK,GAAA,CAtDID,cAAc;EAAA,QAiBD/G,kBAAkB,EACnBA,kBAAkB,EAEVD,UAAU,EAEXA,UAAU;AAAA;AAAA6H,GAAA,GAtB7Bb,cAAc;AAwDpB,eAAeA,cAAc;AAAC,IAAAD,EAAA,EAAAc,GAAA;AAAAC,YAAA,CAAAf,EAAA;AAAAe,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}