{"ast":null,"code":"//* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport produce from 'immer';\nimport { v4 as uuidv4 } from 'uuid';\nimport { create } from 'zustand';\nimport { devtools, persist } from 'zustand/middleware';\nimport { UNIT } from './constants';\nconst defaultMaterials = {\n  roughnessMap: 'https://boxxer-api-dev.nyc3.cdn.digitaloceanspaces.com/satin_white_Roughness_31e017223f.jpg',\n  normalMap: 'https://boxxer-api-dev.nyc3.cdn.digitaloceanspaces.com/satin_white_Normal_940f07492a.jpg',\n  metalnessMap: 'https://boxxer-api-dev.nyc3.cdn.digitaloceanspaces.com/satin_white_Metallic_342d2f7f8a.jpg',\n  displacementMap: 'https://boxxer-api-dev.nyc3.cdn.digitaloceanspaces.com/satin_white_Height_1fcbf95d0c.jpg',\n  map: 'https://boxxer-api-dev.nyc3.cdn.digitaloceanspaces.com/satin_white_Base_Color_831f136312.jpg',\n  aoMap: 'https://boxxer-api-dev.nyc3.cdn.digitaloceanspaces.com/satin_white_Ambient_Occlusion_426692f37f.jpg'\n};\nconst initialState = {\n  selectedModels: [],\n  savedModels: [],\n  selectedPart: null,\n  navItems: [],\n  selectedNav: null,\n  parts: [],\n  savedParts: [],\n  flags: [],\n  graphics: [],\n  texts: [],\n  variations: [],\n  sizing: {\n    height: {\n      unit: UNIT.HEIGHT.CM\n    },\n    weight: {\n      unit: UNIT.WEIGHT.KG\n    }\n  },\n  isMinimizedCustomiserNav: false,\n  remountTrigger: 0\n};\nconst createCustomiser = (set, get) => ({\n  ...initialState,\n  designComplete: () => {\n    var _get$sizing;\n    const navItems = get().navItems;\n    let isComplete = true;\n    const sizing = navItems.find(i => i.type === 'size');\n    if (sizing && !((_get$sizing = get().sizing) !== null && _get$sizing !== void 0 && _get$sizing.variation)) return false;\n    const requiredParts = navItems.filter(i => i.type === 'part' && i.required);\n    for (const part of requiredParts) {\n      if (!get().savedParts.find(p => p.part.id === part.id)) {\n        isComplete = false;\n        break;\n      }\n    }\n    return isComplete;\n  },\n  total: () => {\n    var _get$sizing2;\n    let total = 0;\n    const variation = (_get$sizing2 = get().sizing) === null || _get$sizing2 === void 0 ? void 0 : _get$sizing2.variation;\n    if (variation !== null && variation !== void 0 && variation.price.amount) {\n      total = total + Number(variation.price.amount);\n    }\n    get().parts.forEach(part => {\n      var _part$part$areaSize$d, _part$part$areaSize, _part$part$areaSize$d2, _part$part$areaSize$d3, _part$material$attrib, _part$material$attrib2, _part$material$attrib3, _part$material$attrib4, _part$material$attrib5;\n      const priceAdjust = (_part$part$areaSize$d = (_part$part$areaSize = part.part.areaSize) === null || _part$part$areaSize === void 0 ? void 0 : (_part$part$areaSize$d2 = _part$part$areaSize.data) === null || _part$part$areaSize$d2 === void 0 ? void 0 : (_part$part$areaSize$d3 = _part$part$areaSize$d2.attributes) === null || _part$part$areaSize$d3 === void 0 ? void 0 : _part$part$areaSize$d3.priceAdjust) !== null && _part$part$areaSize$d !== void 0 ? _part$part$areaSize$d : 1;\n      const price = (_part$material$attrib = (_part$material$attrib2 = part.material.attributes) === null || _part$material$attrib2 === void 0 ? void 0 : (_part$material$attrib3 = _part$material$attrib2.price) === null || _part$material$attrib3 === void 0 ? void 0 : (_part$material$attrib4 = _part$material$attrib3.data) === null || _part$material$attrib4 === void 0 ? void 0 : (_part$material$attrib5 = _part$material$attrib4.attributes) === null || _part$material$attrib5 === void 0 ? void 0 : _part$material$attrib5.price) !== null && _part$material$attrib !== void 0 ? _part$material$attrib : 0;\n      const sum = priceAdjust * price;\n      total = total + sum;\n    });\n    get().texts.forEach(text => {\n      if (text.totalPrice) {\n        total = total + text.totalPrice;\n      }\n    });\n    get().flags.forEach(flag => {\n      var _flag$basePrice;\n      if ((_flag$basePrice = flag.basePrice) !== null && _flag$basePrice !== void 0 && _flag$basePrice.price) {\n        total = total + flag.basePrice.price;\n      }\n    });\n    return total.toFixed(2);\n  },\n  setCustomProduct: (customProduct, shopifyProduct) => {\n    var _shopifyProduct$produ, _customProduct$attrib;\n    let dataToSet = {\n      customProduct,\n      variations: (_shopifyProduct$produ = shopifyProduct.product) === null || _shopifyProduct$produ === void 0 ? void 0 : _shopifyProduct$produ.variants.nodes\n    };\n    if (!get().selectedModels.length && (_customProduct$attrib = customProduct.attributes) !== null && _customProduct$attrib !== void 0 && _customProduct$attrib.options) {\n      var _customProduct$attrib2, _customProduct$attrib3;\n      const models = [];\n      customProduct.attributes.options.forEach(option => {\n        var _option$models, _option$models$, _option$models$$model;\n        if (option !== null && option !== void 0 && (_option$models = option.models) !== null && _option$models !== void 0 && _option$models.length && option !== null && option !== void 0 && (_option$models$ = option.models[0]) !== null && _option$models$ !== void 0 && (_option$models$$model = _option$models$.model) !== null && _option$models$$model !== void 0 && _option$models$$model.data) {\n          var _option$models$2, _option$models$2$mode;\n          models.push({\n            optionId: option.id,\n            model: option === null || option === void 0 ? void 0 : (_option$models$2 = option.models[0]) === null || _option$models$2 === void 0 ? void 0 : (_option$models$2$mode = _option$models$2.model) === null || _option$models$2$mode === void 0 ? void 0 : _option$models$2$mode.data\n          });\n        }\n      });\n      const navFitting = {\n        name: 'Fitting',\n        type: 'fitting',\n        required: true,\n        hasActions: true\n      };\n      const navParts = (_customProduct$attrib2 = (_customProduct$attrib3 = customProduct.attributes.parts) === null || _customProduct$attrib3 === void 0 ? void 0 : _customProduct$attrib3.map(o => {\n        var _o$id, _o$name;\n        return {\n          id: (_o$id = o === null || o === void 0 ? void 0 : o.id) !== null && _o$id !== void 0 ? _o$id : '',\n          name: (_o$name = o === null || o === void 0 ? void 0 : o.name) !== null && _o$name !== void 0 ? _o$name : '',\n          type: 'part',\n          required: !!(o !== null && o !== void 0 && o.optional),\n          hasActions: true\n        };\n      })) !== null && _customProduct$attrib2 !== void 0 ? _customProduct$attrib2 : [];\n      const navSize = {\n        name: 'Size',\n        type: 'size',\n        required: true,\n        hasActions: true\n      };\n      const navFlags = {\n        name: 'Flags',\n        type: 'flags',\n        hasActions: true\n      };\n      const navImages = {\n        name: 'Images',\n        type: 'images',\n        hasActions: true\n      };\n      const navNames = {\n        name: 'Text',\n        type: 'names',\n        hasActions: true\n      };\n      const navItems = [navFitting, ...navParts, navNames, navFlags, navImages, navSize].map((i, index) => {\n        i.index = index;\n        return i;\n      });\n      dataToSet = {\n        ...dataToSet,\n        selectedModels: models,\n        savedModels: models,\n        navItems: navItems,\n        selectedNav: navItems[0]\n      };\n    }\n    set(dataToSet);\n  },\n  setCanvasSize: (width, height) => {\n    set(produce(state => {\n      state.canvas = {\n        width,\n        height\n      };\n    }));\n  },\n  setSizing: (height, weight, variation) => {\n    set(produce(state => {\n      if (height) {\n        state.sizing = {\n          ...state.sizing,\n          height\n        };\n      }\n      if (weight) {\n        state.sizing = {\n          ...state.sizing,\n          weight\n        };\n      }\n      if (variation) {\n        state.sizing = {\n          ...state.sizing,\n          variation,\n          size: variation.title\n        };\n      }\n    }));\n  },\n  setSelectedModel: (id, model) => {\n    set(produce(state => {\n      const selectedModels = get().selectedModels.filter(m => m.optionId !== id);\n      state.selectedModels = [...selectedModels, {\n        optionId: id,\n        model\n      }];\n      const savedModels = get().savedModels.filter(m => m.optionId !== id);\n      state.savedModels = [...savedModels, {\n        optionId: id,\n        model\n      }];\n      state.remountTrigger = state.remountTrigger + 1;\n    }));\n  },\n  setPart: (part, material) => {\n    set(produce(state => {\n      const findPart = state.parts.find(p => p.part.id === part.id);\n      if (findPart) {\n        findPart.material = material;\n      } else {\n        state.parts.push({\n          part,\n          material\n        });\n      }\n    }));\n  },\n  removePart: part => {\n    set(produce(state => {\n      state.parts = state.parts.filter(p => p.part.id !== part.id);\n      state.savedParts = state.savedParts.filter(p => p.part.id !== part.id);\n    }));\n  },\n  setSelectedPart: data => set({\n    selectedPart: data\n  }),\n  setSelectedNav: (index, save) => set(produce(state => {\n    const navItem = state.navItems.find(n => n.index === index);\n    if (navItem) {\n      state.selectedNav = navItem;\n      if (navItem.type === 'part') {\n        var _state$customProduct, _state$customProduct$, _state$customProduct$2;\n        const part = (_state$customProduct = state.customProduct) === null || _state$customProduct === void 0 ? void 0 : (_state$customProduct$ = _state$customProduct.attributes) === null || _state$customProduct$ === void 0 ? void 0 : (_state$customProduct$2 = _state$customProduct$.parts) === null || _state$customProduct$2 === void 0 ? void 0 : _state$customProduct$2.find(o => (o === null || o === void 0 ? void 0 : o.id) === navItem.id);\n        if (part) {\n          state.selectedPart = part;\n        }\n      } else {\n        state.selectedPart = null;\n      }\n    }\n    state.savedParts = state.parts;\n    state.savedModels = state.selectedModels;\n    state.flags = state.flags.map(f => {\n      f.decalFreeze = false;\n      f.edit = false;\n      return f;\n    });\n    state.texts = state.texts.map(f => {\n      f.decalFreeze = false;\n      f.edit = false;\n      return f;\n    });\n    state.graphics = state.graphics.map(f => {\n      f.decalFreeze = false;\n      f.edit = false;\n      return f;\n    });\n  })),\n  resetNav: () => set({\n    selectedPart: null,\n    selectedNav: null\n  }),\n  cancelPartChange: () => set(produce(state => {\n    state.parts = state.savedParts;\n    state.selectedModels = state.savedModels;\n    state.selectedPart = null;\n    state.selectedNav = null;\n  })),\n  texture: nodeId => {\n    const parts = get().parts;\n    let materials = {};\n    let hex = '';\n    let id;\n    for (const p of parts) {\n      var _p$part$modelParts, _p$material, _p$material$attribute;\n      const test = (_p$part$modelParts = p.part.modelParts) === null || _p$part$modelParts === void 0 ? void 0 : _p$part$modelParts.data.map(mp => {\n        var _mp$attributes;\n        return mp === null || mp === void 0 ? void 0 : (_mp$attributes = mp.attributes) === null || _mp$attributes === void 0 ? void 0 : _mp$attributes.nodeId;\n      }).indexOf(nodeId);\n      if (test != -1 && p !== null && p !== void 0 && (_p$material = p.material) !== null && _p$material !== void 0 && (_p$material$attribute = _p$material.attributes) !== null && _p$material$attribute !== void 0 && _p$material$attribute.images) {\n        var _p$material$attribute2, _p$material$attribute3;\n        hex = (_p$material$attribute2 = p.material.attributes.hex) !== null && _p$material$attribute2 !== void 0 ? _p$material$attribute2 : '';\n        id = p.material.id;\n        (_p$material$attribute3 = p.material.attributes.images) === null || _p$material$attribute3 === void 0 ? void 0 : _p$material$attribute3.forEach(image => {\n          var _image$image, _image$image$data, _image$image$data$att;\n          materials = {\n            ...materials,\n            [image === null || image === void 0 ? void 0 : image.mapType]: image === null || image === void 0 ? void 0 : (_image$image = image.image) === null || _image$image === void 0 ? void 0 : (_image$image$data = _image$image.data) === null || _image$image$data === void 0 ? void 0 : (_image$image$data$att = _image$image$data.attributes) === null || _image$image$data$att === void 0 ? void 0 : _image$image$data$att.url\n          };\n        });\n        break;\n      }\n    }\n    return {\n      id,\n      materials: {\n        // default values\n        // Possible improvement would be to get these values from the Material Group Store if that's possible\n        ...defaultMaterials,\n        // custom values\n        ...materials\n      },\n      hex\n    };\n  },\n  optional: nodeId => {\n    var _customProduct$attrib4, _customProduct$attrib5;\n    let isOptional = false;\n    const parts = get().parts;\n    const customProduct = get().customProduct;\n    if (customProduct !== null && customProduct !== void 0 && (_customProduct$attrib4 = customProduct.attributes) !== null && _customProduct$attrib4 !== void 0 && (_customProduct$attrib5 = _customProduct$attrib4.parts) !== null && _customProduct$attrib5 !== void 0 && _customProduct$attrib5.length) {\n      const optionalParts = customProduct.attributes.parts.filter(p => p === null || p === void 0 ? void 0 : p.optional);\n      for (const part of optionalParts) {\n        var _part$modelParts;\n        const test = part === null || part === void 0 ? void 0 : (_part$modelParts = part.modelParts) === null || _part$modelParts === void 0 ? void 0 : _part$modelParts.data.map(mp => {\n          var _mp$attributes2;\n          return mp === null || mp === void 0 ? void 0 : (_mp$attributes2 = mp.attributes) === null || _mp$attributes2 === void 0 ? void 0 : _mp$attributes2.nodeId;\n        }).indexOf(nodeId);\n        if (test != -1) {\n          isOptional = true;\n          break;\n        }\n      }\n    }\n    for (const p of parts) {\n      var _p$part$modelParts2;\n      const test = (_p$part$modelParts2 = p.part.modelParts) === null || _p$part$modelParts2 === void 0 ? void 0 : _p$part$modelParts2.data.map(mp => {\n        var _mp$attributes3;\n        return mp === null || mp === void 0 ? void 0 : (_mp$attributes3 = mp.attributes) === null || _mp$attributes3 === void 0 ? void 0 : _mp$attributes3.nodeId;\n      }).indexOf(nodeId);\n      if (test != -1) {\n        isOptional = false;\n        break;\n      }\n    }\n    return isOptional;\n  },\n  tassels: nodeId => {\n    var _customProduct$attrib6, _customProduct$attrib7;\n    let isTassels = false;\n    const customProduct = get().customProduct;\n    if (customProduct !== null && customProduct !== void 0 && (_customProduct$attrib6 = customProduct.attributes) !== null && _customProduct$attrib6 !== void 0 && (_customProduct$attrib7 = _customProduct$attrib6.parts) !== null && _customProduct$attrib7 !== void 0 && _customProduct$attrib7.length) {\n      const tasselParts = customProduct.attributes.parts.filter(p => p === null || p === void 0 ? void 0 : p.tassels);\n      for (const part of tasselParts) {\n        var _part$modelParts2;\n        const test = part === null || part === void 0 ? void 0 : (_part$modelParts2 = part.modelParts) === null || _part$modelParts2 === void 0 ? void 0 : _part$modelParts2.data.map(mp => {\n          var _mp$attributes4;\n          return mp === null || mp === void 0 ? void 0 : (_mp$attributes4 = mp.attributes) === null || _mp$attributes4 === void 0 ? void 0 : _mp$attributes4.nodeId;\n        }).indexOf(nodeId);\n        if (test != -1) {\n          isTassels = true;\n          break;\n        }\n      }\n    }\n    return isTassels;\n  },\n  addFlag: flag => {\n    set(produce(state => {\n      var _flag$key;\n      const newKey = (_flag$key = flag.key) !== null && _flag$key !== void 0 ? _flag$key : uuidv4();\n      state.flags = [...state.flags, {\n        ...flag,\n        key: newKey,\n        edit: true,\n        decalFreeze: false\n      }];\n    }));\n  },\n  updateFlag: (key, flag) => {\n    set(produce(state => {\n      state.flags = [...state.flags.map(f => {\n        if (f.key === key) {\n          return {\n            ...f,\n            ...flag\n          };\n        }\n        return f;\n      })];\n    }));\n  },\n  deleteFlag: key => {\n    set(produce(state => {\n      state.flags = [...state.flags.filter(f => f.key !== key)];\n    }));\n  },\n  addGraphic: graphic => {\n    set(produce(state => {\n      var _graphic$key;\n      const newKey = (_graphic$key = graphic.key) !== null && _graphic$key !== void 0 ? _graphic$key : uuidv4();\n      state.graphics = [...state.graphics, {\n        ...graphic,\n        key: newKey,\n        edit: true,\n        decalFreeze: false\n      }];\n    }));\n  },\n  updateGraphic: (key, graphic) => {\n    set(produce(state => {\n      state.graphics = [...state.graphics.map(f => {\n        if (f.key === key) {\n          return {\n            ...f,\n            ...graphic\n          };\n        }\n        return f;\n      })];\n    }));\n  },\n  deleteGraphic: key => {\n    set(produce(state => {\n      state.graphics = [...state.graphics.filter(f => f.key !== key)];\n    }));\n  },\n  addText: text => {\n    set(produce(state => {\n      var _text$key;\n      const newKey = (_text$key = text.key) !== null && _text$key !== void 0 ? _text$key : uuidv4();\n      state.texts = [...state.texts, {\n        ...text,\n        key: newKey,\n        edit: true,\n        decalFreeze: false,\n        hasApplied: false\n      }];\n    }));\n  },\n  updateIsMinimizedCustomiserNav: isMinimized => {\n    set(produce(state => {\n      state.isMinimizedCustomiserNav = isMinimized;\n    }));\n  },\n  updateText: (key, text) => {\n    set(produce(state => {\n      state.texts = [...state.texts.map(f => {\n        if (f.key === key) {\n          var _updateText$basePrice, _updateText$basePrice2, _updateText$letterPri, _updateText$letterPri2, _updateText$outlinePr, _updateText$outlinePr2, _updateText$puffPrice, _updateText$puffPrice2, _updateText$crystalPr, _updateText$crystalPr2;\n          const updateText = {\n            ...f,\n            ...text\n          };\n          let letterPrice;\n          if (updateText.letterPrice && updateText.text) {\n            letterPrice = updateText.letterPrice;\n            letterPrice.quantity = updateText.text.length;\n          }\n          const basePriceTotal = (_updateText$basePrice = updateText.basePrice) !== null && _updateText$basePrice !== void 0 && _updateText$basePrice.price ? updateText.basePrice.price * ((_updateText$basePrice2 = updateText.basePrice) === null || _updateText$basePrice2 === void 0 ? void 0 : _updateText$basePrice2.quantity) : 0;\n          const letterPriceTotal = (_updateText$letterPri = updateText.letterPrice) !== null && _updateText$letterPri !== void 0 && _updateText$letterPri.price ? updateText.letterPrice.price * ((_updateText$letterPri2 = updateText.letterPrice) === null || _updateText$letterPri2 === void 0 ? void 0 : _updateText$letterPri2.quantity) : 0;\n          const outlinePriceTotal = (_updateText$outlinePr = updateText.outlinePrice) !== null && _updateText$outlinePr !== void 0 && _updateText$outlinePr.price ? updateText.outlinePrice.price * ((_updateText$outlinePr2 = updateText.outlinePrice) === null || _updateText$outlinePr2 === void 0 ? void 0 : _updateText$outlinePr2.quantity) : 0;\n          const puffPriceTotal = (_updateText$puffPrice = updateText.puffPrice) !== null && _updateText$puffPrice !== void 0 && _updateText$puffPrice.price ? updateText.puffPrice.price * ((_updateText$puffPrice2 = updateText.puffPrice) === null || _updateText$puffPrice2 === void 0 ? void 0 : _updateText$puffPrice2.quantity) : 0;\n          const crystalPriceTotal = (_updateText$crystalPr = updateText.crystalPrice) !== null && _updateText$crystalPr !== void 0 && _updateText$crystalPr.price ? updateText.crystalPrice.price * ((_updateText$crystalPr2 = updateText.crystalPrice) === null || _updateText$crystalPr2 === void 0 ? void 0 : _updateText$crystalPr2.quantity) : 0;\n          const shouldCalculateText = typeof updateText.isVisible === 'undefined' || updateText.isVisible;\n          const totalPrice = shouldCalculateText ? basePriceTotal + letterPriceTotal + outlinePriceTotal + puffPriceTotal + crystalPriceTotal : 0;\n          return {\n            ...updateText,\n            letterPrice,\n            totalPrice\n          };\n        }\n        return f;\n      })];\n    }));\n  },\n  deleteText: key => {\n    set(produce(state => {\n      state.texts = [...state.texts.filter(f => f.key !== key)];\n    }));\n  },\n  reset: () => {\n    set(state => {\n      useCustomiserStore.persist.clearStorage();\n      return {\n        ...state,\n        parts: [],\n        savedParts: [],\n        texts: [],\n        flags: [],\n        graphics: [],\n        sizing: undefined\n      };\n    });\n  },\n  resetCustomerSelections: () => {\n    set(state => {\n      useCustomiserStore.persist.clearStorage();\n      return {\n        ...state,\n        parts: [],\n        savedParts: [],\n        texts: [],\n        flags: [],\n        graphics: [],\n        sizing: undefined,\n        selectedPart: null,\n        selectedNav: null,\n        isMinimizedCustomiserNav: false\n        // selectedModels: [...get().selectedModels],\n      };\n    });\n  }\n});\nexport const useCustomiserStore = create()(devtools(persist((...a) => ({\n  ...createCustomiser(...a)\n}), {\n  name: '',\n  onRehydrateStorage: () => state => {\n    if (state) {\n      // if (state.selectedPart) {\n      //   const partNavItem = state.navItems.find(\n      //     (navItem) => navItem.id === state.selectedPart?.id,\n      //   );\n      //   if (partNavItem && partNavItem.index) {\n      //     state.setSelectedNav(partNavItem.index);\n      //   }\n      // } else {\n      //   state.selectedNav = null;\n      // }\n    }\n  }\n})));","map":{"version":3,"names":["produce","v4","uuidv4","create","devtools","persist","UNIT","defaultMaterials","roughnessMap","normalMap","metalnessMap","displacementMap","map","aoMap","initialState","selectedModels","savedModels","selectedPart","navItems","selectedNav","parts","savedParts","flags","graphics","texts","variations","sizing","height","unit","HEIGHT","CM","weight","WEIGHT","KG","isMinimizedCustomiserNav","remountTrigger","createCustomiser","set","get","designComplete","_get$sizing","isComplete","find","i","type","variation","requiredParts","filter","required","part","p","id","total","_get$sizing2","price","amount","Number","forEach","_part$part$areaSize$d","_part$part$areaSize","_part$part$areaSize$d2","_part$part$areaSize$d3","_part$material$attrib","_part$material$attrib2","_part$material$attrib3","_part$material$attrib4","_part$material$attrib5","priceAdjust","areaSize","data","attributes","material","sum","text","totalPrice","flag","_flag$basePrice","basePrice","toFixed","setCustomProduct","customProduct","shopifyProduct","_shopifyProduct$produ","_customProduct$attrib","dataToSet","product","variants","nodes","length","options","_customProduct$attrib2","_customProduct$attrib3","models","option","_option$models","_option$models$","_option$models$$model","model","_option$models$2","_option$models$2$mode","push","optionId","navFitting","name","hasActions","navParts","o","_o$id","_o$name","optional","navSize","navFlags","navImages","navNames","index","setCanvasSize","width","state","canvas","setSizing","size","title","setSelectedModel","m","setPart","findPart","removePart","setSelectedPart","setSelectedNav","save","navItem","n","_state$customProduct","_state$customProduct$","_state$customProduct$2","f","decalFreeze","edit","resetNav","cancelPartChange","texture","nodeId","materials","hex","_p$part$modelParts","_p$material","_p$material$attribute","test","modelParts","mp","_mp$attributes","indexOf","images","_p$material$attribute2","_p$material$attribute3","image","_image$image","_image$image$data","_image$image$data$att","mapType","url","_customProduct$attrib4","_customProduct$attrib5","isOptional","optionalParts","_part$modelParts","_mp$attributes2","_p$part$modelParts2","_mp$attributes3","tassels","_customProduct$attrib6","_customProduct$attrib7","isTassels","tasselParts","_part$modelParts2","_mp$attributes4","addFlag","_flag$key","newKey","key","updateFlag","deleteFlag","addGraphic","graphic","_graphic$key","updateGraphic","deleteGraphic","addText","_text$key","hasApplied","updateIsMinimizedCustomiserNav","isMinimized","updateText","_updateText$basePrice","_updateText$basePrice2","_updateText$letterPri","_updateText$letterPri2","_updateText$outlinePr","_updateText$outlinePr2","_updateText$puffPrice","_updateText$puffPrice2","_updateText$crystalPr","_updateText$crystalPr2","letterPrice","quantity","basePriceTotal","letterPriceTotal","outlinePriceTotal","outlinePrice","puffPriceTotal","puffPrice","crystalPriceTotal","crystalPrice","shouldCalculateText","isVisible","deleteText","reset","useCustomiserStore","clearStorage","undefined","resetCustomerSelections","a","onRehydrateStorage"],"sources":["C:/Users/Reian/Desktop/Work/Freelance/Boxxer World/boxxerworld-shopify-frontend/customiser/src/store/customiser.ts"],"sourcesContent":["//* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport type {\r\n  CustomProductFragment,\r\n  CustomProductPartFragment,\r\n  FlagFragment,\r\n  GraphicFragment,\r\n  MaterialFragment,\r\n  Maybe,\r\n  ModelFragment,\r\n  NameEntity,\r\n  Scalars,\r\n} from '@graphql/generated/graphql';\r\nimport {\r\n  ShopifyProductVariantFragment,\r\n  ShopifyShopifyGetProductByIdQuery,\r\n} from '@graphql/generated/graphql-shopify';\r\nimport { MaterialTextureModel } from '@models';\r\nimport produce from 'immer';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { create, StateCreator } from 'zustand';\r\nimport { devtools, persist } from 'zustand/middleware';\r\n\r\nimport { UNIT } from './constants';\r\nimport { Texture } from 'three';\r\ninterface SelectedModel {\r\n  optionId: Scalars['ID'];\r\n  model?: Maybe<ModelFragment>;\r\n}\r\n\r\ninterface Part {\r\n  part: CustomProductPartFragment;\r\n  material: MaterialFragment;\r\n}\r\n\r\nexport type Vector3Array = [number, number, number];\r\nexport type EulerArray = (string | number | undefined)[];\r\n\r\nexport interface FlagCustomiser {\r\n  key?: string;\r\n  flag?: FlagFragment;\r\n  decalPosition?: Vector3Array;\r\n  decalOrientation?: EulerArray;\r\n  decalRotation?: number;\r\n  decalScale?: number;\r\n  decalFreeze?: boolean;\r\n  edit?: boolean;\r\n  basePrice?: AddonPrice;\r\n  size?: string;\r\n}\r\n\r\nexport interface GraphicCustomiser {\r\n  key?: string;\r\n  graphic?: GraphicFragment;\r\n  decalPosition?: Vector3Array;\r\n  decalOrientation?: EulerArray;\r\n  decalRotation?: number;\r\n  decalScale?: number;\r\n  decalFreeze?: boolean;\r\n  edit?: boolean;\r\n  basePrice?: AddonPrice;\r\n  size?: string;\r\n}\r\n\r\ninterface AddonPrice {\r\n  price?: number;\r\n  quantity: number;\r\n  shopifyVariantId?: Maybe<Scalars['String']>;\r\n}\r\n\r\nexport interface TextCustomiser {\r\n  key?: string;\r\n  text?: string;\r\n  decalPosition?: Vector3Array;\r\n  decalOrientation?: EulerArray;\r\n  decalRotation?: number;\r\n  decalScale?: number;\r\n  decalFreeze?: boolean;\r\n  edit?: boolean;\r\n  hasApplied?: boolean;\r\n  font?: string;\r\n  material?: MaterialFragment;\r\n  outline?: MaterialFragment;\r\n  crystalBackground?: MaterialFragment;\r\n  nameType?: {\r\n    id?: Maybe<Scalars['ID']>;\r\n    name?: Maybe<Scalars['String']>;\r\n  };\r\n  selectedName?: NameEntity;\r\n  basePrice?: AddonPrice;\r\n  letterPrice?: AddonPrice;\r\n  outlinePrice?: AddonPrice;\r\n  puffPrice?: AddonPrice;\r\n  crystalPrice?: AddonPrice;\r\n  totalPrice?: number;\r\n  preview?: Texture;\r\n  normalMap?: Texture;\r\n  emissiveMap?: Texture;\r\n  isVisible?: boolean;\r\n}\r\nexport interface NavItem {\r\n  id?: Scalars['ID'];\r\n  name: Maybe<Scalars['String']>;\r\n  type: 'option' | 'part' | 'fitting' | 'size' | 'flags' | 'names' | 'images';\r\n  index?: number;\r\n  required?: boolean;\r\n  hasActions?: boolean;\r\n}\r\ninterface SizingMeasurement {\r\n  value?: number;\r\n  unit?: string;\r\n}\r\nexport interface CustomiserState {\r\n  canvas?: {\r\n    width: number;\r\n    height: number;\r\n  };\r\n  customProduct?: CustomProductFragment;\r\n  selectedModels: SelectedModel[];\r\n  savedModels: SelectedModel[];\r\n  selectedPart: Maybe<CustomProductPartFragment>;\r\n  navItems: NavItem[];\r\n  selectedNav: Maybe<NavItem>;\r\n  parts: Part[];\r\n  savedParts: Part[];\r\n  flags: FlagCustomiser[];\r\n  graphics: GraphicCustomiser[];\r\n  texts: TextCustomiser[];\r\n  variations: Array<ShopifyProductVariantFragment>;\r\n  sizing?: {\r\n    height?: SizingMeasurement;\r\n    weight?: SizingMeasurement;\r\n    size?: string;\r\n    variation?: ShopifyProductVariantFragment;\r\n  };\r\n  isMinimizedCustomiserNav: boolean;\r\n  remountTrigger: number;\r\n}\r\n\r\nconst defaultMaterials = {\r\n  roughnessMap:\r\n    'https://boxxer-api-dev.nyc3.cdn.digitaloceanspaces.com/satin_white_Roughness_31e017223f.jpg',\r\n  normalMap:\r\n    'https://boxxer-api-dev.nyc3.cdn.digitaloceanspaces.com/satin_white_Normal_940f07492a.jpg',\r\n  metalnessMap:\r\n    'https://boxxer-api-dev.nyc3.cdn.digitaloceanspaces.com/satin_white_Metallic_342d2f7f8a.jpg',\r\n  displacementMap:\r\n    'https://boxxer-api-dev.nyc3.cdn.digitaloceanspaces.com/satin_white_Height_1fcbf95d0c.jpg',\r\n  map: 'https://boxxer-api-dev.nyc3.cdn.digitaloceanspaces.com/satin_white_Base_Color_831f136312.jpg',\r\n  aoMap:\r\n    'https://boxxer-api-dev.nyc3.cdn.digitaloceanspaces.com/satin_white_Ambient_Occlusion_426692f37f.jpg',\r\n};\r\n\r\nexport interface CustomiserActions {\r\n  total: () => string;\r\n  setSelectedModel: (optionId: Scalars['ID'], model?: Maybe<ModelFragment>) => void;\r\n  setCustomProduct: (\r\n    customProduct: CustomProductFragment,\r\n    shopifyProduct: ShopifyShopifyGetProductByIdQuery,\r\n  ) => void;\r\n  setSelectedPart: (data: CustomProductPartFragment) => void;\r\n  setPart: (part: CustomProductPartFragment, material: MaterialFragment) => void;\r\n  removePart: (part: CustomProductPartFragment) => void;\r\n  setSelectedNav: (index: number, save?: boolean) => void;\r\n  setCanvasSize: (width: number, height: number) => void;\r\n  setSizing: (\r\n    height?: SizingMeasurement,\r\n    weight?: SizingMeasurement,\r\n    variation?: ShopifyProductVariantFragment,\r\n  ) => void;\r\n  cancelPartChange: () => void;\r\n  addFlag: (flag: FlagCustomiser) => void;\r\n  updateFlag: (key: string, flag: FlagCustomiser) => void;\r\n  deleteFlag: (key: string) => void;\r\n  addGraphic: (graphic: GraphicCustomiser) => void;\r\n  updateGraphic: (key: string, graphic: GraphicCustomiser) => void;\r\n  deleteGraphic: (key: string) => void;\r\n  addText: (text: TextCustomiser) => void;\r\n  updateText: (key: string, text: TextCustomiser) => void;\r\n  deleteText: (key: string) => void;\r\n  resetNav: () => void;\r\n  texture: (nodeId: string) => {\r\n    id?: Maybe<Scalars['ID']>;\r\n    materials: MaterialTextureModel;\r\n    hex: string;\r\n  };\r\n  optional: (nodeId: string) => boolean;\r\n  tassels: (nodeId: string) => boolean;\r\n  reset: () => void;\r\n  resetCustomerSelections: () => void;\r\n  designComplete: () => boolean;\r\n  updateIsMinimizedCustomiserNav: (isMinimized: boolean) => void;\r\n}\r\n\r\nconst initialState: CustomiserState = {\r\n  selectedModels: [],\r\n  savedModels: [],\r\n  selectedPart: null,\r\n  navItems: [],\r\n  selectedNav: null,\r\n  parts: [],\r\n  savedParts: [],\r\n  flags: [],\r\n  graphics: [],\r\n  texts: [],\r\n  variations: [],\r\n  sizing: {\r\n    height: {\r\n      unit: UNIT.HEIGHT.CM,\r\n    },\r\n    weight: {\r\n      unit: UNIT.WEIGHT.KG,\r\n    },\r\n  },\r\n  isMinimizedCustomiserNav: false,\r\n  remountTrigger: 0,\r\n};\r\n\r\nconst createCustomiser: StateCreator<\r\n  CustomiserState & CustomiserActions,\r\n  [['zustand/devtools', never], ['zustand/persist', unknown]],\r\n  []\r\n> = (set, get) => ({\r\n  ...initialState,\r\n  designComplete: () => {\r\n    const navItems = get().navItems;\r\n    let isComplete = true;\r\n\r\n    const sizing = navItems.find((i) => i.type === 'size');\r\n    if (sizing && !get().sizing?.variation) return false;\r\n\r\n    const requiredParts = navItems.filter((i) => i.type === 'part' && i.required);\r\n    for (const part of requiredParts) {\r\n      if (!get().savedParts.find((p) => p.part.id === part.id)) {\r\n        isComplete = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return isComplete;\r\n  },\r\n  total: () => {\r\n    let total = 0;\r\n    const variation = get().sizing?.variation;\r\n    if (variation?.price.amount) {\r\n      total = total + Number(variation.price.amount);\r\n    }\r\n\r\n    get().parts.forEach((part) => {\r\n      const priceAdjust = part.part.areaSize?.data?.attributes?.priceAdjust ?? 1;\r\n      const price = part.material.attributes?.price?.data?.attributes?.price ?? 0;\r\n      const sum = priceAdjust * price;\r\n      total = total + sum;\r\n    });\r\n\r\n    get().texts.forEach((text) => {\r\n      if (text.totalPrice) {\r\n        total = total + text.totalPrice;\r\n      }\r\n    });\r\n\r\n    get().flags.forEach((flag) => {\r\n      if (flag.basePrice?.price) {\r\n        total = total + flag.basePrice.price;\r\n      }\r\n    });\r\n\r\n    return total.toFixed(2);\r\n  },\r\n  setCustomProduct: (customProduct, shopifyProduct) => {\r\n    let dataToSet: {\r\n      customProduct: CustomProductFragment;\r\n      selectedModels?: SelectedModel[];\r\n      savedModels?: SelectedModel[];\r\n      navItems?: NavItem[];\r\n      selectedNav?: NavItem;\r\n      variations?: Array<ShopifyProductVariantFragment>;\r\n    } = {\r\n      customProduct,\r\n      variations: shopifyProduct.product?.variants.nodes,\r\n    };\r\n\r\n    if (!get().selectedModels.length && customProduct.attributes?.options) {\r\n      const models: SelectedModel[] = [];\r\n      customProduct.attributes.options.forEach((option) => {\r\n        if (option?.models?.length && option?.models[0]?.model?.data) {\r\n          models.push({ optionId: option.id, model: option?.models[0]?.model?.data });\r\n        }\r\n      });\r\n\r\n      const navFitting: NavItem = {\r\n        name: 'Fitting',\r\n        type: 'fitting',\r\n        required: true,\r\n        hasActions: true,\r\n      };\r\n\r\n      const navParts: NavItem[] =\r\n        customProduct.attributes.parts?.map((o) => ({\r\n          id: o?.id ?? '',\r\n          name: o?.name ?? '',\r\n          type: 'part',\r\n          required: !!o?.optional,\r\n          hasActions: true,\r\n        })) ?? [];\r\n\r\n      const navSize: NavItem = {\r\n        name: 'Size',\r\n        type: 'size',\r\n        required: true,\r\n        hasActions: true,\r\n      };\r\n\r\n      const navFlags: NavItem = {\r\n        name: 'Flags',\r\n        type: 'flags',\r\n        hasActions: true,\r\n      };\r\n\r\n      const navImages: NavItem = {\r\n        name: 'Images',\r\n        type: 'images',\r\n        hasActions: true,\r\n      };\r\n\r\n      const navNames: NavItem = {\r\n        name: 'Text',\r\n        type: 'names',\r\n        hasActions: true,\r\n      };\r\n\r\n      const navItems = [navFitting, ...navParts, navNames, navFlags, navImages, navSize].map(\r\n        (i, index) => {\r\n          i.index = index;\r\n          return i;\r\n        },\r\n      );\r\n\r\n      dataToSet = {\r\n        ...dataToSet,\r\n        selectedModels: models,\r\n        savedModels: models,\r\n        navItems: navItems,\r\n        selectedNav: navItems[0],\r\n      };\r\n    }\r\n\r\n    set(dataToSet);\r\n  },\r\n  setCanvasSize: (width, height) => {\r\n    set(\r\n      produce((state: CustomiserState) => {\r\n        state.canvas = { width, height };\r\n      }),\r\n    );\r\n  },\r\n  setSizing: (height, weight, variation) => {\r\n    set(\r\n      produce((state: CustomiserState) => {\r\n        if (height) {\r\n          state.sizing = { ...state.sizing, height };\r\n        }\r\n        if (weight) {\r\n          state.sizing = { ...state.sizing, weight };\r\n        }\r\n        if (variation) {\r\n          state.sizing = { ...state.sizing, variation, size: variation.title };\r\n        }\r\n      }),\r\n    );\r\n  },\r\n  setSelectedModel: (id, model) => {\r\n    set(\r\n      produce((state: CustomiserState) => {\r\n        const selectedModels = get().selectedModels.filter((m) => m.optionId !== id);\r\n        state.selectedModels = [...selectedModels, { optionId: id, model }];\r\n\r\n        const savedModels = get().savedModels.filter((m) => m.optionId !== id);\r\n        state.savedModels = [...savedModels, { optionId: id, model }];\r\n\r\n        state.remountTrigger = state.remountTrigger + 1;\r\n      }),\r\n    );\r\n  },\r\n  setPart: (part, material) => {\r\n    set(\r\n      produce((state: CustomiserState) => {\r\n        const findPart = state.parts.find((p) => p.part.id === part.id);\r\n        if (findPart) {\r\n          findPart.material = material;\r\n        } else {\r\n          state.parts.push({ part, material });\r\n        }\r\n      }),\r\n    );\r\n  },\r\n  removePart: (part) => {\r\n    set(\r\n      produce((state: CustomiserState) => {\r\n        state.parts = state.parts.filter((p) => p.part.id !== part.id);\r\n        state.savedParts = state.savedParts.filter((p) => p.part.id !== part.id);\r\n      }),\r\n    );\r\n  },\r\n  setSelectedPart: (data) => set({ selectedPart: data }),\r\n  setSelectedNav: (index, save) =>\r\n    set(\r\n      produce((state: CustomiserState) => {\r\n        const navItem = state.navItems.find((n) => n.index === index);\r\n\r\n        if (navItem) {\r\n          state.selectedNav = navItem;\r\n\r\n          if (navItem.type === 'part') {\r\n            const part = state.customProduct?.attributes?.parts?.find((o) => o?.id === navItem.id);\r\n            if (part) {\r\n              state.selectedPart = part;\r\n            }\r\n          } else {\r\n            state.selectedPart = null;\r\n          }\r\n        }\r\n\r\n        state.savedParts = state.parts;\r\n        state.savedModels = state.selectedModels;\r\n\r\n        state.flags = state.flags.map((f) => {\r\n          f.decalFreeze = false;\r\n          f.edit = false;\r\n          return f;\r\n        });\r\n\r\n        state.texts = state.texts.map((f) => {\r\n          f.decalFreeze = false;\r\n          f.edit = false;\r\n          return f;\r\n        });\r\n\r\n        state.graphics = state.graphics.map((f) => {\r\n          f.decalFreeze = false;\r\n          f.edit = false;\r\n          return f;\r\n        });\r\n      }),\r\n    ),\r\n  resetNav: () => set({ selectedPart: null, selectedNav: null }),\r\n  cancelPartChange: () =>\r\n    set(\r\n      produce((state: CustomiserState) => {\r\n        state.parts = state.savedParts;\r\n        state.selectedModels = state.savedModels;\r\n        state.selectedPart = null;\r\n        state.selectedNav = null;\r\n      }),\r\n    ),\r\n  texture: (nodeId) => {\r\n    const parts = get().parts;\r\n    let materials: MaterialTextureModel = {};\r\n    let hex = '';\r\n    let id;\r\n    for (const p of parts) {\r\n      const test = p.part.modelParts?.data.map((mp) => mp?.attributes?.nodeId).indexOf(nodeId);\r\n      if (test != -1 && p?.material?.attributes?.images) {\r\n        hex = p.material.attributes.hex ?? '';\r\n        id = p.material.id;\r\n        p.material.attributes.images?.forEach((image) => {\r\n          materials = {\r\n            ...materials,\r\n            [image?.mapType as string]: image?.image?.data?.attributes?.url as string,\r\n          };\r\n        });\r\n\r\n        break;\r\n      }\r\n    }\r\n    return {\r\n      id,\r\n      materials: {\r\n        // default values\r\n        // Possible improvement would be to get these values from the Material Group Store if that's possible\r\n        ...defaultMaterials,\r\n        // custom values\r\n        ...materials,\r\n      },\r\n      hex,\r\n    };\r\n  },\r\n  optional: (nodeId) => {\r\n    let isOptional = false;\r\n    const parts = get().parts;\r\n    const customProduct = get().customProduct;\r\n    if (customProduct?.attributes?.parts?.length) {\r\n      const optionalParts = customProduct.attributes.parts.filter((p) => p?.optional);\r\n      for (const part of optionalParts) {\r\n        const test = part?.modelParts?.data.map((mp) => mp?.attributes?.nodeId).indexOf(nodeId);\r\n        if (test != -1) {\r\n          isOptional = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const p of parts) {\r\n      const test = p.part.modelParts?.data.map((mp) => mp?.attributes?.nodeId).indexOf(nodeId);\r\n      if (test != -1) {\r\n        isOptional = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return isOptional;\r\n  },\r\n  tassels: (nodeId) => {\r\n    let isTassels = false;\r\n    const customProduct = get().customProduct;\r\n    if (customProduct?.attributes?.parts?.length) {\r\n      const tasselParts = customProduct.attributes.parts.filter((p) => p?.tassels);\r\n      for (const part of tasselParts) {\r\n        const test = part?.modelParts?.data.map((mp) => mp?.attributes?.nodeId).indexOf(nodeId);\r\n        if (test != -1) {\r\n          isTassels = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return isTassels;\r\n  },\r\n  addFlag: (flag) => {\r\n    set(\r\n      produce((state: CustomiserState) => {\r\n        const newKey = flag.key ?? uuidv4();\r\n        state.flags = [...state.flags, { ...flag, key: newKey, edit: true, decalFreeze: false }];\r\n      }),\r\n    );\r\n  },\r\n  updateFlag: (key, flag) => {\r\n    set(\r\n      produce((state: CustomiserState) => {\r\n        state.flags = [\r\n          ...state.flags.map((f) => {\r\n            if (f.key === key) {\r\n              return { ...f, ...flag };\r\n            }\r\n            return f;\r\n          }),\r\n        ];\r\n      }),\r\n    );\r\n  },\r\n  deleteFlag: (key) => {\r\n    set(\r\n      produce((state: CustomiserState) => {\r\n        state.flags = [...state.flags.filter((f) => f.key !== key)];\r\n      }),\r\n    );\r\n  },\r\n  addGraphic: (graphic) => {\r\n    set(\r\n      produce((state: CustomiserState) => {\r\n        const newKey = graphic.key ?? uuidv4();\r\n        state.graphics = [\r\n          ...state.graphics,\r\n          { ...graphic, key: newKey, edit: true, decalFreeze: false },\r\n        ];\r\n      }),\r\n    );\r\n  },\r\n  updateGraphic: (key, graphic) => {\r\n    set(\r\n      produce((state: CustomiserState) => {\r\n        state.graphics = [\r\n          ...state.graphics.map((f) => {\r\n            if (f.key === key) {\r\n              return { ...f, ...graphic };\r\n            }\r\n            return f;\r\n          }),\r\n        ];\r\n      }),\r\n    );\r\n  },\r\n  deleteGraphic: (key) => {\r\n    set(\r\n      produce((state: CustomiserState) => {\r\n        state.graphics = [...state.graphics.filter((f) => f.key !== key)];\r\n      }),\r\n    );\r\n  },\r\n  addText: (text) => {\r\n    set(\r\n      produce((state: CustomiserState) => {\r\n        const newKey = text.key ?? uuidv4();\r\n        state.texts = [\r\n          ...state.texts,\r\n          { ...text, key: newKey, edit: true, decalFreeze: false, hasApplied: false },\r\n        ];\r\n      }),\r\n    );\r\n  },\r\n  updateIsMinimizedCustomiserNav: (isMinimized: boolean) => {\r\n    set(\r\n      produce((state: CustomiserState) => {\r\n        state.isMinimizedCustomiserNav = isMinimized;\r\n      }),\r\n    );\r\n  },\r\n  updateText: (key, text) => {\r\n    set(\r\n      produce((state: CustomiserState) => {\r\n        state.texts = [\r\n          ...state.texts.map((f) => {\r\n            if (f.key === key) {\r\n              const updateText = { ...f, ...text };\r\n              let letterPrice;\r\n              if (updateText.letterPrice && updateText.text) {\r\n                letterPrice = updateText.letterPrice;\r\n                letterPrice.quantity = updateText.text.length;\r\n              }\r\n              const basePriceTotal = updateText.basePrice?.price\r\n                ? updateText.basePrice.price * updateText.basePrice?.quantity\r\n                : 0;\r\n              const letterPriceTotal = updateText.letterPrice?.price\r\n                ? updateText.letterPrice.price * updateText.letterPrice?.quantity\r\n                : 0;\r\n              const outlinePriceTotal = updateText.outlinePrice?.price\r\n                ? updateText.outlinePrice.price * updateText.outlinePrice?.quantity\r\n                : 0;\r\n              const puffPriceTotal = updateText.puffPrice?.price\r\n                ? updateText.puffPrice.price * updateText.puffPrice?.quantity\r\n                : 0;\r\n              const crystalPriceTotal = updateText.crystalPrice?.price\r\n                ? updateText.crystalPrice.price * updateText.crystalPrice?.quantity\r\n                : 0;\r\n\r\n              const shouldCalculateText =\r\n                typeof updateText.isVisible === 'undefined' || updateText.isVisible;\r\n\r\n              const totalPrice = shouldCalculateText\r\n                ? basePriceTotal +\r\n                  letterPriceTotal +\r\n                  outlinePriceTotal +\r\n                  puffPriceTotal +\r\n                  crystalPriceTotal\r\n                : 0;\r\n              return { ...updateText, letterPrice, totalPrice };\r\n            }\r\n            return f;\r\n          }),\r\n        ];\r\n      }),\r\n    );\r\n  },\r\n  deleteText: (key) => {\r\n    set(\r\n      produce((state: CustomiserState) => {\r\n        state.texts = [...state.texts.filter((f) => f.key !== key)];\r\n      }),\r\n    );\r\n  },\r\n  reset: () => {\r\n    set((state) => {\r\n      useCustomiserStore.persist.clearStorage();\r\n      return {\r\n        ...state,\r\n        parts: [],\r\n        savedParts: [],\r\n        texts: [],\r\n        flags: [],\r\n        graphics: [],\r\n        sizing: undefined,\r\n      };\r\n    });\r\n  },\r\n  resetCustomerSelections: () => {\r\n    set((state) => {\r\n      useCustomiserStore.persist.clearStorage();\r\n      return {\r\n        ...state,\r\n        parts: [],\r\n        savedParts: [],\r\n        texts: [],\r\n        flags: [],\r\n        graphics: [],\r\n        sizing: undefined,\r\n        selectedPart: null,\r\n        selectedNav: null,\r\n        isMinimizedCustomiserNav: false,\r\n        // selectedModels: [...get().selectedModels],\r\n      };\r\n    });\r\n  },\r\n});\r\n\r\nexport const useCustomiserStore = create<CustomiserState & CustomiserActions>()(\r\n  devtools(\r\n    persist(\r\n      (...a) => ({\r\n        ...createCustomiser(...a),\r\n      }),\r\n      {\r\n        name: '',\r\n        onRehydrateStorage: () => (state) => {\r\n          if (state) {\r\n            // if (state.selectedPart) {\r\n            //   const partNavItem = state.navItems.find(\r\n            //     (navItem) => navItem.id === state.selectedPart?.id,\r\n            //   );\r\n            //   if (partNavItem && partNavItem.index) {\r\n            //     state.setSelectedNav(partNavItem.index);\r\n            //   }\r\n            // } else {\r\n            //   state.selectedNav = null;\r\n            // }\r\n          }\r\n        },\r\n      },\r\n    ),\r\n  ),\r\n);\r\n"],"mappings":"AAAA;;AAiBA,OAAOA,OAAO,MAAM,OAAO;AAC3B,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AACnC,SAASC,MAAM,QAAsB,SAAS;AAC9C,SAASC,QAAQ,EAAEC,OAAO,QAAQ,oBAAoB;AAEtD,SAASC,IAAI,QAAQ,aAAa;AAoHlC,MAAMC,gBAAgB,GAAG;EACvBC,YAAY,EACV,6FAA6F;EAC/FC,SAAS,EACP,0FAA0F;EAC5FC,YAAY,EACV,4FAA4F;EAC9FC,eAAe,EACb,0FAA0F;EAC5FC,GAAG,EAAE,8FAA8F;EACnGC,KAAK,EACH;AACJ,CAAC;AA2CD,MAAMC,YAA6B,GAAG;EACpCC,cAAc,EAAE,EAAE;EAClBC,WAAW,EAAE,EAAE;EACfC,YAAY,EAAE,IAAI;EAClBC,QAAQ,EAAE,EAAE;EACZC,WAAW,EAAE,IAAI;EACjBC,KAAK,EAAE,EAAE;EACTC,UAAU,EAAE,EAAE;EACdC,KAAK,EAAE,EAAE;EACTC,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAE,EAAE;EACTC,UAAU,EAAE,EAAE;EACdC,MAAM,EAAE;IACNC,MAAM,EAAE;MACNC,IAAI,EAAEtB,IAAI,CAACuB,MAAM,CAACC;IACpB,CAAC;IACDC,MAAM,EAAE;MACNH,IAAI,EAAEtB,IAAI,CAAC0B,MAAM,CAACC;IACpB;EACF,CAAC;EACDC,wBAAwB,EAAE,KAAK;EAC/BC,cAAc,EAAE;AAClB,CAAC;AAED,MAAMC,gBAIL,GAAGA,CAACC,GAAG,EAAEC,GAAG,MAAM;EACjB,GAAGxB,YAAY;EACfyB,cAAc,EAAEA,CAAA,KAAM;IAAA,IAAAC,WAAA;IACpB,MAAMtB,QAAQ,GAAGoB,GAAG,CAAC,CAAC,CAACpB,QAAQ;IAC/B,IAAIuB,UAAU,GAAG,IAAI;IAErB,MAAMf,MAAM,GAAGR,QAAQ,CAACwB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,KAAK,MAAM,CAAC;IACtD,IAAIlB,MAAM,IAAI,GAAAc,WAAA,GAACF,GAAG,CAAC,CAAC,CAACZ,MAAM,cAAAc,WAAA,eAAZA,WAAA,CAAcK,SAAS,GAAE,OAAO,KAAK;IAEpD,MAAMC,aAAa,GAAG5B,QAAQ,CAAC6B,MAAM,CAAEJ,CAAC,IAAKA,CAAC,CAACC,IAAI,KAAK,MAAM,IAAID,CAAC,CAACK,QAAQ,CAAC;IAC7E,KAAK,MAAMC,IAAI,IAAIH,aAAa,EAAE;MAChC,IAAI,CAACR,GAAG,CAAC,CAAC,CAACjB,UAAU,CAACqB,IAAI,CAAEQ,CAAC,IAAKA,CAAC,CAACD,IAAI,CAACE,EAAE,KAAKF,IAAI,CAACE,EAAE,CAAC,EAAE;QACxDV,UAAU,GAAG,KAAK;QAClB;MACF;IACF;IAEA,OAAOA,UAAU;EACnB,CAAC;EACDW,KAAK,EAAEA,CAAA,KAAM;IAAA,IAAAC,YAAA;IACX,IAAID,KAAK,GAAG,CAAC;IACb,MAAMP,SAAS,IAAAQ,YAAA,GAAGf,GAAG,CAAC,CAAC,CAACZ,MAAM,cAAA2B,YAAA,uBAAZA,YAAA,CAAcR,SAAS;IACzC,IAAIA,SAAS,aAATA,SAAS,eAATA,SAAS,CAAES,KAAK,CAACC,MAAM,EAAE;MAC3BH,KAAK,GAAGA,KAAK,GAAGI,MAAM,CAACX,SAAS,CAACS,KAAK,CAACC,MAAM,CAAC;IAChD;IAEAjB,GAAG,CAAC,CAAC,CAAClB,KAAK,CAACqC,OAAO,CAAER,IAAI,IAAK;MAAA,IAAAS,qBAAA,EAAAC,mBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;MAC5B,MAAMC,WAAW,IAAAT,qBAAA,IAAAC,mBAAA,GAAGV,IAAI,CAACA,IAAI,CAACmB,QAAQ,cAAAT,mBAAA,wBAAAC,sBAAA,GAAlBD,mBAAA,CAAoBU,IAAI,cAAAT,sBAAA,wBAAAC,sBAAA,GAAxBD,sBAAA,CAA0BU,UAAU,cAAAT,sBAAA,uBAApCA,sBAAA,CAAsCM,WAAW,cAAAT,qBAAA,cAAAA,qBAAA,GAAI,CAAC;MAC1E,MAAMJ,KAAK,IAAAQ,qBAAA,IAAAC,sBAAA,GAAGd,IAAI,CAACsB,QAAQ,CAACD,UAAU,cAAAP,sBAAA,wBAAAC,sBAAA,GAAxBD,sBAAA,CAA0BT,KAAK,cAAAU,sBAAA,wBAAAC,sBAAA,GAA/BD,sBAAA,CAAiCK,IAAI,cAAAJ,sBAAA,wBAAAC,sBAAA,GAArCD,sBAAA,CAAuCK,UAAU,cAAAJ,sBAAA,uBAAjDA,sBAAA,CAAmDZ,KAAK,cAAAQ,qBAAA,cAAAA,qBAAA,GAAI,CAAC;MAC3E,MAAMU,GAAG,GAAGL,WAAW,GAAGb,KAAK;MAC/BF,KAAK,GAAGA,KAAK,GAAGoB,GAAG;IACrB,CAAC,CAAC;IAEFlC,GAAG,CAAC,CAAC,CAACd,KAAK,CAACiC,OAAO,CAAEgB,IAAI,IAAK;MAC5B,IAAIA,IAAI,CAACC,UAAU,EAAE;QACnBtB,KAAK,GAAGA,KAAK,GAAGqB,IAAI,CAACC,UAAU;MACjC;IACF,CAAC,CAAC;IAEFpC,GAAG,CAAC,CAAC,CAAChB,KAAK,CAACmC,OAAO,CAAEkB,IAAI,IAAK;MAAA,IAAAC,eAAA;MAC5B,KAAAA,eAAA,GAAID,IAAI,CAACE,SAAS,cAAAD,eAAA,eAAdA,eAAA,CAAgBtB,KAAK,EAAE;QACzBF,KAAK,GAAGA,KAAK,GAAGuB,IAAI,CAACE,SAAS,CAACvB,KAAK;MACtC;IACF,CAAC,CAAC;IAEF,OAAOF,KAAK,CAAC0B,OAAO,CAAC,CAAC,CAAC;EACzB,CAAC;EACDC,gBAAgB,EAAEA,CAACC,aAAa,EAAEC,cAAc,KAAK;IAAA,IAAAC,qBAAA,EAAAC,qBAAA;IACnD,IAAIC,SAOH,GAAG;MACFJ,aAAa;MACbvD,UAAU,GAAAyD,qBAAA,GAAED,cAAc,CAACI,OAAO,cAAAH,qBAAA,uBAAtBA,qBAAA,CAAwBI,QAAQ,CAACC;IAC/C,CAAC;IAED,IAAI,CAACjD,GAAG,CAAC,CAAC,CAACvB,cAAc,CAACyE,MAAM,KAAAL,qBAAA,GAAIH,aAAa,CAACV,UAAU,cAAAa,qBAAA,eAAxBA,qBAAA,CAA0BM,OAAO,EAAE;MAAA,IAAAC,sBAAA,EAAAC,sBAAA;MACrE,MAAMC,MAAuB,GAAG,EAAE;MAClCZ,aAAa,CAACV,UAAU,CAACmB,OAAO,CAAChC,OAAO,CAAEoC,MAAM,IAAK;QAAA,IAAAC,cAAA,EAAAC,eAAA,EAAAC,qBAAA;QACnD,IAAIH,MAAM,aAANA,MAAM,gBAAAC,cAAA,GAAND,MAAM,CAAED,MAAM,cAAAE,cAAA,eAAdA,cAAA,CAAgBN,MAAM,IAAIK,MAAM,aAANA,MAAM,gBAAAE,eAAA,GAANF,MAAM,CAAED,MAAM,CAAC,CAAC,CAAC,cAAAG,eAAA,gBAAAC,qBAAA,GAAjBD,eAAA,CAAmBE,KAAK,cAAAD,qBAAA,eAAxBA,qBAAA,CAA0B3B,IAAI,EAAE;UAAA,IAAA6B,gBAAA,EAAAC,qBAAA;UAC5DP,MAAM,CAACQ,IAAI,CAAC;YAAEC,QAAQ,EAAER,MAAM,CAAC1C,EAAE;YAAE8C,KAAK,EAAEJ,MAAM,aAANA,MAAM,wBAAAK,gBAAA,GAANL,MAAM,CAAED,MAAM,CAAC,CAAC,CAAC,cAAAM,gBAAA,wBAAAC,qBAAA,GAAjBD,gBAAA,CAAmBD,KAAK,cAAAE,qBAAA,uBAAxBA,qBAAA,CAA0B9B;UAAK,CAAC,CAAC;QAC7E;MACF,CAAC,CAAC;MAEF,MAAMiC,UAAmB,GAAG;QAC1BC,IAAI,EAAE,SAAS;QACf3D,IAAI,EAAE,SAAS;QACfI,QAAQ,EAAE,IAAI;QACdwD,UAAU,EAAE;MACd,CAAC;MAED,MAAMC,QAAmB,IAAAf,sBAAA,IAAAC,sBAAA,GACvBX,aAAa,CAACV,UAAU,CAAClD,KAAK,cAAAuE,sBAAA,uBAA9BA,sBAAA,CAAgC/E,GAAG,CAAE8F,CAAC;QAAA,IAAAC,KAAA,EAAAC,OAAA;QAAA,OAAM;UAC1CzD,EAAE,GAAAwD,KAAA,GAAED,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEvD,EAAE,cAAAwD,KAAA,cAAAA,KAAA,GAAI,EAAE;UACfJ,IAAI,GAAAK,OAAA,GAAEF,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEH,IAAI,cAAAK,OAAA,cAAAA,OAAA,GAAI,EAAE;UACnBhE,IAAI,EAAE,MAAM;UACZI,QAAQ,EAAE,CAAC,EAAC0D,CAAC,aAADA,CAAC,eAADA,CAAC,CAAEG,QAAQ;UACvBL,UAAU,EAAE;QACd,CAAC;MAAA,CAAC,CAAC,cAAAd,sBAAA,cAAAA,sBAAA,GAAI,EAAE;MAEX,MAAMoB,OAAgB,GAAG;QACvBP,IAAI,EAAE,MAAM;QACZ3D,IAAI,EAAE,MAAM;QACZI,QAAQ,EAAE,IAAI;QACdwD,UAAU,EAAE;MACd,CAAC;MAED,MAAMO,QAAiB,GAAG;QACxBR,IAAI,EAAE,OAAO;QACb3D,IAAI,EAAE,OAAO;QACb4D,UAAU,EAAE;MACd,CAAC;MAED,MAAMQ,SAAkB,GAAG;QACzBT,IAAI,EAAE,QAAQ;QACd3D,IAAI,EAAE,QAAQ;QACd4D,UAAU,EAAE;MACd,CAAC;MAED,MAAMS,QAAiB,GAAG;QACxBV,IAAI,EAAE,MAAM;QACZ3D,IAAI,EAAE,OAAO;QACb4D,UAAU,EAAE;MACd,CAAC;MAED,MAAMtF,QAAQ,GAAG,CAACoF,UAAU,EAAE,GAAGG,QAAQ,EAAEQ,QAAQ,EAAEF,QAAQ,EAAEC,SAAS,EAAEF,OAAO,CAAC,CAAClG,GAAG,CACpF,CAAC+B,CAAC,EAAEuE,KAAK,KAAK;QACZvE,CAAC,CAACuE,KAAK,GAAGA,KAAK;QACf,OAAOvE,CAAC;MACV,CACF,CAAC;MAEDyC,SAAS,GAAG;QACV,GAAGA,SAAS;QACZrE,cAAc,EAAE6E,MAAM;QACtB5E,WAAW,EAAE4E,MAAM;QACnB1E,QAAQ,EAAEA,QAAQ;QAClBC,WAAW,EAAED,QAAQ,CAAC,CAAC;MACzB,CAAC;IACH;IAEAmB,GAAG,CAAC+C,SAAS,CAAC;EAChB,CAAC;EACD+B,aAAa,EAAEA,CAACC,KAAK,EAAEzF,MAAM,KAAK;IAChCU,GAAG,CACDrC,OAAO,CAAEqH,KAAsB,IAAK;MAClCA,KAAK,CAACC,MAAM,GAAG;QAAEF,KAAK;QAAEzF;MAAO,CAAC;IAClC,CAAC,CACH,CAAC;EACH,CAAC;EACD4F,SAAS,EAAEA,CAAC5F,MAAM,EAAEI,MAAM,EAAEc,SAAS,KAAK;IACxCR,GAAG,CACDrC,OAAO,CAAEqH,KAAsB,IAAK;MAClC,IAAI1F,MAAM,EAAE;QACV0F,KAAK,CAAC3F,MAAM,GAAG;UAAE,GAAG2F,KAAK,CAAC3F,MAAM;UAAEC;QAAO,CAAC;MAC5C;MACA,IAAII,MAAM,EAAE;QACVsF,KAAK,CAAC3F,MAAM,GAAG;UAAE,GAAG2F,KAAK,CAAC3F,MAAM;UAAEK;QAAO,CAAC;MAC5C;MACA,IAAIc,SAAS,EAAE;QACbwE,KAAK,CAAC3F,MAAM,GAAG;UAAE,GAAG2F,KAAK,CAAC3F,MAAM;UAAEmB,SAAS;UAAE2E,IAAI,EAAE3E,SAAS,CAAC4E;QAAM,CAAC;MACtE;IACF,CAAC,CACH,CAAC;EACH,CAAC;EACDC,gBAAgB,EAAEA,CAACvE,EAAE,EAAE8C,KAAK,KAAK;IAC/B5D,GAAG,CACDrC,OAAO,CAAEqH,KAAsB,IAAK;MAClC,MAAMtG,cAAc,GAAGuB,GAAG,CAAC,CAAC,CAACvB,cAAc,CAACgC,MAAM,CAAE4E,CAAC,IAAKA,CAAC,CAACtB,QAAQ,KAAKlD,EAAE,CAAC;MAC5EkE,KAAK,CAACtG,cAAc,GAAG,CAAC,GAAGA,cAAc,EAAE;QAAEsF,QAAQ,EAAElD,EAAE;QAAE8C;MAAM,CAAC,CAAC;MAEnE,MAAMjF,WAAW,GAAGsB,GAAG,CAAC,CAAC,CAACtB,WAAW,CAAC+B,MAAM,CAAE4E,CAAC,IAAKA,CAAC,CAACtB,QAAQ,KAAKlD,EAAE,CAAC;MACtEkE,KAAK,CAACrG,WAAW,GAAG,CAAC,GAAGA,WAAW,EAAE;QAAEqF,QAAQ,EAAElD,EAAE;QAAE8C;MAAM,CAAC,CAAC;MAE7DoB,KAAK,CAAClF,cAAc,GAAGkF,KAAK,CAAClF,cAAc,GAAG,CAAC;IACjD,CAAC,CACH,CAAC;EACH,CAAC;EACDyF,OAAO,EAAEA,CAAC3E,IAAI,EAAEsB,QAAQ,KAAK;IAC3BlC,GAAG,CACDrC,OAAO,CAAEqH,KAAsB,IAAK;MAClC,MAAMQ,QAAQ,GAAGR,KAAK,CAACjG,KAAK,CAACsB,IAAI,CAAEQ,CAAC,IAAKA,CAAC,CAACD,IAAI,CAACE,EAAE,KAAKF,IAAI,CAACE,EAAE,CAAC;MAC/D,IAAI0E,QAAQ,EAAE;QACZA,QAAQ,CAACtD,QAAQ,GAAGA,QAAQ;MAC9B,CAAC,MAAM;QACL8C,KAAK,CAACjG,KAAK,CAACgF,IAAI,CAAC;UAAEnD,IAAI;UAAEsB;QAAS,CAAC,CAAC;MACtC;IACF,CAAC,CACH,CAAC;EACH,CAAC;EACDuD,UAAU,EAAG7E,IAAI,IAAK;IACpBZ,GAAG,CACDrC,OAAO,CAAEqH,KAAsB,IAAK;MAClCA,KAAK,CAACjG,KAAK,GAAGiG,KAAK,CAACjG,KAAK,CAAC2B,MAAM,CAAEG,CAAC,IAAKA,CAAC,CAACD,IAAI,CAACE,EAAE,KAAKF,IAAI,CAACE,EAAE,CAAC;MAC9DkE,KAAK,CAAChG,UAAU,GAAGgG,KAAK,CAAChG,UAAU,CAAC0B,MAAM,CAAEG,CAAC,IAAKA,CAAC,CAACD,IAAI,CAACE,EAAE,KAAKF,IAAI,CAACE,EAAE,CAAC;IAC1E,CAAC,CACH,CAAC;EACH,CAAC;EACD4E,eAAe,EAAG1D,IAAI,IAAKhC,GAAG,CAAC;IAAEpB,YAAY,EAAEoD;EAAK,CAAC,CAAC;EACtD2D,cAAc,EAAEA,CAACd,KAAK,EAAEe,IAAI,KAC1B5F,GAAG,CACDrC,OAAO,CAAEqH,KAAsB,IAAK;IAClC,MAAMa,OAAO,GAAGb,KAAK,CAACnG,QAAQ,CAACwB,IAAI,CAAEyF,CAAC,IAAKA,CAAC,CAACjB,KAAK,KAAKA,KAAK,CAAC;IAE7D,IAAIgB,OAAO,EAAE;MACXb,KAAK,CAAClG,WAAW,GAAG+G,OAAO;MAE3B,IAAIA,OAAO,CAACtF,IAAI,KAAK,MAAM,EAAE;QAAA,IAAAwF,oBAAA,EAAAC,qBAAA,EAAAC,sBAAA;QAC3B,MAAMrF,IAAI,IAAAmF,oBAAA,GAAGf,KAAK,CAACrC,aAAa,cAAAoD,oBAAA,wBAAAC,qBAAA,GAAnBD,oBAAA,CAAqB9D,UAAU,cAAA+D,qBAAA,wBAAAC,sBAAA,GAA/BD,qBAAA,CAAiCjH,KAAK,cAAAkH,sBAAA,uBAAtCA,sBAAA,CAAwC5F,IAAI,CAAEgE,CAAC,IAAK,CAAAA,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEvD,EAAE,MAAK+E,OAAO,CAAC/E,EAAE,CAAC;QACtF,IAAIF,IAAI,EAAE;UACRoE,KAAK,CAACpG,YAAY,GAAGgC,IAAI;QAC3B;MACF,CAAC,MAAM;QACLoE,KAAK,CAACpG,YAAY,GAAG,IAAI;MAC3B;IACF;IAEAoG,KAAK,CAAChG,UAAU,GAAGgG,KAAK,CAACjG,KAAK;IAC9BiG,KAAK,CAACrG,WAAW,GAAGqG,KAAK,CAACtG,cAAc;IAExCsG,KAAK,CAAC/F,KAAK,GAAG+F,KAAK,CAAC/F,KAAK,CAACV,GAAG,CAAE2H,CAAC,IAAK;MACnCA,CAAC,CAACC,WAAW,GAAG,KAAK;MACrBD,CAAC,CAACE,IAAI,GAAG,KAAK;MACd,OAAOF,CAAC;IACV,CAAC,CAAC;IAEFlB,KAAK,CAAC7F,KAAK,GAAG6F,KAAK,CAAC7F,KAAK,CAACZ,GAAG,CAAE2H,CAAC,IAAK;MACnCA,CAAC,CAACC,WAAW,GAAG,KAAK;MACrBD,CAAC,CAACE,IAAI,GAAG,KAAK;MACd,OAAOF,CAAC;IACV,CAAC,CAAC;IAEFlB,KAAK,CAAC9F,QAAQ,GAAG8F,KAAK,CAAC9F,QAAQ,CAACX,GAAG,CAAE2H,CAAC,IAAK;MACzCA,CAAC,CAACC,WAAW,GAAG,KAAK;MACrBD,CAAC,CAACE,IAAI,GAAG,KAAK;MACd,OAAOF,CAAC;IACV,CAAC,CAAC;EACJ,CAAC,CACH,CAAC;EACHG,QAAQ,EAAEA,CAAA,KAAMrG,GAAG,CAAC;IAAEpB,YAAY,EAAE,IAAI;IAAEE,WAAW,EAAE;EAAK,CAAC,CAAC;EAC9DwH,gBAAgB,EAAEA,CAAA,KAChBtG,GAAG,CACDrC,OAAO,CAAEqH,KAAsB,IAAK;IAClCA,KAAK,CAACjG,KAAK,GAAGiG,KAAK,CAAChG,UAAU;IAC9BgG,KAAK,CAACtG,cAAc,GAAGsG,KAAK,CAACrG,WAAW;IACxCqG,KAAK,CAACpG,YAAY,GAAG,IAAI;IACzBoG,KAAK,CAAClG,WAAW,GAAG,IAAI;EAC1B,CAAC,CACH,CAAC;EACHyH,OAAO,EAAGC,MAAM,IAAK;IACnB,MAAMzH,KAAK,GAAGkB,GAAG,CAAC,CAAC,CAAClB,KAAK;IACzB,IAAI0H,SAA+B,GAAG,CAAC,CAAC;IACxC,IAAIC,GAAG,GAAG,EAAE;IACZ,IAAI5F,EAAE;IACN,KAAK,MAAMD,CAAC,IAAI9B,KAAK,EAAE;MAAA,IAAA4H,kBAAA,EAAAC,WAAA,EAAAC,qBAAA;MACrB,MAAMC,IAAI,IAAAH,kBAAA,GAAG9F,CAAC,CAACD,IAAI,CAACmG,UAAU,cAAAJ,kBAAA,uBAAjBA,kBAAA,CAAmB3E,IAAI,CAACzD,GAAG,CAAEyI,EAAE;QAAA,IAAAC,cAAA;QAAA,OAAKD,EAAE,aAAFA,EAAE,wBAAAC,cAAA,GAAFD,EAAE,CAAE/E,UAAU,cAAAgF,cAAA,uBAAdA,cAAA,CAAgBT,MAAM;MAAA,EAAC,CAACU,OAAO,CAACV,MAAM,CAAC;MACxF,IAAIM,IAAI,IAAI,CAAC,CAAC,IAAIjG,CAAC,aAADA,CAAC,gBAAA+F,WAAA,GAAD/F,CAAC,CAAEqB,QAAQ,cAAA0E,WAAA,gBAAAC,qBAAA,GAAXD,WAAA,CAAa3E,UAAU,cAAA4E,qBAAA,eAAvBA,qBAAA,CAAyBM,MAAM,EAAE;QAAA,IAAAC,sBAAA,EAAAC,sBAAA;QACjDX,GAAG,IAAAU,sBAAA,GAAGvG,CAAC,CAACqB,QAAQ,CAACD,UAAU,CAACyE,GAAG,cAAAU,sBAAA,cAAAA,sBAAA,GAAI,EAAE;QACrCtG,EAAE,GAAGD,CAAC,CAACqB,QAAQ,CAACpB,EAAE;QAClB,CAAAuG,sBAAA,GAAAxG,CAAC,CAACqB,QAAQ,CAACD,UAAU,CAACkF,MAAM,cAAAE,sBAAA,uBAA5BA,sBAAA,CAA8BjG,OAAO,CAAEkG,KAAK,IAAK;UAAA,IAAAC,YAAA,EAAAC,iBAAA,EAAAC,qBAAA;UAC/ChB,SAAS,GAAG;YACV,GAAGA,SAAS;YACZ,CAACa,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEI,OAAO,GAAaJ,KAAK,aAALA,KAAK,wBAAAC,YAAA,GAALD,KAAK,CAAEA,KAAK,cAAAC,YAAA,wBAAAC,iBAAA,GAAZD,YAAA,CAAcvF,IAAI,cAAAwF,iBAAA,wBAAAC,qBAAA,GAAlBD,iBAAA,CAAoBvF,UAAU,cAAAwF,qBAAA,uBAA9BA,qBAAA,CAAgCE;UAC9D,CAAC;QACH,CAAC,CAAC;QAEF;MACF;IACF;IACA,OAAO;MACL7G,EAAE;MACF2F,SAAS,EAAE;QACT;QACA;QACA,GAAGvI,gBAAgB;QACnB;QACA,GAAGuI;MACL,CAAC;MACDC;IACF,CAAC;EACH,CAAC;EACDlC,QAAQ,EAAGgC,MAAM,IAAK;IAAA,IAAAoB,sBAAA,EAAAC,sBAAA;IACpB,IAAIC,UAAU,GAAG,KAAK;IACtB,MAAM/I,KAAK,GAAGkB,GAAG,CAAC,CAAC,CAAClB,KAAK;IACzB,MAAM4D,aAAa,GAAG1C,GAAG,CAAC,CAAC,CAAC0C,aAAa;IACzC,IAAIA,aAAa,aAAbA,aAAa,gBAAAiF,sBAAA,GAAbjF,aAAa,CAAEV,UAAU,cAAA2F,sBAAA,gBAAAC,sBAAA,GAAzBD,sBAAA,CAA2B7I,KAAK,cAAA8I,sBAAA,eAAhCA,sBAAA,CAAkC1E,MAAM,EAAE;MAC5C,MAAM4E,aAAa,GAAGpF,aAAa,CAACV,UAAU,CAAClD,KAAK,CAAC2B,MAAM,CAAEG,CAAC,IAAKA,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAE2D,QAAQ,CAAC;MAC/E,KAAK,MAAM5D,IAAI,IAAImH,aAAa,EAAE;QAAA,IAAAC,gBAAA;QAChC,MAAMlB,IAAI,GAAGlG,IAAI,aAAJA,IAAI,wBAAAoH,gBAAA,GAAJpH,IAAI,CAAEmG,UAAU,cAAAiB,gBAAA,uBAAhBA,gBAAA,CAAkBhG,IAAI,CAACzD,GAAG,CAAEyI,EAAE;UAAA,IAAAiB,eAAA;UAAA,OAAKjB,EAAE,aAAFA,EAAE,wBAAAiB,eAAA,GAAFjB,EAAE,CAAE/E,UAAU,cAAAgG,eAAA,uBAAdA,eAAA,CAAgBzB,MAAM;QAAA,EAAC,CAACU,OAAO,CAACV,MAAM,CAAC;QACvF,IAAIM,IAAI,IAAI,CAAC,CAAC,EAAE;UACdgB,UAAU,GAAG,IAAI;UACjB;QACF;MACF;IACF;IAEA,KAAK,MAAMjH,CAAC,IAAI9B,KAAK,EAAE;MAAA,IAAAmJ,mBAAA;MACrB,MAAMpB,IAAI,IAAAoB,mBAAA,GAAGrH,CAAC,CAACD,IAAI,CAACmG,UAAU,cAAAmB,mBAAA,uBAAjBA,mBAAA,CAAmBlG,IAAI,CAACzD,GAAG,CAAEyI,EAAE;QAAA,IAAAmB,eAAA;QAAA,OAAKnB,EAAE,aAAFA,EAAE,wBAAAmB,eAAA,GAAFnB,EAAE,CAAE/E,UAAU,cAAAkG,eAAA,uBAAdA,eAAA,CAAgB3B,MAAM;MAAA,EAAC,CAACU,OAAO,CAACV,MAAM,CAAC;MACxF,IAAIM,IAAI,IAAI,CAAC,CAAC,EAAE;QACdgB,UAAU,GAAG,KAAK;QAClB;MACF;IACF;IAEA,OAAOA,UAAU;EACnB,CAAC;EACDM,OAAO,EAAG5B,MAAM,IAAK;IAAA,IAAA6B,sBAAA,EAAAC,sBAAA;IACnB,IAAIC,SAAS,GAAG,KAAK;IACrB,MAAM5F,aAAa,GAAG1C,GAAG,CAAC,CAAC,CAAC0C,aAAa;IACzC,IAAIA,aAAa,aAAbA,aAAa,gBAAA0F,sBAAA,GAAb1F,aAAa,CAAEV,UAAU,cAAAoG,sBAAA,gBAAAC,sBAAA,GAAzBD,sBAAA,CAA2BtJ,KAAK,cAAAuJ,sBAAA,eAAhCA,sBAAA,CAAkCnF,MAAM,EAAE;MAC5C,MAAMqF,WAAW,GAAG7F,aAAa,CAACV,UAAU,CAAClD,KAAK,CAAC2B,MAAM,CAAEG,CAAC,IAAKA,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEuH,OAAO,CAAC;MAC5E,KAAK,MAAMxH,IAAI,IAAI4H,WAAW,EAAE;QAAA,IAAAC,iBAAA;QAC9B,MAAM3B,IAAI,GAAGlG,IAAI,aAAJA,IAAI,wBAAA6H,iBAAA,GAAJ7H,IAAI,CAAEmG,UAAU,cAAA0B,iBAAA,uBAAhBA,iBAAA,CAAkBzG,IAAI,CAACzD,GAAG,CAAEyI,EAAE;UAAA,IAAA0B,eAAA;UAAA,OAAK1B,EAAE,aAAFA,EAAE,wBAAA0B,eAAA,GAAF1B,EAAE,CAAE/E,UAAU,cAAAyG,eAAA,uBAAdA,eAAA,CAAgBlC,MAAM;QAAA,EAAC,CAACU,OAAO,CAACV,MAAM,CAAC;QACvF,IAAIM,IAAI,IAAI,CAAC,CAAC,EAAE;UACdyB,SAAS,GAAG,IAAI;UAChB;QACF;MACF;IACF;IAEA,OAAOA,SAAS;EAClB,CAAC;EACDI,OAAO,EAAGrG,IAAI,IAAK;IACjBtC,GAAG,CACDrC,OAAO,CAAEqH,KAAsB,IAAK;MAAA,IAAA4D,SAAA;MAClC,MAAMC,MAAM,IAAAD,SAAA,GAAGtG,IAAI,CAACwG,GAAG,cAAAF,SAAA,cAAAA,SAAA,GAAI/K,MAAM,CAAC,CAAC;MACnCmH,KAAK,CAAC/F,KAAK,GAAG,CAAC,GAAG+F,KAAK,CAAC/F,KAAK,EAAE;QAAE,GAAGqD,IAAI;QAAEwG,GAAG,EAAED,MAAM;QAAEzC,IAAI,EAAE,IAAI;QAAED,WAAW,EAAE;MAAM,CAAC,CAAC;IAC1F,CAAC,CACH,CAAC;EACH,CAAC;EACD4C,UAAU,EAAEA,CAACD,GAAG,EAAExG,IAAI,KAAK;IACzBtC,GAAG,CACDrC,OAAO,CAAEqH,KAAsB,IAAK;MAClCA,KAAK,CAAC/F,KAAK,GAAG,CACZ,GAAG+F,KAAK,CAAC/F,KAAK,CAACV,GAAG,CAAE2H,CAAC,IAAK;QACxB,IAAIA,CAAC,CAAC4C,GAAG,KAAKA,GAAG,EAAE;UACjB,OAAO;YAAE,GAAG5C,CAAC;YAAE,GAAG5D;UAAK,CAAC;QAC1B;QACA,OAAO4D,CAAC;MACV,CAAC,CAAC,CACH;IACH,CAAC,CACH,CAAC;EACH,CAAC;EACD8C,UAAU,EAAGF,GAAG,IAAK;IACnB9I,GAAG,CACDrC,OAAO,CAAEqH,KAAsB,IAAK;MAClCA,KAAK,CAAC/F,KAAK,GAAG,CAAC,GAAG+F,KAAK,CAAC/F,KAAK,CAACyB,MAAM,CAAEwF,CAAC,IAAKA,CAAC,CAAC4C,GAAG,KAAKA,GAAG,CAAC,CAAC;IAC7D,CAAC,CACH,CAAC;EACH,CAAC;EACDG,UAAU,EAAGC,OAAO,IAAK;IACvBlJ,GAAG,CACDrC,OAAO,CAAEqH,KAAsB,IAAK;MAAA,IAAAmE,YAAA;MAClC,MAAMN,MAAM,IAAAM,YAAA,GAAGD,OAAO,CAACJ,GAAG,cAAAK,YAAA,cAAAA,YAAA,GAAItL,MAAM,CAAC,CAAC;MACtCmH,KAAK,CAAC9F,QAAQ,GAAG,CACf,GAAG8F,KAAK,CAAC9F,QAAQ,EACjB;QAAE,GAAGgK,OAAO;QAAEJ,GAAG,EAAED,MAAM;QAAEzC,IAAI,EAAE,IAAI;QAAED,WAAW,EAAE;MAAM,CAAC,CAC5D;IACH,CAAC,CACH,CAAC;EACH,CAAC;EACDiD,aAAa,EAAEA,CAACN,GAAG,EAAEI,OAAO,KAAK;IAC/BlJ,GAAG,CACDrC,OAAO,CAAEqH,KAAsB,IAAK;MAClCA,KAAK,CAAC9F,QAAQ,GAAG,CACf,GAAG8F,KAAK,CAAC9F,QAAQ,CAACX,GAAG,CAAE2H,CAAC,IAAK;QAC3B,IAAIA,CAAC,CAAC4C,GAAG,KAAKA,GAAG,EAAE;UACjB,OAAO;YAAE,GAAG5C,CAAC;YAAE,GAAGgD;UAAQ,CAAC;QAC7B;QACA,OAAOhD,CAAC;MACV,CAAC,CAAC,CACH;IACH,CAAC,CACH,CAAC;EACH,CAAC;EACDmD,aAAa,EAAGP,GAAG,IAAK;IACtB9I,GAAG,CACDrC,OAAO,CAAEqH,KAAsB,IAAK;MAClCA,KAAK,CAAC9F,QAAQ,GAAG,CAAC,GAAG8F,KAAK,CAAC9F,QAAQ,CAACwB,MAAM,CAAEwF,CAAC,IAAKA,CAAC,CAAC4C,GAAG,KAAKA,GAAG,CAAC,CAAC;IACnE,CAAC,CACH,CAAC;EACH,CAAC;EACDQ,OAAO,EAAGlH,IAAI,IAAK;IACjBpC,GAAG,CACDrC,OAAO,CAAEqH,KAAsB,IAAK;MAAA,IAAAuE,SAAA;MAClC,MAAMV,MAAM,IAAAU,SAAA,GAAGnH,IAAI,CAAC0G,GAAG,cAAAS,SAAA,cAAAA,SAAA,GAAI1L,MAAM,CAAC,CAAC;MACnCmH,KAAK,CAAC7F,KAAK,GAAG,CACZ,GAAG6F,KAAK,CAAC7F,KAAK,EACd;QAAE,GAAGiD,IAAI;QAAE0G,GAAG,EAAED,MAAM;QAAEzC,IAAI,EAAE,IAAI;QAAED,WAAW,EAAE,KAAK;QAAEqD,UAAU,EAAE;MAAM,CAAC,CAC5E;IACH,CAAC,CACH,CAAC;EACH,CAAC;EACDC,8BAA8B,EAAGC,WAAoB,IAAK;IACxD1J,GAAG,CACDrC,OAAO,CAAEqH,KAAsB,IAAK;MAClCA,KAAK,CAACnF,wBAAwB,GAAG6J,WAAW;IAC9C,CAAC,CACH,CAAC;EACH,CAAC;EACDC,UAAU,EAAEA,CAACb,GAAG,EAAE1G,IAAI,KAAK;IACzBpC,GAAG,CACDrC,OAAO,CAAEqH,KAAsB,IAAK;MAClCA,KAAK,CAAC7F,KAAK,GAAG,CACZ,GAAG6F,KAAK,CAAC7F,KAAK,CAACZ,GAAG,CAAE2H,CAAC,IAAK;QACxB,IAAIA,CAAC,CAAC4C,GAAG,KAAKA,GAAG,EAAE;UAAA,IAAAc,qBAAA,EAAAC,sBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,qBAAA,EAAAC,sBAAA;UACjB,MAAMV,UAAU,GAAG;YAAE,GAAGzD,CAAC;YAAE,GAAG9D;UAAK,CAAC;UACpC,IAAIkI,WAAW;UACf,IAAIX,UAAU,CAACW,WAAW,IAAIX,UAAU,CAACvH,IAAI,EAAE;YAC7CkI,WAAW,GAAGX,UAAU,CAACW,WAAW;YACpCA,WAAW,CAACC,QAAQ,GAAGZ,UAAU,CAACvH,IAAI,CAACe,MAAM;UAC/C;UACA,MAAMqH,cAAc,GAAG,CAAAZ,qBAAA,GAAAD,UAAU,CAACnH,SAAS,cAAAoH,qBAAA,eAApBA,qBAAA,CAAsB3I,KAAK,GAC9C0I,UAAU,CAACnH,SAAS,CAACvB,KAAK,KAAA4I,sBAAA,GAAGF,UAAU,CAACnH,SAAS,cAAAqH,sBAAA,uBAApBA,sBAAA,CAAsBU,QAAQ,IAC3D,CAAC;UACL,MAAME,gBAAgB,GAAG,CAAAX,qBAAA,GAAAH,UAAU,CAACW,WAAW,cAAAR,qBAAA,eAAtBA,qBAAA,CAAwB7I,KAAK,GAClD0I,UAAU,CAACW,WAAW,CAACrJ,KAAK,KAAA8I,sBAAA,GAAGJ,UAAU,CAACW,WAAW,cAAAP,sBAAA,uBAAtBA,sBAAA,CAAwBQ,QAAQ,IAC/D,CAAC;UACL,MAAMG,iBAAiB,GAAG,CAAAV,qBAAA,GAAAL,UAAU,CAACgB,YAAY,cAAAX,qBAAA,eAAvBA,qBAAA,CAAyB/I,KAAK,GACpD0I,UAAU,CAACgB,YAAY,CAAC1J,KAAK,KAAAgJ,sBAAA,GAAGN,UAAU,CAACgB,YAAY,cAAAV,sBAAA,uBAAvBA,sBAAA,CAAyBM,QAAQ,IACjE,CAAC;UACL,MAAMK,cAAc,GAAG,CAAAV,qBAAA,GAAAP,UAAU,CAACkB,SAAS,cAAAX,qBAAA,eAApBA,qBAAA,CAAsBjJ,KAAK,GAC9C0I,UAAU,CAACkB,SAAS,CAAC5J,KAAK,KAAAkJ,sBAAA,GAAGR,UAAU,CAACkB,SAAS,cAAAV,sBAAA,uBAApBA,sBAAA,CAAsBI,QAAQ,IAC3D,CAAC;UACL,MAAMO,iBAAiB,GAAG,CAAAV,qBAAA,GAAAT,UAAU,CAACoB,YAAY,cAAAX,qBAAA,eAAvBA,qBAAA,CAAyBnJ,KAAK,GACpD0I,UAAU,CAACoB,YAAY,CAAC9J,KAAK,KAAAoJ,sBAAA,GAAGV,UAAU,CAACoB,YAAY,cAAAV,sBAAA,uBAAvBA,sBAAA,CAAyBE,QAAQ,IACjE,CAAC;UAEL,MAAMS,mBAAmB,GACvB,OAAOrB,UAAU,CAACsB,SAAS,KAAK,WAAW,IAAItB,UAAU,CAACsB,SAAS;UAErE,MAAM5I,UAAU,GAAG2I,mBAAmB,GAClCR,cAAc,GACdC,gBAAgB,GAChBC,iBAAiB,GACjBE,cAAc,GACdE,iBAAiB,GACjB,CAAC;UACL,OAAO;YAAE,GAAGnB,UAAU;YAAEW,WAAW;YAAEjI;UAAW,CAAC;QACnD;QACA,OAAO6D,CAAC;MACV,CAAC,CAAC,CACH;IACH,CAAC,CACH,CAAC;EACH,CAAC;EACDgF,UAAU,EAAGpC,GAAG,IAAK;IACnB9I,GAAG,CACDrC,OAAO,CAAEqH,KAAsB,IAAK;MAClCA,KAAK,CAAC7F,KAAK,GAAG,CAAC,GAAG6F,KAAK,CAAC7F,KAAK,CAACuB,MAAM,CAAEwF,CAAC,IAAKA,CAAC,CAAC4C,GAAG,KAAKA,GAAG,CAAC,CAAC;IAC7D,CAAC,CACH,CAAC;EACH,CAAC;EACDqC,KAAK,EAAEA,CAAA,KAAM;IACXnL,GAAG,CAAEgF,KAAK,IAAK;MACboG,kBAAkB,CAACpN,OAAO,CAACqN,YAAY,CAAC,CAAC;MACzC,OAAO;QACL,GAAGrG,KAAK;QACRjG,KAAK,EAAE,EAAE;QACTC,UAAU,EAAE,EAAE;QACdG,KAAK,EAAE,EAAE;QACTF,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE,EAAE;QACZG,MAAM,EAAEiM;MACV,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EACDC,uBAAuB,EAAEA,CAAA,KAAM;IAC7BvL,GAAG,CAAEgF,KAAK,IAAK;MACboG,kBAAkB,CAACpN,OAAO,CAACqN,YAAY,CAAC,CAAC;MACzC,OAAO;QACL,GAAGrG,KAAK;QACRjG,KAAK,EAAE,EAAE;QACTC,UAAU,EAAE,EAAE;QACdG,KAAK,EAAE,EAAE;QACTF,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE,EAAE;QACZG,MAAM,EAAEiM,SAAS;QACjB1M,YAAY,EAAE,IAAI;QAClBE,WAAW,EAAE,IAAI;QACjBe,wBAAwB,EAAE;QAC1B;MACF,CAAC;IACH,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,OAAO,MAAMuL,kBAAkB,GAAGtN,MAAM,CAAsC,CAAC,CAC7EC,QAAQ,CACNC,OAAO,CACL,CAAC,GAAGwN,CAAC,MAAM;EACT,GAAGzL,gBAAgB,CAAC,GAAGyL,CAAC;AAC1B,CAAC,CAAC,EACF;EACEtH,IAAI,EAAE,EAAE;EACRuH,kBAAkB,EAAEA,CAAA,KAAOzG,KAAK,IAAK;IACnC,IAAIA,KAAK,EAAE;MACT;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IAAA;EAEJ;AACF,CACF,CACF,CACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}