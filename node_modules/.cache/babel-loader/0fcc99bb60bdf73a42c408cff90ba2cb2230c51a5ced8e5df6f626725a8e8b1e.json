{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Reian\\\\Desktop\\\\Work\\\\Freelance\\\\Boxxer World\\\\boxxerworld-shopify-frontend\\\\customiser\\\\src\\\\components\\\\nav\\\\NavText\\\\NavText.tsx\",\n  _s = $RefreshSig$();\nimport { useCustomiserStore } from '@store/customiser';\nimport { startTransition, useEffect, useMemo, useRef, useState } from 'react';\nimport NavDecalAdjust from '../NavDecalAdjust';\nimport styles from './NavText.module.scss';\nimport NavTextFinish from './NavTextFinish';\nimport NavTextNameTypes from './NavTextNameTypes';\nimport NavTextOutline from './NavTextOutline';\nimport NavTextSelect from './NavTextSelect';\nimport NavTextsSelection from './NavTextsSelection';\nimport NavTextPreview from './NavTextPreview';\nimport { usePortalRef } from '@hooks';\nimport Button from '@components/ui/Button';\nimport { createPortal } from 'react-dom';\nimport NavTextCategories from './NavTextCategories';\nimport NavTextNavSteps from './NavTextNavSteps';\nimport NavTextInput from './NavTextInput';\n\n// export interface NavTextProps {\n\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NavText = () => {\n  _s();\n  const [step, setStep] = useState(0);\n  const texts = useCustomiserStore(state => state.texts);\n  const updateText = useCustomiserStore(state => state.updateText);\n  const deleteText = useCustomiserStore(state => state.deleteText);\n  const updateIsMinimizedCustomiserNav = useCustomiserStore(state => state.updateIsMinimizedCustomiserNav);\n  const isMinimizedCustomiserNav = useCustomiserStore(state => state.isMinimizedCustomiserNav);\n  const editText = useMemo(() => texts === null || texts === void 0 ? void 0 : texts.find(g => g.edit), [texts]);\n  const [showSelector, setShowSelector] = useState((editText === null || editText === void 0 ? void 0 : editText.key) !== undefined);\n  const [isPickingOutline, setIsPickingOutline] = useState(false);\n  const [isPickingCrystal, setIsPickingCrystal] = useState(false);\n  const navHeaderRef = usePortalRef('NavHeader');\n  const popupContainerRef = usePortalRef('popupContainer');\n  const mainTextInputRef = useRef(null);\n  console.log('mainTextInputRef', mainTextInputRef);\n  const noOutlineSelected = step === 2 && isPickingOutline && !(editText !== null && editText !== void 0 && editText.outline);\n  const noCrystalSelected = step === 3 && isPickingCrystal && !(editText !== null && editText !== void 0 && editText.crystalBackground);\n  const hasFinishedAllSteps = step === 3 && ((editText === null || editText === void 0 ? void 0 : editText.crystalBackground) || !isPickingCrystal);\n  const hasFinishedStep1 = !!(editText !== null && editText !== void 0 && editText.text);\n  const hasFinishedStep2 = !!(editText !== null && editText !== void 0 && editText.material);\n  const hasFinishedStep3 = !!(editText !== null && editText !== void 0 && editText.outline);\n  const hasFinishedStep4 = !!(editText !== null && editText !== void 0 && editText.crystalBackground);\n  const finishedSteps = [hasFinishedStep1, hasFinishedStep2, !noOutlineSelected, !noCrystalSelected];\n  const isVisiblePrev = step !== 0;\n  const isClickableNext = finishedSteps[step || 0];\n  const saveAndApplyChecker = () => {\n    if (!hasFinishedStep1) {\n      alert('Please enter a text to continue');\n      setStep(0);\n      return false;\n    } else if (!hasFinishedStep2) {\n      alert('Select a text color to continue');\n      setStep(1);\n      return false;\n    }\n    return true;\n  };\n  useEffect(() => {\n    if (editText !== null && editText !== void 0 && editText.key) {\n      setShowSelector(true);\n    } else {\n      setShowSelector(false);\n    }\n  }, [editText]);\n  const addText = () => {\n    setShowSelector(true);\n  };\n  const setScale = event => {\n    startTransition(() => {\n      if (editText !== null && editText !== void 0 && editText.key) updateText(editText.key, {\n        decalScale: Number(event)\n      });\n    });\n  };\n  const setRotation = event => {\n    startTransition(() => {\n      if (editText !== null && editText !== void 0 && editText.key) updateText(editText.key, {\n        decalRotation: Number(event)\n      });\n    });\n  };\n  const placeText = () => {\n    if (isPickingCrystal && noCrystalSelected) {\n      alert('Select a crystal type');\n      return;\n    }\n    if (editText !== null && editText !== void 0 && editText.key && !(editText !== null && editText !== void 0 && editText.decalPosition)) {\n      updateText(editText.key, {\n        decalFreeze: true,\n        decalPosition: [-0.01989325641440387, 2.436930108198209, 1.6226380277735046],\n        decalOrientation: [-0.14799034762565572, -0.17866277612764514, -0.026487426629834374, 'XYZ']\n      });\n    }\n    updateIsMinimizedCustomiserNav(true);\n  };\n  const applyText = () => {\n    if (editText !== null && editText !== void 0 && editText.key) {\n      updateText(editText.key, {\n        decalFreeze: false,\n        edit: false,\n        hasApplied: true\n      });\n    }\n    setStep(0);\n    setShowSelector(false);\n  };\n  const cancelText = () => {\n    if (editText !== null && editText !== void 0 && editText.key && !(editText !== null && editText !== void 0 && editText.hasApplied)) {\n      deleteText(editText.key);\n    }\n    setStep(0);\n    setShowSelector(false);\n  };\n  const handleTitleClick = _step => {\n    if (_step === step) {\n      setStep(undefined);\n    } else {\n      setStep(_step);\n    }\n  };\n  const maxStep = 4;\n  const handleNext = () => {\n    if (step === undefined) {\n      setStep(0);\n    } else if (step < maxStep - 1) {\n      switch (step) {\n        case 0:\n          if (!(editText !== null && editText !== void 0 && editText.text)) {\n            alert('Please enter a text to continue');\n            return;\n          }\n          break;\n        case 1:\n          if (!(editText !== null && editText !== void 0 && editText.selectedName)) {\n            alert('Select a text color type');\n            return;\n          } else if (!(editText !== null && editText !== void 0 && editText.material)) {\n            alert('Select a color for text');\n            return;\n          }\n          break;\n        case 2:\n          if (isPickingOutline && !(editText !== null && editText !== void 0 && editText.outline)) {\n            alert('Select an outline');\n            return;\n          }\n          break;\n        default:\n          break;\n      }\n      console.log('editText', editText);\n      setStep(step + 1);\n    }\n  };\n  const handlePrevious = () => {\n    if (step === undefined) {\n      setStep(0);\n    } else if (step > 0) {\n      setStep(step - 1);\n    }\n  };\n  const navCategoryNames = ['Font', 'Color', 'Outline', 'Finish'];\n  const NavTextCategoriesItems = () => {\n    const handleOnClick = index => {\n      if (navCategoryNames[index] === 'Outline' || navCategoryNames[index] === 'Finish') {\n        if (!saveAndApplyChecker()) return;\n      }\n      if (!(editText !== null && editText !== void 0 && editText.text)) {\n        alert('Please enter a text to continue');\n        return;\n      }\n      handleTitleClick(index);\n    };\n    const finishedCategories = [hasFinishedStep1, hasFinishedStep2, hasFinishedStep3, hasFinishedStep4];\n    return navCategoryNames.map((name, index) => {\n      const isSelectedCategory = step === index;\n      const categoryClassNames = `\n        ${isSelectedCategory ? styles.selectedCategoryItem : ''}\n        ${finishedCategories[index] ? styles.finishedCategoryItem : ''}\n      `;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: categoryClassNames,\n        onClick: () => handleOnClick(index),\n        children: name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  const CategoryDisplay = () => {\n    switch (step) {\n      case 0:\n        return /*#__PURE__*/_jsxDEV(NavTextSelect, {\n          editText: editText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 16\n        }, this);\n      case 1:\n        return /*#__PURE__*/_jsxDEV(NavTextNameTypes, {\n          editText: editText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 16\n        }, this);\n      case 2:\n        return /*#__PURE__*/_jsxDEV(NavTextOutline, {\n          editText: editText,\n          setIsPickingOutline: setIsPickingOutline\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 16\n        }, this);\n      case 3:\n        return /*#__PURE__*/_jsxDEV(NavTextFinish, {\n          setIsPickingCrystal: setIsPickingCrystal,\n          editText: editText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this);\n      default:\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: showSelector ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.navTextEdit,\n      children: [/*#__PURE__*/_jsxDEV(NavTextPreview, {\n        editText: editText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(NavTextCategories, {\n        children: NavTextCategoriesItems()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }, this), CategoryDisplay(), /*#__PURE__*/_jsxDEV(NavTextNavSteps, {\n        onClickNext: handleNext,\n        onClickPrev: handlePrevious,\n        isVisiblePrev: isVisiblePrev,\n        isClickableNext: isClickableNext\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 11\n      }, this), (editText === null || editText === void 0 ? void 0 : editText.key) && editText.decalPosition && /*#__PURE__*/_jsxDEV(NavDecalAdjust, {\n        scale: editText === null || editText === void 0 ? void 0 : editText.decalScale,\n        rotation: editText === null || editText === void 0 ? void 0 : editText.decalRotation,\n        onScale: setScale,\n        onRotate: setRotation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 13\n      }, this), editText && isMinimizedCustomiserNav && navHeaderRef && hasFinishedAllSteps && /*#__PURE__*/createPortal( /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => {\n          if (!saveAndApplyChecker()) {\n            return updateIsMinimizedCustomiserNav(false);\n          }\n          applyText();\n          updateIsMinimizedCustomiserNav(false);\n        },\n        colour: \"red\",\n        className: styles.navHeaderSaveText,\n        children: \"SAVE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 15\n      }, this), navHeaderRef), popupContainerRef && /*#__PURE__*/createPortal( /*#__PURE__*/_jsxDEV(NavTextInput, {\n        ref: mainTextInputRef,\n        editText: editText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 15\n      }, this), popupContainerRef)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(NavTextsSelection, {\n        onAddTextClicked: addText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)\n  }, void 0, false);\n};\n_s(NavText, \"R5MXOn0q75DAShURtVrUQgSlyHc=\", false, function () {\n  return [useCustomiserStore, useCustomiserStore, useCustomiserStore, useCustomiserStore, useCustomiserStore, usePortalRef, usePortalRef];\n});\n_c = NavText;\nexport default NavText;\nvar _c;\n$RefreshReg$(_c, \"NavText\");","map":{"version":3,"names":["useCustomiserStore","startTransition","useEffect","useMemo","useRef","useState","NavDecalAdjust","styles","NavTextFinish","NavTextNameTypes","NavTextOutline","NavTextSelect","NavTextsSelection","NavTextPreview","usePortalRef","Button","createPortal","NavTextCategories","NavTextNavSteps","NavTextInput","jsxDEV","_jsxDEV","Fragment","_Fragment","NavText","_s","step","setStep","texts","state","updateText","deleteText","updateIsMinimizedCustomiserNav","isMinimizedCustomiserNav","editText","find","g","edit","showSelector","setShowSelector","key","undefined","isPickingOutline","setIsPickingOutline","isPickingCrystal","setIsPickingCrystal","navHeaderRef","popupContainerRef","mainTextInputRef","console","log","noOutlineSelected","outline","noCrystalSelected","crystalBackground","hasFinishedAllSteps","hasFinishedStep1","text","hasFinishedStep2","material","hasFinishedStep3","hasFinishedStep4","finishedSteps","isVisiblePrev","isClickableNext","saveAndApplyChecker","alert","addText","setScale","event","decalScale","Number","setRotation","decalRotation","placeText","decalPosition","decalFreeze","decalOrientation","applyText","hasApplied","cancelText","handleTitleClick","_step","maxStep","handleNext","selectedName","handlePrevious","navCategoryNames","NavTextCategoriesItems","handleOnClick","index","finishedCategories","map","name","isSelectedCategory","categoryClassNames","selectedCategoryItem","finishedCategoryItem","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","CategoryDisplay","navTextEdit","onClickNext","onClickPrev","scale","rotation","onScale","onRotate","colour","navHeaderSaveText","ref","onAddTextClicked","_c","$RefreshReg$"],"sources":["C:/Users/Reian/Desktop/Work/Freelance/Boxxer World/boxxerworld-shopify-frontend/customiser/src/components/nav/NavText/NavText.tsx"],"sourcesContent":["import { useCustomiserStore } from '@store/customiser';\r\nimport { startTransition, useEffect, useMemo, useRef, useState } from 'react';\r\nimport NavDecalAdjust from '../NavDecalAdjust';\r\n\r\nimport Accordion from '@components/ui/Accordion/Accordion';\r\nimport NavStepButtons from '../NavStepButtons';\r\nimport styles from './NavText.module.scss';\r\nimport NavTextFinish from './NavTextFinish';\r\nimport NavTextNameTypes from './NavTextNameTypes';\r\nimport NavTextOutline from './NavTextOutline';\r\nimport NavTextSelect from './NavTextSelect';\r\nimport NavTextsSelection from './NavTextsSelection';\r\nimport NavTextPreview from './NavTextPreview';\r\nimport { usePortalRef } from '@hooks';\r\nimport Button from '@components/ui/Button';\r\nimport { createPortal } from 'react-dom';\r\nimport NavTextCategories from './NavTextCategories';\r\nimport NavTextNavSteps from './NavTextNavSteps';\r\nimport { has } from 'lodash';\r\nimport FormInput from '@components/ui/FormInput';\r\nimport NavTextInput from './NavTextInput';\r\n\r\n// export interface NavTextProps {\r\n\r\n// }\r\n\r\nconst NavText = () => {\r\n  const [step, setStep] = useState<number | undefined>(0);\r\n\r\n  const texts = useCustomiserStore((state) => state.texts);\r\n  const updateText = useCustomiserStore((state) => state.updateText);\r\n  const deleteText = useCustomiserStore((state) => state.deleteText);\r\n  const updateIsMinimizedCustomiserNav = useCustomiserStore(\r\n    (state) => state.updateIsMinimizedCustomiserNav,\r\n  );\r\n  const isMinimizedCustomiserNav = useCustomiserStore((state) => state.isMinimizedCustomiserNav);\r\n  const editText = useMemo(() => texts?.find((g) => g.edit), [texts]);\r\n  const [showSelector, setShowSelector] = useState(editText?.key !== undefined);\r\n  const [isPickingOutline, setIsPickingOutline] = useState(false);\r\n  const [isPickingCrystal, setIsPickingCrystal] = useState(false);\r\n  const navHeaderRef = usePortalRef('NavHeader');\r\n  const popupContainerRef = usePortalRef('popupContainer');\r\n\r\n  const mainTextInputRef = useRef<HTMLInputElement | null>(null);\r\n  console.log('mainTextInputRef', mainTextInputRef);\r\n\r\n  const noOutlineSelected = step === 2 && isPickingOutline && !editText?.outline;\r\n  const noCrystalSelected = step === 3 && isPickingCrystal && !editText?.crystalBackground;\r\n  const hasFinishedAllSteps = step === 3 && (editText?.crystalBackground || !isPickingCrystal);\r\n\r\n  const hasFinishedStep1 = !!editText?.text;\r\n  const hasFinishedStep2 = !!editText?.material;\r\n  const hasFinishedStep3 = !!editText?.outline;\r\n  const hasFinishedStep4 = !!editText?.crystalBackground;\r\n\r\n  const finishedSteps = [\r\n    hasFinishedStep1,\r\n    hasFinishedStep2,\r\n    !noOutlineSelected,\r\n    !noCrystalSelected,\r\n  ];\r\n\r\n  const isVisiblePrev = step !== 0;\r\n  const isClickableNext = finishedSteps[step || 0];\r\n\r\n  const saveAndApplyChecker = () => {\r\n    if (!hasFinishedStep1) {\r\n      alert('Please enter a text to continue');\r\n      setStep(0);\r\n      return false;\r\n    } else if (!hasFinishedStep2) {\r\n      alert('Select a text color to continue');\r\n      setStep(1);\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (editText?.key) {\r\n      setShowSelector(true);\r\n    } else {\r\n      setShowSelector(false);\r\n    }\r\n  }, [editText]);\r\n\r\n  const addText = () => {\r\n    setShowSelector(true);\r\n  };\r\n\r\n  const setScale = (event: number) => {\r\n    startTransition(() => {\r\n      if (editText?.key) updateText(editText.key, { decalScale: Number(event) });\r\n    });\r\n  };\r\n\r\n  const setRotation = (event: number) => {\r\n    startTransition(() => {\r\n      if (editText?.key) updateText(editText.key, { decalRotation: Number(event) });\r\n    });\r\n  };\r\n\r\n  const placeText = () => {\r\n    if (isPickingCrystal && noCrystalSelected) {\r\n      alert('Select a crystal type');\r\n      return;\r\n    }\r\n    if (editText?.key && !editText?.decalPosition) {\r\n      updateText(editText.key, {\r\n        decalFreeze: true,\r\n        decalPosition: [-0.01989325641440387, 2.436930108198209, 1.6226380277735046],\r\n        decalOrientation: [\r\n          -0.14799034762565572,\r\n          -0.17866277612764514,\r\n          -0.026487426629834374,\r\n          'XYZ',\r\n        ],\r\n      });\r\n    }\r\n    updateIsMinimizedCustomiserNav(true);\r\n  };\r\n\r\n  const applyText = () => {\r\n    if (editText?.key) {\r\n      updateText(editText.key, {\r\n        decalFreeze: false,\r\n        edit: false,\r\n        hasApplied: true,\r\n      });\r\n    }\r\n\r\n    setStep(0);\r\n\r\n    setShowSelector(false);\r\n  };\r\n\r\n  const cancelText = () => {\r\n    if (editText?.key && !editText?.hasApplied) {\r\n      deleteText(editText.key);\r\n    }\r\n\r\n    setStep(0);\r\n\r\n    setShowSelector(false);\r\n  };\r\n\r\n  const handleTitleClick = (_step: number | string) => {\r\n    if (_step === step) {\r\n      setStep(undefined);\r\n    } else {\r\n      setStep(_step as number);\r\n    }\r\n  };\r\n\r\n  const maxStep = 4;\r\n\r\n  const handleNext = () => {\r\n    if (step === undefined) {\r\n      setStep(0);\r\n    } else if (step < maxStep - 1) {\r\n      switch (step) {\r\n        case 0:\r\n          if (!editText?.text) {\r\n            alert('Please enter a text to continue');\r\n            return;\r\n          }\r\n          break;\r\n        case 1:\r\n          if (!editText?.selectedName) {\r\n            alert('Select a text color type');\r\n            return;\r\n          } else if (!editText?.material) {\r\n            alert('Select a color for text');\r\n            return;\r\n          }\r\n          break;\r\n        case 2:\r\n          if (isPickingOutline && !editText?.outline) {\r\n            alert('Select an outline');\r\n            return;\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      console.log('editText', editText);\r\n      setStep(step + 1);\r\n    }\r\n  };\r\n\r\n  const handlePrevious = () => {\r\n    if (step === undefined) {\r\n      setStep(0);\r\n    } else if (step > 0) {\r\n      setStep(step - 1);\r\n    }\r\n  };\r\n\r\n  const navCategoryNames = ['Font', 'Color', 'Outline', 'Finish'];\r\n  const NavTextCategoriesItems = () => {\r\n    const handleOnClick = (index: number) => {\r\n      if (navCategoryNames[index] === 'Outline' || navCategoryNames[index] === 'Finish') {\r\n        if (!saveAndApplyChecker()) return;\r\n      }\r\n      if (!editText?.text) {\r\n        alert('Please enter a text to continue');\r\n        return;\r\n      }\r\n      handleTitleClick(index);\r\n    };\r\n\r\n    const finishedCategories = [\r\n      hasFinishedStep1,\r\n      hasFinishedStep2,\r\n      hasFinishedStep3,\r\n      hasFinishedStep4,\r\n    ];\r\n\r\n    return navCategoryNames.map((name, index) => {\r\n      const isSelectedCategory = step === index;\r\n      const categoryClassNames = `\r\n        ${isSelectedCategory ? styles.selectedCategoryItem : ''}\r\n        ${finishedCategories[index] ? styles.finishedCategoryItem : ''}\r\n      `;\r\n      return (\r\n        <div key={index} className={categoryClassNames} onClick={() => handleOnClick(index)}>\r\n          {name}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  const CategoryDisplay = () => {\r\n    switch (step) {\r\n      case 0:\r\n        return <NavTextSelect editText={editText} />;\r\n      case 1:\r\n        return <NavTextNameTypes editText={editText} />;\r\n      case 2:\r\n        return <NavTextOutline editText={editText} setIsPickingOutline={setIsPickingOutline} />;\r\n      case 3:\r\n        return (\r\n          <NavTextFinish\r\n            setIsPickingCrystal={setIsPickingCrystal}\r\n            editText={editText}\r\n          ></NavTextFinish>\r\n        );\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {showSelector ? (\r\n        <div className={styles.navTextEdit}>\r\n          <NavTextPreview editText={editText} />\r\n          <NavTextCategories>{NavTextCategoriesItems()}</NavTextCategories>\r\n          {CategoryDisplay()}\r\n\r\n          {/* <Accordion\r\n            step={0}\r\n            title='Text and Font'\r\n            hasFinishedStep={hasFinishedStep1}\r\n            currentStep={step ?? -1}\r\n            onTitleClick={handleTitleClick}\r\n          >\r\n            <NavTextSelect editText={editText} />\r\n          </Accordion>\r\n          <Accordion\r\n            step={1}\r\n            title='Text Color'\r\n            hasFinishedStep={hasFinishedStep2}\r\n            currentStep={step ?? -1}\r\n            onTitleClick={handleTitleClick}\r\n          >\r\n            <NavTextNameTypes editText={editText} />\r\n          </Accordion>\r\n          <Accordion\r\n            step={2}\r\n            title='Outline'\r\n            hasFinishedStep={hasFinishedStep3}\r\n            currentStep={step ?? -1}\r\n            onTitleClick={() => {\r\n              if (!saveAndApplyChecker()) return;\r\n              handleTitleClick(2);\r\n            }}\r\n          >\r\n            <NavTextOutline editText={editText} setIsPickingOutline={setIsPickingOutline} />\r\n          </Accordion>\r\n          <Accordion\r\n            step={3}\r\n            title='Finish'\r\n            currentStep={step ?? -1}\r\n            hasFinishedStep={hasFinishedStep4}\r\n            onTitleClick={() => {\r\n              if (!saveAndApplyChecker()) return;\r\n              handleTitleClick(3);\r\n            }}\r\n          >\r\n            <NavTextFinish\r\n              setIsPickingCrystal={setIsPickingCrystal}\r\n              editText={editText}\r\n            ></NavTextFinish>\r\n          </Accordion> */}\r\n          {/* <NavStepButtons\r\n            step={step}\r\n            maxStep={maxStep - 1}\r\n            onNext={handleNext}\r\n            onPrevious={handlePrevious}\r\n            onApply={applyText}\r\n            onCancel={cancelText}\r\n            onPlace={() => {\r\n              if (!saveAndApplyChecker()) return;\r\n              placeText();\r\n            }}\r\n            editText={editText}\r\n            noCrystalSelected={noCrystalSelected}\r\n          /> */}\r\n          <NavTextNavSteps\r\n            onClickNext={handleNext}\r\n            onClickPrev={handlePrevious}\r\n            isVisiblePrev={isVisiblePrev}\r\n            isClickableNext={isClickableNext}\r\n          />\r\n          {editText?.key && editText.decalPosition && (\r\n            <NavDecalAdjust\r\n              scale={editText?.decalScale}\r\n              rotation={editText?.decalRotation}\r\n              onScale={setScale}\r\n              onRotate={setRotation}\r\n            />\r\n          )}\r\n          {editText &&\r\n            isMinimizedCustomiserNav &&\r\n            navHeaderRef &&\r\n            hasFinishedAllSteps &&\r\n            createPortal(\r\n              <Button\r\n                onClick={() => {\r\n                  if (!saveAndApplyChecker()) {\r\n                    return updateIsMinimizedCustomiserNav(false);\r\n                  }\r\n\r\n                  applyText();\r\n                  updateIsMinimizedCustomiserNav(false);\r\n                }}\r\n                colour='red'\r\n                className={styles.navHeaderSaveText}\r\n              >\r\n                SAVE\r\n              </Button>,\r\n              navHeaderRef,\r\n            )}\r\n          {popupContainerRef &&\r\n            createPortal(\r\n              <NavTextInput ref={mainTextInputRef} editText={editText} />,\r\n              popupContainerRef,\r\n            )}\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <NavTextsSelection onAddTextClicked={addText}></NavTextsSelection>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavText;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}