{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Reian\\\\Desktop\\\\Work\\\\Freelance\\\\Boxxer World\\\\boxxerworld-shopify-frontend\\\\customiser\\\\src\\\\components\\\\nav\\\\NavText\\\\NavText.tsx\",\n  _s = $RefreshSig$();\nimport { useCustomiserStore } from '@store/customiser';\nimport { startTransition, useEffect, useMemo, useState } from 'react';\nimport NavDecalAdjust from '../NavDecalAdjust';\nimport Accordion from '@components/ui/Accordion/Accordion';\nimport NavStepButtons from '../NavStepButtons';\nimport styles from './NavText.module.scss';\nimport NavTextFinish from './NavTextFinish';\nimport NavTextNameTypes from './NavTextNameTypes';\nimport NavTextOutline from './NavTextOutline';\nimport NavTextSelect from './NavTextSelect';\nimport NavTextsSelection from './NavTextsSelection';\nimport NavTextPreview from './NavTextPreview';\nimport { usePortalRef } from '@hooks';\nimport Button from '@components/ui/Button';\nimport { createPortal } from 'react-dom';\n\n// export interface NavTextProps {\n\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NavText = () => {\n  _s();\n  const [step, setStep] = useState(0);\n  const texts = useCustomiserStore(state => state.texts);\n  const updateText = useCustomiserStore(state => state.updateText);\n  const deleteText = useCustomiserStore(state => state.deleteText);\n  const updateIsMinimizedCustomiserNav = useCustomiserStore(state => state.updateIsMinimizedCustomiserNav);\n  const isMinimizedCustomiserNav = useCustomiserStore(state => state.isMinimizedCustomiserNav);\n  const editText = useMemo(() => texts === null || texts === void 0 ? void 0 : texts.find(g => g.edit), [texts]);\n  const [showSelector, setShowSelector] = useState((editText === null || editText === void 0 ? void 0 : editText.key) !== undefined);\n  const [isPickingOutline, setIsPickingOutline] = useState(false);\n  const [isPickingCrystal, setIsPickingCrystal] = useState(false);\n  const navHeaderRef = usePortalRef('NavHeader');\n  const noCrystalSelected = step === 3 && isPickingCrystal && !(editText !== null && editText !== void 0 && editText.crystalBackground);\n  const hasFinishedAllSteps = step === 3 && ((editText === null || editText === void 0 ? void 0 : editText.crystalBackground) || !isPickingCrystal);\n  const hasFinishedStep1 = !!(editText !== null && editText !== void 0 && editText.text);\n  const hasFinishedStep2 = !!(editText !== null && editText !== void 0 && editText.material);\n  const hasFinishedStep3 = !!(editText !== null && editText !== void 0 && editText.outline);\n  const hasFinishedStep4 = !!(editText !== null && editText !== void 0 && editText.crystalBackground);\n  const saveAndApplyChecker = () => {\n    if (!hasFinishedStep1) {\n      alert('Please enter a text to continue');\n      setStep(0);\n      return false;\n    } else if (!hasFinishedStep2) {\n      alert('Select a text color to continue');\n      setStep(1);\n      return false;\n    }\n    return true;\n  };\n  useEffect(() => {\n    if (editText !== null && editText !== void 0 && editText.key) {\n      setShowSelector(true);\n    } else {\n      setShowSelector(false);\n    }\n  }, [editText]);\n  const addText = () => {\n    setShowSelector(true);\n  };\n  const setScale = event => {\n    startTransition(() => {\n      if (editText !== null && editText !== void 0 && editText.key) updateText(editText.key, {\n        decalScale: Number(event)\n      });\n    });\n  };\n  const setRotation = event => {\n    startTransition(() => {\n      if (editText !== null && editText !== void 0 && editText.key) updateText(editText.key, {\n        decalRotation: Number(event)\n      });\n    });\n  };\n  const placeText = () => {\n    if (noCrystalSelected) {\n      alert('Select a crystal type');\n      return;\n    }\n    if (editText !== null && editText !== void 0 && editText.key && !(editText !== null && editText !== void 0 && editText.decalPosition)) {\n      updateText(editText.key, {\n        decalFreeze: true,\n        decalPosition: [-0.01989325641440387, 2.436930108198209, 1.6226380277735046],\n        decalOrientation: [-0.14799034762565572, -0.17866277612764514, -0.026487426629834374, 'XYZ']\n      });\n    }\n    updateIsMinimizedCustomiserNav(true);\n  };\n  const applyText = () => {\n    if (editText !== null && editText !== void 0 && editText.key) {\n      updateText(editText.key, {\n        decalFreeze: false,\n        edit: false,\n        hasApplied: true\n      });\n    }\n    setStep(0);\n    setShowSelector(false);\n  };\n  const cancelText = () => {\n    if (editText !== null && editText !== void 0 && editText.key && !(editText !== null && editText !== void 0 && editText.hasApplied)) {\n      deleteText(editText.key);\n    }\n    setStep(0);\n    setShowSelector(false);\n  };\n  const handleTitleClick = _step => {\n    if (_step === step) {\n      setStep(undefined);\n    } else {\n      setStep(_step);\n    }\n  };\n  const maxStep = 4;\n  const handleNext = () => {\n    if (step === undefined) {\n      setStep(0);\n    } else if (step < maxStep - 1) {\n      switch (step) {\n        case 0:\n          if (!(editText !== null && editText !== void 0 && editText.text)) {\n            alert('Please enter a text to continue');\n            return;\n          }\n          break;\n        case 1:\n          if (!(editText !== null && editText !== void 0 && editText.selectedName)) {\n            alert('Select a text color type');\n            return;\n          } else if (!(editText !== null && editText !== void 0 && editText.material)) {\n            alert('Select a color for text');\n            return;\n          }\n          break;\n        case 2:\n          if (isPickingOutline && !(editText !== null && editText !== void 0 && editText.outline)) {\n            alert('Select an outline');\n            return;\n          }\n          break;\n        default:\n          break;\n      }\n      console.log('editText', editText);\n      setStep(step + 1);\n    }\n  };\n  const handlePrevious = () => {\n    if (step === undefined) {\n      setStep(0);\n    } else if (step > 0) {\n      setStep(step - 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: showSelector ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.navTextEdit,\n      children: [/*#__PURE__*/_jsxDEV(NavTextPreview, {\n        editText: editText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n        step: 0,\n        title: \"Text and Font\",\n        hasFinishedStep: hasFinishedStep1,\n        currentStep: step !== null && step !== void 0 ? step : -1,\n        onTitleClick: handleTitleClick,\n        children: /*#__PURE__*/_jsxDEV(NavTextSelect, {\n          editText: editText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n        step: 1,\n        title: \"Text Color\",\n        hasFinishedStep: hasFinishedStep2,\n        currentStep: step !== null && step !== void 0 ? step : -1,\n        onTitleClick: handleTitleClick,\n        children: /*#__PURE__*/_jsxDEV(NavTextNameTypes, {\n          editText: editText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n        step: 2,\n        title: \"Outline\",\n        currentStep: step !== null && step !== void 0 ? step : -1,\n        onTitleClick: () => {\n          if (!saveAndApplyChecker()) return;\n          handleTitleClick(2);\n        },\n        children: /*#__PURE__*/_jsxDEV(NavTextOutline, {\n          editText: editText,\n          setIsPickingOutline: setIsPickingOutline\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n        step: 3,\n        title: \"Finish\",\n        currentStep: step !== null && step !== void 0 ? step : -1,\n        onTitleClick: () => {\n          if (!saveAndApplyChecker()) return;\n          handleTitleClick(3);\n        },\n        children: /*#__PURE__*/_jsxDEV(NavTextFinish, {\n          setIsPickingCrystal: setIsPickingCrystal,\n          editText: editText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(NavStepButtons, {\n        step: step,\n        maxStep: maxStep - 1,\n        onNext: handleNext,\n        onPrevious: handlePrevious,\n        onApply: applyText,\n        onCancel: cancelText,\n        onPlace: () => {\n          if (!saveAndApplyChecker()) return;\n          placeText;\n        },\n        editText: editText,\n        noCrystalSelected: noCrystalSelected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this), (editText === null || editText === void 0 ? void 0 : editText.key) && editText.decalPosition && /*#__PURE__*/_jsxDEV(NavDecalAdjust, {\n        scale: editText === null || editText === void 0 ? void 0 : editText.decalScale,\n        rotation: editText === null || editText === void 0 ? void 0 : editText.decalRotation,\n        onScale: setScale,\n        onRotate: setRotation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 13\n      }, this), editText && isMinimizedCustomiserNav && navHeaderRef && hasFinishedAllSteps && /*#__PURE__*/createPortal( /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => {\n          if (!saveAndApplyChecker()) {\n            return updateIsMinimizedCustomiserNav(false);\n          }\n          applyText();\n          updateIsMinimizedCustomiserNav(false);\n        },\n        colour: \"red\",\n        className: styles.navHeaderSaveText,\n        children: \"SAVE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 15\n      }, this), navHeaderRef)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(NavTextsSelection, {\n        onAddTextClicked: addText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)\n  }, void 0, false);\n};\n_s(NavText, \"xSy3vvFLTI6l3eyWbOiroa5Jm84=\", false, function () {\n  return [useCustomiserStore, useCustomiserStore, useCustomiserStore, useCustomiserStore, useCustomiserStore, usePortalRef];\n});\n_c = NavText;\nexport default NavText;\nvar _c;\n$RefreshReg$(_c, \"NavText\");","map":{"version":3,"names":["useCustomiserStore","startTransition","useEffect","useMemo","useState","NavDecalAdjust","Accordion","NavStepButtons","styles","NavTextFinish","NavTextNameTypes","NavTextOutline","NavTextSelect","NavTextsSelection","NavTextPreview","usePortalRef","Button","createPortal","jsxDEV","_jsxDEV","Fragment","_Fragment","NavText","_s","step","setStep","texts","state","updateText","deleteText","updateIsMinimizedCustomiserNav","isMinimizedCustomiserNav","editText","find","g","edit","showSelector","setShowSelector","key","undefined","isPickingOutline","setIsPickingOutline","isPickingCrystal","setIsPickingCrystal","navHeaderRef","noCrystalSelected","crystalBackground","hasFinishedAllSteps","hasFinishedStep1","text","hasFinishedStep2","material","hasFinishedStep3","outline","hasFinishedStep4","saveAndApplyChecker","alert","addText","setScale","event","decalScale","Number","setRotation","decalRotation","placeText","decalPosition","decalFreeze","decalOrientation","applyText","hasApplied","cancelText","handleTitleClick","_step","maxStep","handleNext","selectedName","console","log","handlePrevious","children","className","navTextEdit","fileName","_jsxFileName","lineNumber","columnNumber","title","hasFinishedStep","currentStep","onTitleClick","onNext","onPrevious","onApply","onCancel","onPlace","scale","rotation","onScale","onRotate","onClick","colour","navHeaderSaveText","onAddTextClicked","_c","$RefreshReg$"],"sources":["C:/Users/Reian/Desktop/Work/Freelance/Boxxer World/boxxerworld-shopify-frontend/customiser/src/components/nav/NavText/NavText.tsx"],"sourcesContent":["import { useCustomiserStore } from '@store/customiser';\r\nimport { startTransition, useEffect, useMemo, useState } from 'react';\r\nimport NavDecalAdjust from '../NavDecalAdjust';\r\n\r\nimport Accordion from '@components/ui/Accordion/Accordion';\r\nimport NavStepButtons from '../NavStepButtons';\r\nimport styles from './NavText.module.scss';\r\nimport NavTextFinish from './NavTextFinish';\r\nimport NavTextNameTypes from './NavTextNameTypes';\r\nimport NavTextOutline from './NavTextOutline';\r\nimport NavTextSelect from './NavTextSelect';\r\nimport NavTextsSelection from './NavTextsSelection';\r\nimport NavTextPreview from './NavTextPreview';\r\nimport { usePortalRef } from '@hooks';\r\nimport Button from '@components/ui/Button';\r\nimport { createPortal } from 'react-dom';\r\n\r\n// export interface NavTextProps {\r\n\r\n// }\r\n\r\nconst NavText = () => {\r\n  const [step, setStep] = useState<number | undefined>(0);\r\n\r\n  const texts = useCustomiserStore((state) => state.texts);\r\n  const updateText = useCustomiserStore((state) => state.updateText);\r\n  const deleteText = useCustomiserStore((state) => state.deleteText);\r\n  const updateIsMinimizedCustomiserNav = useCustomiserStore(\r\n    (state) => state.updateIsMinimizedCustomiserNav,\r\n  );\r\n  const isMinimizedCustomiserNav = useCustomiserStore((state) => state.isMinimizedCustomiserNav);\r\n  const editText = useMemo(() => texts?.find((g) => g.edit), [texts]);\r\n  const [showSelector, setShowSelector] = useState(editText?.key !== undefined);\r\n  const [isPickingOutline, setIsPickingOutline] = useState(false);\r\n  const [isPickingCrystal, setIsPickingCrystal] = useState(false);\r\n  const navHeaderRef = usePortalRef('NavHeader');\r\n\r\n  const noCrystalSelected = step === 3 && isPickingCrystal && !editText?.crystalBackground;\r\n  const hasFinishedAllSteps = step === 3 && (editText?.crystalBackground || !isPickingCrystal);\r\n\r\n  const hasFinishedStep1 = !!editText?.text;\r\n  const hasFinishedStep2 = !!editText?.material;\r\n  const hasFinishedStep3 = !!editText?.outline;\r\n  const hasFinishedStep4 = !!editText?.crystalBackground;\r\n\r\n  const saveAndApplyChecker = () => {\r\n    if (!hasFinishedStep1) {\r\n      alert('Please enter a text to continue');\r\n      setStep(0);\r\n      return false;\r\n    } else if (!hasFinishedStep2) {\r\n      alert('Select a text color to continue');\r\n      setStep(1);\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (editText?.key) {\r\n      setShowSelector(true);\r\n    } else {\r\n      setShowSelector(false);\r\n    }\r\n  }, [editText]);\r\n\r\n  const addText = () => {\r\n    setShowSelector(true);\r\n  };\r\n\r\n  const setScale = (event: number) => {\r\n    startTransition(() => {\r\n      if (editText?.key) updateText(editText.key, { decalScale: Number(event) });\r\n    });\r\n  };\r\n\r\n  const setRotation = (event: number) => {\r\n    startTransition(() => {\r\n      if (editText?.key) updateText(editText.key, { decalRotation: Number(event) });\r\n    });\r\n  };\r\n\r\n  const placeText = () => {\r\n    if (noCrystalSelected) {\r\n      alert('Select a crystal type');\r\n      return;\r\n    }\r\n    if (editText?.key && !editText?.decalPosition) {\r\n      updateText(editText.key, {\r\n        decalFreeze: true,\r\n        decalPosition: [-0.01989325641440387, 2.436930108198209, 1.6226380277735046],\r\n        decalOrientation: [\r\n          -0.14799034762565572,\r\n          -0.17866277612764514,\r\n          -0.026487426629834374,\r\n          'XYZ',\r\n        ],\r\n      });\r\n    }\r\n    updateIsMinimizedCustomiserNav(true);\r\n  };\r\n\r\n  const applyText = () => {\r\n    if (editText?.key) {\r\n      updateText(editText.key, {\r\n        decalFreeze: false,\r\n        edit: false,\r\n        hasApplied: true,\r\n      });\r\n    }\r\n\r\n    setStep(0);\r\n\r\n    setShowSelector(false);\r\n  };\r\n\r\n  const cancelText = () => {\r\n    if (editText?.key && !editText?.hasApplied) {\r\n      deleteText(editText.key);\r\n    }\r\n\r\n    setStep(0);\r\n\r\n    setShowSelector(false);\r\n  };\r\n\r\n  const handleTitleClick = (_step: number | string) => {\r\n    if (_step === step) {\r\n      setStep(undefined);\r\n    } else {\r\n      setStep(_step as number);\r\n    }\r\n  };\r\n\r\n  const maxStep = 4;\r\n\r\n  const handleNext = () => {\r\n    if (step === undefined) {\r\n      setStep(0);\r\n    } else if (step < maxStep - 1) {\r\n      switch (step) {\r\n        case 0:\r\n          if (!editText?.text) {\r\n            alert('Please enter a text to continue');\r\n            return;\r\n          }\r\n          break;\r\n        case 1:\r\n          if (!editText?.selectedName) {\r\n            alert('Select a text color type');\r\n            return;\r\n          } else if (!editText?.material) {\r\n            alert('Select a color for text');\r\n            return;\r\n          }\r\n          break;\r\n        case 2:\r\n          if (isPickingOutline && !editText?.outline) {\r\n            alert('Select an outline');\r\n            return;\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n\r\n      console.log('editText', editText);\r\n      setStep(step + 1);\r\n    }\r\n  };\r\n\r\n  const handlePrevious = () => {\r\n    if (step === undefined) {\r\n      setStep(0);\r\n    } else if (step > 0) {\r\n      setStep(step - 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {showSelector ? (\r\n        <div className={styles.navTextEdit}>\r\n          <NavTextPreview editText={editText} />\r\n          <Accordion\r\n            step={0}\r\n            title='Text and Font'\r\n            hasFinishedStep={hasFinishedStep1}\r\n            currentStep={step ?? -1}\r\n            onTitleClick={handleTitleClick}\r\n          >\r\n            <NavTextSelect editText={editText} />\r\n          </Accordion>\r\n          <Accordion\r\n            step={1}\r\n            title='Text Color'\r\n            hasFinishedStep={hasFinishedStep2}\r\n            currentStep={step ?? -1}\r\n            onTitleClick={handleTitleClick}\r\n          >\r\n            <NavTextNameTypes editText={editText} />\r\n          </Accordion>\r\n          <Accordion\r\n            step={2}\r\n            title='Outline'\r\n            currentStep={step ?? -1}\r\n            onTitleClick={() => {\r\n              if (!saveAndApplyChecker()) return;\r\n              handleTitleClick(2);\r\n            }}\r\n          >\r\n            <NavTextOutline editText={editText} setIsPickingOutline={setIsPickingOutline} />\r\n          </Accordion>\r\n          <Accordion\r\n            step={3}\r\n            title='Finish'\r\n            currentStep={step ?? -1}\r\n            onTitleClick={() => {\r\n              if (!saveAndApplyChecker()) return;\r\n              handleTitleClick(3);\r\n            }}\r\n          >\r\n            <NavTextFinish\r\n              setIsPickingCrystal={setIsPickingCrystal}\r\n              editText={editText}\r\n            ></NavTextFinish>\r\n          </Accordion>\r\n          <NavStepButtons\r\n            step={step}\r\n            maxStep={maxStep - 1}\r\n            onNext={handleNext}\r\n            onPrevious={handlePrevious}\r\n            onApply={applyText}\r\n            onCancel={cancelText}\r\n            onPlace={() => {\r\n              if (!saveAndApplyChecker()) return;\r\n              placeText;\r\n            }}\r\n            editText={editText}\r\n            noCrystalSelected={noCrystalSelected}\r\n          />\r\n          {editText?.key && editText.decalPosition && (\r\n            <NavDecalAdjust\r\n              scale={editText?.decalScale}\r\n              rotation={editText?.decalRotation}\r\n              onScale={setScale}\r\n              onRotate={setRotation}\r\n            />\r\n          )}\r\n          {editText &&\r\n            isMinimizedCustomiserNav &&\r\n            navHeaderRef &&\r\n            hasFinishedAllSteps &&\r\n            createPortal(\r\n              <Button\r\n                onClick={() => {\r\n                  if (!saveAndApplyChecker()) {\r\n                    return updateIsMinimizedCustomiserNav(false);\r\n                  }\r\n\r\n                  applyText();\r\n                  updateIsMinimizedCustomiserNav(false);\r\n                }}\r\n                colour='red'\r\n                className={styles.navHeaderSaveText}\r\n              >\r\n                SAVE\r\n              </Button>,\r\n              navHeaderRef,\r\n            )}\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <NavTextsSelection onAddTextClicked={addText}></NavTextsSelection>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavText;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}