{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Reian\\\\Desktop\\\\Work\\\\Freelance\\\\Boxxer World\\\\boxxerworld-shopify-frontend\\\\customiser\\\\src\\\\components\\\\three\\\\CustomiserCanvas\\\\NavTextScene.tsx\",\n  _s = $RefreshSig$();\nimport { Decal } from '@react-three/drei';\nimport { Texture, Vector2, Vector3 } from 'three';\nimport Lights from '../Lights';\nimport { Canvas } from '@react-three/fiber';\nimport { useRef, useState } from 'react';\nimport { usePortalRef } from '@hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NavTextPreviewScene = ({\n  text\n}) => {\n  _s();\n  var _text$selectedName, _text$selectedName2, _text$selectedName2$a;\n  const canvasRef = useRef(null);\n  const [shouldShow, setShouldShow] = useState(false);\n  const [dataUrl, setDataUrl] = useState('');\n  const portalRef = usePortalRef('iInfoContainer');\n  const scale = 10;\n  const scaleModifier = new Vector3(3.2 * scale, 0.4 * scale, 4);\n  const isLuxury = ((_text$selectedName = text.selectedName) === null || _text$selectedName === void 0 ? void 0 : _text$selectedName.id) === '2' ? true : false;\n  const hasPuff = text.puffPrice ? true : false;\n  const hasCrystals = text.crystalPrice ? true : false;\n  const shouldNormalMap = text.normalMap instanceof Texture && ((_text$selectedName2 = text.selectedName) === null || _text$selectedName2 === void 0 ? void 0 : (_text$selectedName2$a = _text$selectedName2.attributes) === null || _text$selectedName2$a === void 0 ? void 0 : _text$selectedName2$a.name) === 'Luxury';\n  const normalMap = shouldNormalMap ? text.normalMap : null;\n  console.log(normalMap, 'normalMap');\n  let normalScale = 1;\n  if (hasCrystals) {\n    normalScale = 4;\n  } else if (isLuxury && !hasPuff) {\n    normalScale = 0.5;\n  } else if (isLuxury && hasPuff) {\n    normalScale = 3;\n  }\n  if (!portalRef) return null;\n\n  // useEffect(,[text])\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      ref: el => {\n        canvasRef.current = el;\n      },\n      children: [/*#__PURE__*/_jsxDEV(Lights, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n        children: [/*#__PURE__*/_jsxDEV(\"planeBufferGeometry\", {\n          args: [20, 5]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"meshNormalMaterial\", {\n          visible: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Decal, {\n          position: [0, 0, 0],\n          rotation: [0, 0, 0],\n          scale: scaleModifier,\n          children: /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n            map: text.preview instanceof Texture ? text.preview : null,\n            transparent: true,\n            roughness: isLuxury && !hasCrystals ? 0.75 : 0,\n            depthTest: true,\n            depthWrite: false,\n            normalMap: normalMap,\n            normalScale: new Vector2(normalScale, normalScale)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(NavTextPreviewScene, \"n41h5SD+I34XHbysn4w6jkuZ1Tw=\", false, function () {\n  return [usePortalRef];\n});\n_c = NavTextPreviewScene;\nexport default NavTextPreviewScene;\nvar _c;\n$RefreshReg$(_c, \"NavTextPreviewScene\");","map":{"version":3,"names":["Decal","Texture","Vector2","Vector3","Lights","Canvas","useRef","useState","usePortalRef","jsxDEV","_jsxDEV","Fragment","_Fragment","NavTextPreviewScene","text","_s","_text$selectedName","_text$selectedName2","_text$selectedName2$a","canvasRef","shouldShow","setShouldShow","dataUrl","setDataUrl","portalRef","scale","scaleModifier","isLuxury","selectedName","id","hasPuff","puffPrice","hasCrystals","crystalPrice","shouldNormalMap","normalMap","attributes","name","console","log","normalScale","children","ref","el","current","fileName","_jsxFileName","lineNumber","columnNumber","args","visible","position","rotation","map","preview","transparent","roughness","depthTest","depthWrite","_c","$RefreshReg$"],"sources":["C:/Users/Reian/Desktop/Work/Freelance/Boxxer World/boxxerworld-shopify-frontend/customiser/src/components/three/CustomiserCanvas/NavTextScene.tsx"],"sourcesContent":["import { Decal } from '@react-three/drei';\r\nimport { TextCustomiser } from '@store/customiser';\r\nimport { Texture, Vector2, Vector3 } from 'three';\r\nimport Lights from '../Lights';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport styles from './NavTextScene.module.scss';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport { usePortalRef } from '@hooks';\r\n\r\ninterface NavTextPreviewSceneInterface {\r\n  text: TextCustomiser;\r\n}\r\n\r\nconst NavTextPreviewScene = ({ text }: NavTextPreviewSceneInterface) => {\r\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n  const [shouldShow, setShouldShow] = useState<boolean>(false);\r\n  const [dataUrl, setDataUrl] = useState<string>('');\r\n\r\n  const portalRef = usePortalRef('iInfoContainer');\r\n\r\n  const scale = 10;\r\n  const scaleModifier = new Vector3(3.2 * scale, 0.4 * scale, 4);\r\n\r\n  const isLuxury: boolean = text.selectedName?.id === '2' ? true : false;\r\n  const hasPuff: boolean = text.puffPrice ? true : false;\r\n  const hasCrystals: boolean = text.crystalPrice ? true : false;\r\n\r\n  const shouldNormalMap =\r\n    text.normalMap instanceof Texture && text.selectedName?.attributes?.name === 'Luxury';\r\n  const normalMap = shouldNormalMap ? text.normalMap : null;\r\n  console.log(normalMap, 'normalMap');\r\n\r\n  let normalScale = 1;\r\n  if (hasCrystals) {\r\n    normalScale = 4;\r\n  } else if (isLuxury && !hasPuff) {\r\n    normalScale = 0.5;\r\n  } else if (isLuxury && hasPuff) {\r\n    normalScale = 3;\r\n  }\r\n\r\n  if (!portalRef) return null;\r\n\r\n  // useEffect(,[text])\r\n\r\n  return (\r\n    <>\r\n      <Canvas\r\n        ref={(el) => {\r\n          canvasRef.current = el;\r\n        }}\r\n      >\r\n        <Lights />\r\n        <mesh>\r\n          <planeBufferGeometry args={[20, 5]} />\r\n          <meshNormalMaterial visible={false} />\r\n          <Decal position={[0, 0, 0]} rotation={[0, 0, 0]} scale={scaleModifier}>\r\n            <meshStandardMaterial\r\n              map={text.preview instanceof Texture ? text.preview : null}\r\n              transparent\r\n              roughness={isLuxury && !hasCrystals ? 0.75 : 0}\r\n              depthTest\r\n              depthWrite={false}\r\n              normalMap={normalMap}\r\n              normalScale={new Vector2(normalScale, normalScale)}\r\n            />\r\n          </Decal>\r\n        </mesh>\r\n      </Canvas>\r\n      {/* <div\r\n        className={styles.canvasClickableCover}\r\n        onClick={() => {\r\n          setShouldShow(true);\r\n          setDataUrl(canvasRef.current?.toDataURL() || '');\r\n        }}\r\n      >\r\n        <span className={styles.canvasClickableCover__imgContainer}>\r\n          <img height={32} width={32} src='/icons/click-icon.png' />\r\n        </span>\r\n      </div>\r\n      {shouldShow &&\r\n        canvasRef &&\r\n        dataUrl &&\r\n        createPortal(\r\n          <>\r\n            <div className={styles.navTextSceneFullscreen}>\r\n              <span\r\n                className={styles.navTextSceneFullscreen__closeBtn}\r\n                onClick={() => setShouldShow(false)}\r\n              >\r\n                x\r\n              </span>\r\n              <img src={canvasRef.current?.toDataURL()} alt='Text Preview' />\r\n            </div>\r\n          </>,\r\n          portalRef,\r\n        )} */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavTextPreviewScene;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}