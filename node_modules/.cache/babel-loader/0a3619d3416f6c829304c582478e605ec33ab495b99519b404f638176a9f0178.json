{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Reian\\\\Desktop\\\\Work\\\\Freelance\\\\Boxxer World\\\\boxxerworld-shopify-frontend\\\\customiser\\\\src\\\\components\\\\nav\\\\NavButtons\\\\NavButtons.tsx\",\n  _s = $RefreshSig$();\nimport { usePortalRef } from '@hooks';\nimport { useCustomiserStore } from '@store/customiser';\nimport cn from 'classnames';\nimport ReactDOM from 'react-dom';\nimport styles from './NavButtons.module.scss';\nimport DontShowAgain from '../../ui/DontShowAgain';\nimport { useState } from 'react';\nimport ContainedButton from '@components/ui/Button/ContainedButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NavButtons = ({\n  finishedNavs: finishedNavsParam,\n  className,\n  confirmText,\n  confirmStorage,\n  onNext\n}) => {\n  _s();\n  var _finishedNavs$find;\n  const rootClassName = cn(styles.root, className);\n  const {\n    navItems,\n    selectedNav,\n    parts,\n    sizing,\n    cancelPartChange,\n    resetNav,\n    setSelectedNav\n  } = useCustomiserStore();\n  const navIndex = navItems.findIndex(nav => nav.name === (selectedNav === null || selectedNav === void 0 ? void 0 : selectedNav.name));\n  const portalRef = usePortalRef('CustomiserNavActions');\n  const popupPortalRef = usePortalRef('popupContainer');\n  const [showPopup, setShowPopup] = useState(false);\n  const notifTitle = confirmStorage;\n  const localStorageItem = localStorage.getItem(notifTitle || '');\n  const shouldShowNotification = !localStorageItem;\n  let finishedNavs = parts.map(part => {\n    const partName = part.part.name;\n    if (!partName) return;\n    const isFinishedPart = !!navItems.find(navItem => {\n      return navItem.name === partName;\n    });\n    return {\n      name: partName,\n      isFinished: isFinishedPart\n    };\n  });\n  if (finishedNavsParam && finishedNavsParam.length) {\n    finishedNavs = [...finishedNavs, ...finishedNavsParam];\n  }\n  let isFinishedCurrentNav = !!(selectedNav && (_finishedNavs$find = finishedNavs.find(nav => (nav === null || nav === void 0 ? void 0 : nav.name) === selectedNav.name)) !== null && _finishedNavs$find !== void 0 && _finishedNavs$find.isFinished);\n  let isRequired = selectedNav === null || selectedNav === void 0 ? void 0 : selectedNav.required;\n  if ((selectedNav === null || selectedNav === void 0 ? void 0 : selectedNav.name) === 'Fitting') {\n    isRequired = false;\n  } else if ((selectedNav === null || selectedNav === void 0 ? void 0 : selectedNav.name) === 'Size') {\n    var _sizing$height, _sizing$weight;\n    isFinishedCurrentNav = !!(sizing !== null && sizing !== void 0 && (_sizing$height = sizing.height) !== null && _sizing$height !== void 0 && _sizing$height.value && sizing !== null && sizing !== void 0 && (_sizing$weight = sizing.weight) !== null && _sizing$weight !== void 0 && _sizing$weight.value);\n  }\n  const noCancelNavs = ['Fitting', 'Text', 'Size'];\n  const shouldHideCancel = !!noCancelNavs.find(noCancelNav => noCancelNav === (selectedNav === null || selectedNav === void 0 ? void 0 : selectedNav.name));\n  const saveHandler = () => {\n    if (navIndex !== -1 && isFinishedCurrentNav) {\n      setSelectedNav(navIndex + 1);\n    }\n\n    // if (!confirmText) {\n    //   resetNav();\n    // } else {\n    //   if (shouldShowNotification) {\n    //     setShowPopup(true);\n    //   } else {\n    //     resetNav();\n    //   }\n    // }\n  };\n  if (!portalRef || !popupPortalRef) {\n    return null;\n  }\n  return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: rootClassName,\n      children: [/*#__PURE__*/_jsxDEV(ContainedButton, {\n        isClickable: isFinishedCurrentNav,\n        isHidden: shouldHideCancel,\n        onClick: () => cancelPartChange(),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), !onNext ? /*#__PURE__*/_jsxDEV(ContainedButton, {\n        isClickable: !isRequired || isFinishedCurrentNav,\n        onClick: saveHandler,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(ContainedButton, {\n        onClick: onNext,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), confirmText && showPopup && shouldShowNotification && notifTitle && /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(DontShowAgain, {\n      cb: resetNav,\n      setShowNotification: setShowPopup,\n      notifName: notifTitle,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: confirmText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }, this), popupPortalRef)]\n  }, void 0, true), portalRef);\n};\n_s(NavButtons, \"1PSVN1LyTQzesbN/+9C6QR97SxY=\", false, function () {\n  return [useCustomiserStore, usePortalRef, usePortalRef];\n});\n_c = NavButtons;\nexport default NavButtons;\nvar _c;\n$RefreshReg$(_c, \"NavButtons\");","map":{"version":3,"names":["usePortalRef","useCustomiserStore","cn","ReactDOM","styles","DontShowAgain","useState","ContainedButton","jsxDEV","_jsxDEV","Fragment","_Fragment","NavButtons","finishedNavs","finishedNavsParam","className","confirmText","confirmStorage","onNext","_s","_finishedNavs$find","rootClassName","root","navItems","selectedNav","parts","sizing","cancelPartChange","resetNav","setSelectedNav","navIndex","findIndex","nav","name","portalRef","popupPortalRef","showPopup","setShowPopup","notifTitle","localStorageItem","localStorage","getItem","shouldShowNotification","map","part","partName","isFinishedPart","find","navItem","isFinished","length","isFinishedCurrentNav","isRequired","required","_sizing$height","_sizing$weight","height","value","weight","noCancelNavs","shouldHideCancel","noCancelNav","saveHandler","createPortal","children","isClickable","isHidden","onClick","fileName","_jsxFileName","lineNumber","columnNumber","cb","setShowNotification","notifName","_c","$RefreshReg$"],"sources":["C:/Users/Reian/Desktop/Work/Freelance/Boxxer World/boxxerworld-shopify-frontend/customiser/src/components/nav/NavButtons/NavButtons.tsx"],"sourcesContent":["import { usePortalRef } from '@hooks';\r\nimport { useCustomiserStore } from '@store/customiser';\r\nimport cn from 'classnames';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport styles from './NavButtons.module.scss';\r\nimport { Falsey } from 'lodash';\r\n\r\nimport DontShowAgain from '../../ui/DontShowAgain';\r\nimport { useState } from 'react';\r\nimport ContainedButton from '@components/ui/Button/ContainedButton';\r\nimport { finished } from 'stream';\r\n\r\nexport interface NavButtonsProps {\r\n  className?: string;\r\n  confirmText?: string | Falsey;\r\n  confirmStorage?: string;\r\n  onNext?: (() => void) | Falsey;\r\n  finishedNavs?: (\r\n    | {\r\n        name: string;\r\n        isFinished: boolean;\r\n      }\r\n    | undefined\r\n  )[];\r\n}\r\n\r\nconst NavButtons = ({\r\n  finishedNavs: finishedNavsParam,\r\n  className,\r\n  confirmText,\r\n  confirmStorage,\r\n  onNext,\r\n}: NavButtonsProps) => {\r\n  const rootClassName = cn(styles.root, className);\r\n\r\n  const {\r\n    navItems,\r\n    selectedNav,\r\n    parts,\r\n    sizing,\r\n\r\n    cancelPartChange,\r\n    resetNav,\r\n    setSelectedNav,\r\n  } = useCustomiserStore();\r\n\r\n  const navIndex = navItems.findIndex((nav) => nav.name === selectedNav?.name);\r\n\r\n  const portalRef = usePortalRef('CustomiserNavActions');\r\n\r\n  const popupPortalRef = usePortalRef('popupContainer');\r\n  const [showPopup, setShowPopup] = useState<boolean>(false);\r\n\r\n  const notifTitle = confirmStorage;\r\n  const localStorageItem = localStorage.getItem(notifTitle || '');\r\n  const shouldShowNotification = !localStorageItem;\r\n\r\n  let finishedNavs = parts.map((part) => {\r\n    const partName = part.part.name;\r\n    if (!partName) return;\r\n    const isFinishedPart = !!navItems.find((navItem) => {\r\n      return navItem.name === partName;\r\n    });\r\n    return {\r\n      name: partName,\r\n      isFinished: isFinishedPart,\r\n    };\r\n  });\r\n\r\n  if (finishedNavsParam && finishedNavsParam.length) {\r\n    finishedNavs = [...finishedNavs, ...finishedNavsParam];\r\n  }\r\n\r\n  let isFinishedCurrentNav = !!(\r\n    selectedNav && finishedNavs.find((nav) => nav?.name === selectedNav.name)?.isFinished\r\n  );\r\n  let isRequired = selectedNav?.required;\r\n  if (selectedNav?.name === 'Fitting') {\r\n    isRequired = false;\r\n  } else if (selectedNav?.name === 'Size') {\r\n    isFinishedCurrentNav = !!(sizing?.height?.value && sizing?.weight?.value);\r\n  }\r\n\r\n  const noCancelNavs = ['Fitting', 'Text', 'Size'];\r\n  const shouldHideCancel = !!noCancelNavs.find((noCancelNav) => noCancelNav === selectedNav?.name);\r\n\r\n  const saveHandler = () => {\r\n    if (navIndex !== -1 && isFinishedCurrentNav) {\r\n      setSelectedNav(navIndex + 1);\r\n    }\r\n\r\n    // if (!confirmText) {\r\n    //   resetNav();\r\n    // } else {\r\n    //   if (shouldShowNotification) {\r\n    //     setShowPopup(true);\r\n    //   } else {\r\n    //     resetNav();\r\n    //   }\r\n    // }\r\n  };\r\n\r\n  if (!portalRef || !popupPortalRef) {\r\n    return null;\r\n  }\r\n\r\n  return ReactDOM.createPortal(\r\n    <>\r\n      <div className={rootClassName}>\r\n        <ContainedButton\r\n          isClickable={isFinishedCurrentNav}\r\n          isHidden={shouldHideCancel}\r\n          onClick={() => cancelPartChange()}\r\n        >\r\n          Cancel\r\n        </ContainedButton>\r\n        {!onNext ? (\r\n          <ContainedButton isClickable={!isRequired || isFinishedCurrentNav} onClick={saveHandler}>\r\n            Save\r\n          </ContainedButton>\r\n        ) : (\r\n          <ContainedButton onClick={onNext}>Next</ContainedButton>\r\n        )}\r\n      </div>\r\n      {confirmText &&\r\n        showPopup &&\r\n        shouldShowNotification &&\r\n        notifTitle &&\r\n        ReactDOM.createPortal(\r\n          <DontShowAgain cb={resetNav} setShowNotification={setShowPopup} notifName={notifTitle}>\r\n            <span>{confirmText}</span>\r\n          </DontShowAgain>,\r\n          popupPortalRef,\r\n        )}\r\n    </>,\r\n    portalRef,\r\n  );\r\n};\r\n\r\nexport default NavButtons;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}