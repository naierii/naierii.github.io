{"ast":null,"code":"// eslint-disable-next-line\n// @ts-ignore\nimport { NormalMapGenerator } from 'normalmap-online';\nexport function getMaterialUrl(material) {\n  var _material$attributes, _material$attributes$, _material$attributes$2, _material$attributes$3, _material$attributes$4;\n  return material === null || material === void 0 ? void 0 : (_material$attributes = material.attributes) === null || _material$attributes === void 0 ? void 0 : (_material$attributes$ = _material$attributes.images) === null || _material$attributes$ === void 0 ? void 0 : (_material$attributes$2 = _material$attributes$.find(imgMap => (imgMap === null || imgMap === void 0 ? void 0 : imgMap.mapType) === 'map')) === null || _material$attributes$2 === void 0 ? void 0 : (_material$attributes$3 = _material$attributes$2.image.data) === null || _material$attributes$3 === void 0 ? void 0 : (_material$attributes$4 = _material$attributes$3.attributes) === null || _material$attributes$4 === void 0 ? void 0 : _material$attributes$4.formats.large.url;\n}\n\n// TODO - Relocate this\n\nconst normalMapGenerator = NormalMapGenerator.instance();\nasync function imgToNormalMap({\n  img,\n  hasPuff,\n  blur\n}) {\n  const blurAmount = hasPuff ? blur || 7 : 1;\n  return normalMapGenerator.generateFromImage(img, {\n    strength: 0.5,\n    blur: blurAmount,\n    level: 1\n  });\n}\nexport class CanvasText {\n  constructor({\n    hasPuff,\n    toNormalMap,\n    text,\n    patternType\n  }) {\n    this.canvas = void 0;\n    this.ctx = void 0;\n    this.outlineCanvas = void 0;\n    this.outlineCtx = void 0;\n    this.normalMapTextureCanvas = void 0;\n    this.normalMapTextureCtx = void 0;\n    this.normalMapCanvas = void 0;\n    this.normalMapCtx = void 0;\n    this.normalMapOutlineTextureCanvas = void 0;\n    this.normalMapOutlineTextureCtx = void 0;\n    this.normalMapOutlineCanvas = void 0;\n    this.normalMapOutlineCtx2 = void 0;\n    this.crystalBgPatternCanvas = void 0;\n    this.crystalBgPatternCtx = void 0;\n    this.hasPuff = void 0;\n    this.toNormalMap = void 0;\n    this.patternType = void 0;\n    this.text = void 0;\n    this.canvasHeight = void 0;\n    this.canvasWidth = void 0;\n    this.fontSize = void 0;\n    this.outlineWidth = void 0;\n    this.hasPuff = hasPuff;\n    this.toNormalMap = toNormalMap;\n    this.patternType = patternType;\n    this.text = text;\n    this.fontSize = 360;\n    this.canvasHeight = 400;\n    this.canvasWidth = 3200;\n    this.outlineWidth = 20;\n    this.canvas = document.createElement('canvas');\n    this.canvas.height = this.canvasHeight;\n    this.canvas.width = this.canvasWidth;\n    this.ctx = this.canvas.getContext('2d');\n    this.outlineCanvas = document.createElement('canvas');\n    this.outlineCanvas.height = this.canvasHeight;\n    this.outlineCanvas.width = this.canvasWidth;\n    this.outlineCtx = this.outlineCanvas.getContext('2d');\n\n    // Normal map section\n\n    this.normalMapTextureCanvas = document.createElement('canvas');\n    this.normalMapTextureCanvas.height = this.canvasHeight;\n    this.normalMapTextureCanvas.width = this.canvasWidth;\n    this.normalMapTextureCtx = this.normalMapTextureCanvas.getContext('2d');\n    this.normalMapCanvas = document.createElement('canvas');\n    this.normalMapCanvas.height = this.canvasHeight;\n    this.normalMapCanvas.width = this.canvasWidth;\n    this.normalMapCtx = this.normalMapCanvas.getContext('2d');\n    this.normalMapOutlineTextureCanvas = document.createElement('canvas');\n    this.normalMapOutlineTextureCanvas.height = this.canvasHeight;\n    this.normalMapOutlineTextureCanvas.width = this.canvasWidth;\n    this.normalMapOutlineTextureCtx = this.normalMapOutlineTextureCanvas.getContext('2d');\n    this.normalMapOutlineCanvas = document.createElement('canvas');\n    this.normalMapOutlineCanvas.height = this.canvasHeight;\n    this.normalMapOutlineCanvas.width = this.canvasWidth;\n    this.normalMapOutlineCtx2 = this.normalMapOutlineCanvas.getContext('2d');\n\n    // TODO - make a function for setting canvas height and ctx instead\n    this.crystalBgPatternCanvas = document.createElement('canvas');\n    this.crystalBgPatternCanvas.height = this.canvasHeight;\n    this.crystalBgPatternCanvas.width = this.canvasWidth;\n    this.crystalBgPatternCtx = this.crystalBgPatternCanvas.getContext('2d');\n  }\n  clear() {\n    var _this$ctx, _this$outlineCtx;\n    (_this$ctx = this.ctx) === null || _this$ctx === void 0 ? void 0 : _this$ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    (_this$outlineCtx = this.outlineCtx) === null || _this$outlineCtx === void 0 ? void 0 : _this$outlineCtx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n  async drawImg(ctx, src) {\n    ctx.drawImage(src, 0, 0, this.canvas.width, this.canvas.height);\n  }\n  showTestCanvas(canvas) {\n    const testPreviewDom = document.getElementById('testPreview'); // TEST ONLY, TO BE REMOVED\n    testPreviewDom.innerHTML = ''; // TEST ONLY, TO BE REMOVED\n    // testPreviewDom?.appendChild(canvas); // TEST ONLY, TO BE REMOVED\n    // testPreviewDom?.appendChild(this.normalMapCanvas); // TEST ONLY, TO BE REMOVED\n    // testPreviewDom?.appendChild(this.normalMapOutlineTextureCanvas); // TEST ONLY, TO BE REMOVED\n    // testPreviewDom?.appendChild(this.normalMapOutlineCanvas); // TEST ONLY, TO BE REMOVED\n    // testPreviewDom?.appendChild(this.crystalBgPatternCanvas); // TEST ONLY, TO BE REMOVED\n    // testPreviewDom?.appendChild(this.outlineCanvas); // TEST ONLY, TO BE REMOVED\n  }\n  async maskImage(ctx, img) {\n    ctx.globalCompositeOperation = 'source-in';\n    await this.drawImg(ctx, img);\n    ctx.globalCompositeOperation = 'source-over'; // reset to default\n  }\n  drawPreviewText(ctx) {\n    if (!this.text) return;\n    ctx.font = `${this.fontSize}px testFont`;\n    ctx.textAlign = 'center';\n    ctx.fillText(this.text, this.canvas.width / 2, this.canvas.height / 2 + 15 + this.fontSize / 4);\n  }\n  drawPreviewOutlineText() {\n    if (!this.text) return;\n    this.outlineCtx.font = `${this.fontSize}px testFont`;\n    this.outlineCtx.textAlign = 'center';\n    this.outlineCtx.lineWidth = this.outlineWidth;\n    this.outlineCtx.strokeText(this.text, this.canvas.width / 2, this.canvas.height / 2 + 15 + this.fontSize / 4);\n  }\n  drawPreviewOutlineOnlyText(ctx) {\n    if (!this.text) return;\n    ctx.font = `${this.fontSize}px testFont`;\n    ctx.textAlign = 'center';\n    ctx.lineWidth = 30;\n    ctx.fillStyle = 'green';\n    ctx.strokeText(this.text, this.canvas.width / 2, this.canvas.height / 2 + 15 + this.fontSize / 4);\n    ctx.globalCompositeOperation = 'destination-out';\n    ctx.fillText(this.text, this.canvas.width / 2, this.canvas.height / 2 + 15 + this.fontSize / 4);\n    ctx.globalCompositeOperation = 'source-over'; // reset to default\n  }\n  async drawNormalMap(normalMapPatternImg) {\n    this.drawPreviewText(this.normalMapTextureCtx);\n    if (normalMapPatternImg) {\n      const pattern = this.normalMapTextureCtx.createPattern(normalMapPatternImg, 'repeat');\n      if (!pattern) return;\n      this.normalMapTextureCtx.globalCompositeOperation = 'source-in';\n      this.normalMapTextureCtx.rect(0, 0, this.canvasWidth, this.canvasHeight);\n      this.normalMapTextureCtx.fillStyle = pattern;\n      this.normalMapTextureCtx.fill();\n      this.normalMapTextureCtx.globalCompositeOperation = 'source-over';\n    }\n    console.log('toNormalMap', this.toNormalMap);\n    const normalMap = this.toNormalMap ? await imgToNormalMap({\n      img: this.normalMapTextureCanvas,\n      hasPuff: this.hasPuff\n    }) : this.normalMapTextureCanvas;\n    this.normalMapCtx.drawImage(normalMap, 0, 0);\n  }\n  async drawOutlineNormalMap(normalMapPatternImg) {\n    this.drawPreviewOutlineOnlyText(this.normalMapOutlineTextureCtx);\n    if (normalMapPatternImg) {\n      const pattern = this.normalMapOutlineTextureCtx.createPattern(normalMapPatternImg, 'repeat');\n      if (!pattern) return;\n      this.normalMapOutlineTextureCtx.globalCompositeOperation = 'source-in';\n      this.normalMapOutlineTextureCtx.rect(0, 0, this.canvasWidth, this.canvasHeight);\n      if (this.patternType !== 'crystals') {\n        this.normalMapOutlineTextureCtx.fillStyle = pattern;\n      }\n      this.normalMapOutlineTextureCtx.fill();\n      this.normalMapOutlineTextureCtx.globalCompositeOperation = 'source-over';\n    }\n    const normalMap = this.toNormalMap || this.patternType === 'crystals' ? await imgToNormalMap({\n      img: this.normalMapOutlineTextureCanvas,\n      hasPuff: this.patternType === 'crystals' ? true : this.hasPuff,\n      blur: 4\n    }) : this.normalMapOutlineTextureCanvas;\n    this.normalMapOutlineCtx2.drawImage(normalMap, 0, 0);\n  }\n  async drawCrystalBg(crystalBgImg, crystalBgPatternImg) {\n    const pattern = this.crystalBgPatternCtx.createPattern(crystalBgPatternImg, 'repeat');\n    if (!pattern) return;\n    this.crystalBgPatternCtx.rect(0, 0, this.canvasWidth, this.canvasHeight);\n    this.crystalBgPatternCtx.fillStyle = pattern;\n    this.crystalBgPatternCtx.fill();\n    this.crystalBgPatternCtx.globalCompositeOperation = 'source-in';\n    this.crystalBgPatternCtx.globalAlpha = 0.9;\n    this.crystalBgPatternCtx.drawImage(this.canvas, 0, 0, this.canvasWidth, this.canvasHeight);\n    this.crystalBgPatternCtx.drawImage(crystalBgImg, 0, 0, this.canvasWidth, this.canvasHeight);\n    this.crystalBgPatternCtx.globalCompositeOperation = 'source-over';\n    this.outlineCtx.drawImage(this.crystalBgPatternCanvas, 0, 0);\n  }\n  printTextMapToStrokeMap() {\n    this.normalMapCtx.globalCompositeOperation = 'destination-in';\n    this.normalMapCtx.drawImage(this.normalMapTextureCanvas, 0, 0);\n    this.normalMapCtx.globalCompositeOperation = 'source-over'; // reset to default\n    this.normalMapOutlineCtx2.drawImage(this.normalMapCanvas, 0, 0);\n  }\n  async previewText({\n    material,\n    outline,\n    previewImg,\n    normalMapPatternImg,\n    crystalBgPatternImg,\n    crystalBgImg\n  }) {\n    if (!this.text) return;\n    this.clear();\n    this.showTestCanvas(this.normalMapTextureCanvas);\n    await this.drawNormalMap(normalMapPatternImg);\n    await this.drawOutlineNormalMap(normalMapPatternImg);\n    this.printTextMapToStrokeMap();\n    if (outline) {\n      this.drawPreviewOutlineText();\n      await this.maskImage(this.outlineCtx, outline);\n    }\n    this.drawPreviewText(this.ctx);\n    if (material) {\n      await this.maskImage(this.ctx, material);\n    }\n    this.outlineCtx.drawImage(this.canvas, 0, 0);\n    if (previewImg) previewImg.src = this.outlineCanvas.toDataURL();\n    console.log('crystalBgImg', crystalBgImg);\n    if (crystalBgImg && crystalBgPatternImg) {\n      this.drawCrystalBg(crystalBgImg, crystalBgPatternImg);\n    }\n  }\n  mergeCanvas() {\n    this.outlineCtx.drawImage(this.canvas, 0, 0);\n  }\n  getOutlineCanvas() {\n    return this.outlineCanvas;\n  }\n  getNormalMapTextureCanvas() {\n    return this.normalMapTextureCanvas;\n  }\n  getNormalMapOutlineCanvas() {\n    return this.normalMapOutlineCanvas;\n  }\n}","map":{"version":3,"names":["NormalMapGenerator","getMaterialUrl","material","_material$attributes","_material$attributes$","_material$attributes$2","_material$attributes$3","_material$attributes$4","attributes","images","find","imgMap","mapType","image","data","formats","large","url","normalMapGenerator","instance","imgToNormalMap","img","hasPuff","blur","blurAmount","generateFromImage","strength","level","CanvasText","constructor","toNormalMap","text","patternType","canvas","ctx","outlineCanvas","outlineCtx","normalMapTextureCanvas","normalMapTextureCtx","normalMapCanvas","normalMapCtx","normalMapOutlineTextureCanvas","normalMapOutlineTextureCtx","normalMapOutlineCanvas","normalMapOutlineCtx2","crystalBgPatternCanvas","crystalBgPatternCtx","canvasHeight","canvasWidth","fontSize","outlineWidth","document","createElement","height","width","getContext","clear","_this$ctx","_this$outlineCtx","clearRect","drawImg","src","drawImage","showTestCanvas","testPreviewDom","getElementById","innerHTML","maskImage","globalCompositeOperation","drawPreviewText","font","textAlign","fillText","drawPreviewOutlineText","lineWidth","strokeText","drawPreviewOutlineOnlyText","fillStyle","drawNormalMap","normalMapPatternImg","pattern","createPattern","rect","fill","console","log","normalMap","drawOutlineNormalMap","drawCrystalBg","crystalBgImg","crystalBgPatternImg","globalAlpha","printTextMapToStrokeMap","previewText","outline","previewImg","toDataURL","mergeCanvas","getOutlineCanvas","getNormalMapTextureCanvas","getNormalMapOutlineCanvas"],"sources":["C:/Users/Reian/Desktop/Work/Freelance/Boxxer World/boxxerworld-shopify-frontend/customiser/src/lib/canvas.ts"],"sourcesContent":["import type { MaterialFragment } from '@graphql/generated/graphql';\r\nimport type { Falsey } from 'lodash';\r\n// eslint-disable-next-line\r\n// @ts-ignore\r\nimport { NormalMapGenerator } from 'normalmap-online';\r\n\r\nexport function getMaterialUrl(material: MaterialFragment | undefined): string {\r\n  return material?.attributes?.images?.find((imgMap) => imgMap?.mapType === 'map')?.image.data\r\n    ?.attributes?.formats.large.url;\r\n}\r\n\r\n// TODO - Relocate this\r\ninterface ImgToNormalMapParams {\r\n  img: HTMLImageElement | HTMLCanvasElement;\r\n  hasPuff?: boolean;\r\n  blur?: number;\r\n}\r\nconst normalMapGenerator = NormalMapGenerator.instance();\r\nasync function imgToNormalMap({ img, hasPuff, blur }: ImgToNormalMapParams) {\r\n  const blurAmount = hasPuff ? blur || 7 : 1;\r\n  return normalMapGenerator.generateFromImage(img, {\r\n    strength: 0.5,\r\n    blur: blurAmount,\r\n    level: 1,\r\n  });\r\n}\r\n\r\ninterface PreviewText {\r\n  material: HTMLImageElement | undefined;\r\n  outline: HTMLImageElement | undefined;\r\n  previewImg?: HTMLImageElement;\r\n  normalMapPatternImg?: HTMLImageElement | false;\r\n  crystalBgPatternImg?: HTMLImageElement | Falsey;\r\n  crystalBgImg?: HTMLImageElement | Falsey;\r\n}\r\n\r\nexport type PatternType = 'crystals' | 'embroidery' | Falsey;\r\n\r\ninterface CanvasTextConstructor {\r\n  hasPuff: boolean;\r\n  toNormalMap: boolean;\r\n  patternType: PatternType;\r\n  text?: string;\r\n}\r\n\r\nexport class CanvasText {\r\n  canvas: HTMLCanvasElement;\r\n  ctx: CanvasRenderingContext2D;\r\n  outlineCanvas: HTMLCanvasElement;\r\n  outlineCtx: CanvasRenderingContext2D;\r\n\r\n  normalMapTextureCanvas: HTMLCanvasElement;\r\n  normalMapTextureCtx: CanvasRenderingContext2D;\r\n  normalMapCanvas: HTMLCanvasElement;\r\n  normalMapCtx: CanvasRenderingContext2D;\r\n\r\n  normalMapOutlineTextureCanvas: HTMLCanvasElement;\r\n  normalMapOutlineTextureCtx: CanvasRenderingContext2D;\r\n  normalMapOutlineCanvas: HTMLCanvasElement;\r\n  normalMapOutlineCtx2: CanvasRenderingContext2D;\r\n\r\n  crystalBgPatternCanvas: HTMLCanvasElement;\r\n  crystalBgPatternCtx: CanvasRenderingContext2D;\r\n\r\n  hasPuff: boolean;\r\n  toNormalMap: boolean;\r\n  patternType: PatternType;\r\n  text?: string;\r\n\r\n  canvasHeight: number;\r\n  canvasWidth: number;\r\n  fontSize: number;\r\n  outlineWidth: number;\r\n\r\n  constructor({ hasPuff, toNormalMap, text, patternType }: CanvasTextConstructor) {\r\n    this.hasPuff = hasPuff;\r\n    this.toNormalMap = toNormalMap;\r\n    this.patternType = patternType;\r\n    this.text = text;\r\n\r\n    this.fontSize = 360;\r\n    this.canvasHeight = 400;\r\n    this.canvasWidth = 3200;\r\n    this.outlineWidth = 20;\r\n\r\n    this.canvas = document.createElement('canvas');\r\n    this.canvas.height = this.canvasHeight;\r\n    this.canvas.width = this.canvasWidth;\r\n    this.ctx = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n    this.outlineCanvas = document.createElement('canvas');\r\n    this.outlineCanvas.height = this.canvasHeight;\r\n    this.outlineCanvas.width = this.canvasWidth;\r\n    this.outlineCtx = this.outlineCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n    // Normal map section\r\n\r\n    this.normalMapTextureCanvas = document.createElement('canvas');\r\n    this.normalMapTextureCanvas.height = this.canvasHeight;\r\n    this.normalMapTextureCanvas.width = this.canvasWidth;\r\n    this.normalMapTextureCtx = this.normalMapTextureCanvas.getContext(\r\n      '2d',\r\n    ) as CanvasRenderingContext2D;\r\n\r\n    this.normalMapCanvas = document.createElement('canvas');\r\n    this.normalMapCanvas.height = this.canvasHeight;\r\n    this.normalMapCanvas.width = this.canvasWidth;\r\n    this.normalMapCtx = this.normalMapCanvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n    this.normalMapOutlineTextureCanvas = document.createElement('canvas');\r\n    this.normalMapOutlineTextureCanvas.height = this.canvasHeight;\r\n    this.normalMapOutlineTextureCanvas.width = this.canvasWidth;\r\n    this.normalMapOutlineTextureCtx = this.normalMapOutlineTextureCanvas.getContext(\r\n      '2d',\r\n    ) as CanvasRenderingContext2D;\r\n\r\n    this.normalMapOutlineCanvas = document.createElement('canvas');\r\n    this.normalMapOutlineCanvas.height = this.canvasHeight;\r\n    this.normalMapOutlineCanvas.width = this.canvasWidth;\r\n    this.normalMapOutlineCtx2 = this.normalMapOutlineCanvas.getContext(\r\n      '2d',\r\n    ) as CanvasRenderingContext2D;\r\n\r\n    // TODO - make a function for setting canvas height and ctx instead\r\n    this.crystalBgPatternCanvas = document.createElement('canvas');\r\n    this.crystalBgPatternCanvas.height = this.canvasHeight;\r\n    this.crystalBgPatternCanvas.width = this.canvasWidth;\r\n    this.crystalBgPatternCtx = this.crystalBgPatternCanvas.getContext(\r\n      '2d',\r\n    ) as CanvasRenderingContext2D;\r\n  }\r\n\r\n  public clear() {\r\n    this.ctx?.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    this.outlineCtx?.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n  }\r\n  public async drawImg(ctx: CanvasRenderingContext2D, src: HTMLImageElement) {\r\n    ctx.drawImage(src, 0, 0, this.canvas.width, this.canvas.height);\r\n  }\r\n\r\n  public showTestCanvas(canvas: HTMLCanvasElement) {\r\n    const testPreviewDom = document.getElementById('testPreview'); // TEST ONLY, TO BE REMOVED\r\n    (testPreviewDom as unknown as HTMLElement).innerHTML = ''; // TEST ONLY, TO BE REMOVED\r\n    // testPreviewDom?.appendChild(canvas); // TEST ONLY, TO BE REMOVED\r\n    // testPreviewDom?.appendChild(this.normalMapCanvas); // TEST ONLY, TO BE REMOVED\r\n    // testPreviewDom?.appendChild(this.normalMapOutlineTextureCanvas); // TEST ONLY, TO BE REMOVED\r\n    // testPreviewDom?.appendChild(this.normalMapOutlineCanvas); // TEST ONLY, TO BE REMOVED\r\n    // testPreviewDom?.appendChild(this.crystalBgPatternCanvas); // TEST ONLY, TO BE REMOVED\r\n    // testPreviewDom?.appendChild(this.outlineCanvas); // TEST ONLY, TO BE REMOVED\r\n  }\r\n\r\n  public async maskImage(ctx: CanvasRenderingContext2D, img: HTMLImageElement) {\r\n    ctx.globalCompositeOperation = 'source-in';\r\n    await this.drawImg(ctx, img);\r\n    ctx.globalCompositeOperation = 'source-over'; // reset to default\r\n  }\r\n\r\n  public drawPreviewText(ctx: CanvasRenderingContext2D) {\r\n    if (!this.text) return;\r\n\r\n    ctx.font = `${this.fontSize}px testFont`;\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText(this.text, this.canvas.width / 2, this.canvas.height / 2 + 15 + this.fontSize / 4);\r\n  }\r\n\r\n  public drawPreviewOutlineText() {\r\n    if (!this.text) return;\r\n\r\n    this.outlineCtx.font = `${this.fontSize}px testFont`;\r\n    this.outlineCtx.textAlign = 'center';\r\n    this.outlineCtx.lineWidth = this.outlineWidth;\r\n    this.outlineCtx.strokeText(\r\n      this.text,\r\n      this.canvas.width / 2,\r\n      this.canvas.height / 2 + 15 + this.fontSize / 4,\r\n    );\r\n  }\r\n\r\n  public drawPreviewOutlineOnlyText(ctx: CanvasRenderingContext2D) {\r\n    if (!this.text) return;\r\n\r\n    ctx.font = `${this.fontSize}px testFont`;\r\n    ctx.textAlign = 'center';\r\n    ctx.lineWidth = 30;\r\n    ctx.fillStyle = 'green';\r\n    ctx.strokeText(\r\n      this.text,\r\n      this.canvas.width / 2,\r\n      this.canvas.height / 2 + 15 + this.fontSize / 4,\r\n    );\r\n    ctx.globalCompositeOperation = 'destination-out';\r\n    ctx.fillText(this.text, this.canvas.width / 2, this.canvas.height / 2 + 15 + this.fontSize / 4);\r\n    ctx.globalCompositeOperation = 'source-over'; // reset to default\r\n  }\r\n\r\n  private async drawNormalMap(normalMapPatternImg: HTMLImageElement | Falsey) {\r\n    this.drawPreviewText(this.normalMapTextureCtx);\r\n\r\n    if (normalMapPatternImg) {\r\n      const pattern = this.normalMapTextureCtx.createPattern(normalMapPatternImg, 'repeat');\r\n\r\n      if (!pattern) return;\r\n\r\n      this.normalMapTextureCtx.globalCompositeOperation = 'source-in';\r\n      this.normalMapTextureCtx.rect(0, 0, this.canvasWidth, this.canvasHeight);\r\n      this.normalMapTextureCtx.fillStyle = pattern;\r\n      this.normalMapTextureCtx.fill();\r\n      this.normalMapTextureCtx.globalCompositeOperation = 'source-over';\r\n    }\r\n\r\n    console.log('toNormalMap', this.toNormalMap);\r\n    const normalMap = this.toNormalMap\r\n      ? await imgToNormalMap({\r\n          img: this.normalMapTextureCanvas,\r\n          hasPuff: this.hasPuff,\r\n        })\r\n      : this.normalMapTextureCanvas;\r\n\r\n    this.normalMapCtx.drawImage(normalMap, 0, 0);\r\n  }\r\n\r\n  private async drawOutlineNormalMap(normalMapPatternImg: HTMLImageElement | Falsey) {\r\n    this.drawPreviewOutlineOnlyText(this.normalMapOutlineTextureCtx);\r\n\r\n    if (normalMapPatternImg) {\r\n      const pattern = this.normalMapOutlineTextureCtx.createPattern(normalMapPatternImg, 'repeat');\r\n\r\n      if (!pattern) return;\r\n\r\n      this.normalMapOutlineTextureCtx.globalCompositeOperation = 'source-in';\r\n      this.normalMapOutlineTextureCtx.rect(0, 0, this.canvasWidth, this.canvasHeight);\r\n      if (this.patternType !== 'crystals') {\r\n        this.normalMapOutlineTextureCtx.fillStyle = pattern;\r\n      }\r\n      this.normalMapOutlineTextureCtx.fill();\r\n      this.normalMapOutlineTextureCtx.globalCompositeOperation = 'source-over';\r\n    }\r\n\r\n    const normalMap =\r\n      this.toNormalMap || this.patternType === 'crystals'\r\n        ? await imgToNormalMap({\r\n            img: this.normalMapOutlineTextureCanvas,\r\n            hasPuff: this.patternType === 'crystals' ? true : this.hasPuff,\r\n            blur: 4,\r\n          })\r\n        : this.normalMapOutlineTextureCanvas;\r\n    this.normalMapOutlineCtx2.drawImage(normalMap, 0, 0);\r\n  }\r\n\r\n  private async drawCrystalBg(\r\n    crystalBgImg: HTMLImageElement,\r\n    crystalBgPatternImg: HTMLImageElement,\r\n  ) {\r\n    const pattern = this.crystalBgPatternCtx.createPattern(crystalBgPatternImg, 'repeat');\r\n\r\n    if (!pattern) return;\r\n\r\n    this.crystalBgPatternCtx.rect(0, 0, this.canvasWidth, this.canvasHeight);\r\n    this.crystalBgPatternCtx.fillStyle = pattern;\r\n    this.crystalBgPatternCtx.fill();\r\n\r\n    this.crystalBgPatternCtx.globalCompositeOperation = 'source-in';\r\n    this.crystalBgPatternCtx.globalAlpha = 0.9;\r\n    this.crystalBgPatternCtx.drawImage(this.canvas, 0, 0, this.canvasWidth, this.canvasHeight);\r\n    this.crystalBgPatternCtx.drawImage(crystalBgImg, 0, 0, this.canvasWidth, this.canvasHeight);\r\n    this.crystalBgPatternCtx.globalCompositeOperation = 'source-over';\r\n\r\n    this.outlineCtx.drawImage(this.crystalBgPatternCanvas, 0, 0);\r\n  }\r\n\r\n  private printTextMapToStrokeMap() {\r\n    this.normalMapCtx.globalCompositeOperation = 'destination-in';\r\n    this.normalMapCtx.drawImage(this.normalMapTextureCanvas, 0, 0);\r\n    this.normalMapCtx.globalCompositeOperation = 'source-over'; // reset to default\r\n    this.normalMapOutlineCtx2.drawImage(this.normalMapCanvas, 0, 0);\r\n  }\r\n\r\n  public async previewText({\r\n    material,\r\n    outline,\r\n    previewImg,\r\n    normalMapPatternImg,\r\n    crystalBgPatternImg,\r\n    crystalBgImg,\r\n  }: PreviewText) {\r\n    if (!this.text) return;\r\n\r\n    this.clear();\r\n    this.showTestCanvas(this.normalMapTextureCanvas);\r\n\r\n    await this.drawNormalMap(normalMapPatternImg);\r\n    await this.drawOutlineNormalMap(normalMapPatternImg);\r\n\r\n    this.printTextMapToStrokeMap();\r\n\r\n    if (outline) {\r\n      this.drawPreviewOutlineText();\r\n      await this.maskImage(this.outlineCtx, outline);\r\n    }\r\n\r\n    this.drawPreviewText(this.ctx);\r\n\r\n    if (material) {\r\n      await this.maskImage(this.ctx, material);\r\n    }\r\n\r\n    this.outlineCtx.drawImage(this.canvas, 0, 0);\r\n    if (previewImg) previewImg.src = this.outlineCanvas.toDataURL();\r\n\r\n    console.log('crystalBgImg', crystalBgImg);\r\n    if (crystalBgImg && crystalBgPatternImg) {\r\n      this.drawCrystalBg(crystalBgImg, crystalBgPatternImg);\r\n    }\r\n  }\r\n\r\n  public mergeCanvas() {\r\n    this.outlineCtx.drawImage(this.canvas, 0, 0);\r\n  }\r\n\r\n  getOutlineCanvas() {\r\n    return this.outlineCanvas;\r\n  }\r\n  getNormalMapTextureCanvas() {\r\n    return this.normalMapTextureCanvas;\r\n  }\r\n  getNormalMapOutlineCanvas() {\r\n    return this.normalMapOutlineCanvas;\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}