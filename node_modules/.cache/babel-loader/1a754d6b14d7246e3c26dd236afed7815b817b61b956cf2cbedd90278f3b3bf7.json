{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Reian\\\\Desktop\\\\Work\\\\Freelance\\\\Boxxer World\\\\boxxerworld-shopify-frontend\\\\customiser\\\\src\\\\components\\\\nav\\\\NavHeader\\\\NavHeaderScroll.tsx\",\n  _s = $RefreshSig$();\nimport DontShowAgain from '@components/ui/DontShowAgain';\nimport { usePortalRef } from '@hooks';\nimport { useCustomiserStore } from '@store/customiser';\nimport { useEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NavHeaderScroll = ({\n  styles,\n  additionalFinishedNavs\n}) => {\n  _s();\n  const {\n    navItems,\n    selectedNav,\n    setSelectedNav,\n    deleteText\n  } = useCustomiserStore();\n  const popupPortalRef = usePortalRef('popupContainer');\n  const [showPopup, setShowPopup] = useState(false);\n  const {\n    texts,\n    updateText,\n    parts\n  } = useCustomiserStore(state => state);\n  const editText = texts === null || texts === void 0 ? void 0 : texts.find(g => g.edit);\n  const navIndex = navItems.findIndex(nav => nav.name === (selectedNav === null || selectedNav === void 0 ? void 0 : selectedNav.name));\n  let finishedNavs = parts.map(part => {\n    const partName = part.part.name;\n    if (!partName) return;\n    const isFinishedPart = !!navItems.find(navItem => {\n      return navItem.name === partName;\n    });\n    return {\n      name: partName,\n      isFinished: isFinishedPart\n    };\n  });\n  finishedNavs = [...finishedNavs, ...(additionalFinishedNavs || [])];\n  useEffect(() => {\n    if (texts.length > 0) {\n      console.log('texts', texts);\n      const iText = finishedNavs.findIndex(nav => (nav === null || nav === void 0 ? void 0 : nav.name) === 'Text');\n      if (iText === -1) {\n        finishedNavs.push({\n          name: 'Text',\n          isFinished: true\n        });\n      } else {\n        finishedNavs.map(nav => {\n          if ((nav === null || nav === void 0 ? void 0 : nav.name) === 'Text') {\n            nav.isFinished = true;\n          }\n        });\n      }\n    }\n  }, [texts]);\n  const isFinishedNav = name => {\n    if (!name) return;\n    const finishedNav = finishedNavs.find(nav => nav && nav.name === name);\n    if (!finishedNav) return;\n    return finishedNav.isFinished;\n  };\n  const localStorageItem = localStorage.getItem('navConfirmText');\n  const shouldShowConfirmCancelText = !localStorageItem;\n  const cancelTextEdit = () => {\n    if (editText !== null && editText !== void 0 && editText.key) {\n      updateText(editText.key, {\n        decalFreeze: false,\n        edit: false,\n        hasApplied: true\n      });\n      if (!(editText !== null && editText !== void 0 && editText.hasApplied)) {\n        deleteText(editText === null || editText === void 0 ? void 0 : editText.key);\n      }\n    }\n    setSelectedNav(navIndex);\n  };\n  const navClickHandler = (index, name) => {\n    if (index === navIndex) return;\n    if (editText !== null && editText !== void 0 && editText.text && name && (name === null || name === void 0 ? void 0 : name.toLowerCase()) !== 'text') {\n      setShowPopup(true);\n    } else {\n      setSelectedNav(index);\n    }\n  };\n  if (!popupPortalRef) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles === null || styles === void 0 ? void 0 : styles.navHeaderScroll,\n      children: navItems.map((item, index) => {\n        const classes = `\n            ${(selectedNav === null || selectedNav === void 0 ? void 0 : selectedNav.name) === item.name ? styles === null || styles === void 0 ? void 0 : styles.selected : ''}\n            ${styles === null || styles === void 0 ? void 0 : styles.tab}\n          `;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes,\n          onClick: () => navClickHandler(index, item.name),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: `${styles === null || styles === void 0 ? void 0 : styles.dot} ${isFinishedNav(item.name) && (styles === null || styles === void 0 ? void 0 : styles.finished)}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles === null || styles === void 0 ? void 0 : styles.navName,\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), showPopup && shouldShowConfirmCancelText && /*#__PURE__*/createPortal( /*#__PURE__*/_jsxDEV(DontShowAgain, {\n      cb: cancelTextEdit,\n      setShowNotification: setShowPopup,\n      notifName: 'navConfirmText',\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Cancel text customization?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }, this), popupPortalRef)]\n  }, void 0, true);\n};\n_s(NavHeaderScroll, \"AERYzk973kJc4njLSFmzPDDJvHI=\", false, function () {\n  return [useCustomiserStore, usePortalRef, useCustomiserStore];\n});\n_c = NavHeaderScroll;\nexport default NavHeaderScroll;\nvar _c;\n$RefreshReg$(_c, \"NavHeaderScroll\");","map":{"version":3,"names":["DontShowAgain","usePortalRef","useCustomiserStore","useEffect","useState","createPortal","jsxDEV","_jsxDEV","Fragment","_Fragment","NavHeaderScroll","styles","additionalFinishedNavs","_s","navItems","selectedNav","setSelectedNav","deleteText","popupPortalRef","showPopup","setShowPopup","texts","updateText","parts","state","editText","find","g","edit","navIndex","findIndex","nav","name","finishedNavs","map","part","partName","isFinishedPart","navItem","isFinished","length","console","log","iText","push","isFinishedNav","finishedNav","localStorageItem","localStorage","getItem","shouldShowConfirmCancelText","cancelTextEdit","key","decalFreeze","hasApplied","navClickHandler","index","text","toLowerCase","children","className","navHeaderScroll","item","classes","selected","tab","onClick","dot","finished","fileName","_jsxFileName","lineNumber","columnNumber","navName","cb","setShowNotification","notifName","_c","$RefreshReg$"],"sources":["C:/Users/Reian/Desktop/Work/Freelance/Boxxer World/boxxerworld-shopify-frontend/customiser/src/components/nav/NavHeader/NavHeaderScroll.tsx"],"sourcesContent":["import DontShowAgain from '@components/ui/DontShowAgain';\r\nimport { usePortalRef } from '@hooks';\r\nimport { useCustomiserStore } from '@store/customiser';\r\nimport { Falsey } from 'lodash';\r\nimport { useEffect, useState } from 'react';\r\nimport { createPortal } from 'react-dom';\r\n\r\ninterface NavHeaderScrollProps {\r\n  styles?: {\r\n    readonly [key: string]: string;\r\n  };\r\n  additionalFinishedNavs?: {\r\n    name: string;\r\n    isFinished: boolean;\r\n  }[];\r\n}\r\n\r\nconst NavHeaderScroll = ({ styles, additionalFinishedNavs }: NavHeaderScrollProps) => {\r\n  const { navItems, selectedNav, setSelectedNav, deleteText } = useCustomiserStore();\r\n  const popupPortalRef = usePortalRef('popupContainer');\r\n  const [showPopup, setShowPopup] = useState<boolean>(false);\r\n\r\n  const { texts, updateText, parts } = useCustomiserStore((state) => state);\r\n  const editText = texts?.find((g) => g.edit);\r\n\r\n  const navIndex = navItems.findIndex((nav) => nav.name === selectedNav?.name);\r\n\r\n  let finishedNavs = parts.map((part) => {\r\n    const partName = part.part.name;\r\n    if (!partName) return;\r\n    const isFinishedPart = !!navItems.find((navItem) => {\r\n      return navItem.name === partName;\r\n    });\r\n    return {\r\n      name: partName,\r\n      isFinished: isFinishedPart,\r\n    };\r\n  });\r\n  finishedNavs = [...finishedNavs, ...(additionalFinishedNavs || [])];\r\n\r\n  useEffect(() => {\r\n    if (texts.length > 0) {\r\n      console.log('texts', texts);\r\n\r\n      const iText = finishedNavs.findIndex((nav) => nav?.name === 'Text');\r\n      if (iText === -1) {\r\n        finishedNavs.push({\r\n          name: 'Text',\r\n          isFinished: true,\r\n        });\r\n      } else {\r\n        finishedNavs.map((nav) => {\r\n          if (nav?.name === 'Text') {\r\n            nav.isFinished = true;\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }, [texts]);\r\n\r\n  const isFinishedNav = (name?: string | Falsey) => {\r\n    if (!name) return;\r\n\r\n    const finishedNav = finishedNavs.find((nav) => nav && nav.name === name);\r\n\r\n    if (!finishedNav) return;\r\n\r\n    return finishedNav.isFinished;\r\n  };\r\n\r\n  const localStorageItem = localStorage.getItem('navConfirmText');\r\n  const shouldShowConfirmCancelText = !localStorageItem;\r\n\r\n  const cancelTextEdit = () => {\r\n    if (editText?.key) {\r\n      updateText(editText.key, {\r\n        decalFreeze: false,\r\n        edit: false,\r\n        hasApplied: true,\r\n      });\r\n\r\n      if (!editText?.hasApplied) {\r\n        deleteText(editText?.key);\r\n      }\r\n    }\r\n    setSelectedNav(navIndex);\r\n  };\r\n\r\n  const navClickHandler = (index: number, name: string | Falsey) => {\r\n    if (index === navIndex) return;\r\n    if (editText?.text && name && name?.toLowerCase() !== 'text') {\r\n      setShowPopup(true);\r\n    } else {\r\n      setSelectedNav(index);\r\n    }\r\n  };\r\n\r\n  if (!popupPortalRef) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={styles?.navHeaderScroll}>\r\n        {navItems.map((item, index) => {\r\n          const classes = `\r\n            ${selectedNav?.name === item.name ? styles?.selected : ''}\r\n            ${styles?.tab}\r\n          `;\r\n          return (\r\n            <div className={classes} key={index} onClick={() => navClickHandler(index, item.name)}>\r\n              <span className={`${styles?.dot} ${isFinishedNav(item.name) && styles?.finished}`} />\r\n              <span className={styles?.navName}>{item.name}</span>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      {showPopup &&\r\n        shouldShowConfirmCancelText &&\r\n        createPortal(\r\n          <DontShowAgain\r\n            cb={cancelTextEdit}\r\n            setShowNotification={setShowPopup}\r\n            notifName={'navConfirmText'}\r\n          >\r\n            <span>Cancel text customization?</span>\r\n          </DontShowAgain>,\r\n          popupPortalRef,\r\n        )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavHeaderScroll;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}