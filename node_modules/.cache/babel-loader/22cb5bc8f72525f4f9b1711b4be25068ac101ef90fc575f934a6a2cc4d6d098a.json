{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Reian\\\\Desktop\\\\Work\\\\Freelance\\\\Boxxer World\\\\boxxerworld-shopify-frontend\\\\customiser\\\\src\\\\components\\\\nav\\\\NavText\\\\NavTextPlaceTextGuide.tsx\",\n  _s = $RefreshSig$();\nimport Button from '@components/ui/Button';\nimport InfoDisplay from '@components/ui/InfoButton/InfoDisplay';\nimport { usePortalRef } from '@hooks';\nimport { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NavTextApplyText = ({\n  onClick,\n  children\n}) => {\n  _s();\n  const portalRef = usePortalRef('popupContainer');\n  const [shouldShow, setShouldShow] = useState(false);\n  const applyTextHandler = () => {\n    onClick();\n    setShouldShow(true);\n  };\n  if (!portalRef) return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [children || /*#__PURE__*/_jsxDEV(Button, {\n      onClick: applyTextHandler,\n      colour: \"red\",\n      children: \"APPLY TEXT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this), shouldShow && /*#__PURE__*/createPortal( /*#__PURE__*/_jsxDEV(InfoDisplay, {\n      cb: () => {\n        setShouldShow(false);\n      },\n      title: \"Apply Text\",\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Click where you want the text to go\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        style: {\n          maxWidth: '100%'\n        },\n        src: \"examples/NavText/sample-apply-text.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }, this), portalRef)]\n  }, void 0, true);\n};\n_s(NavTextApplyText, \"OA/sYpHKYHlxtJ2f1s/y3ByubxU=\", false, function () {\n  return [usePortalRef];\n});\n_c = NavTextApplyText;\nexport default NavTextApplyText;\nvar _c;\n$RefreshReg$(_c, \"NavTextApplyText\");","map":{"version":3,"names":["Button","InfoDisplay","usePortalRef","useState","createPortal","jsxDEV","_jsxDEV","Fragment","_Fragment","NavTextApplyText","onClick","children","_s","portalRef","shouldShow","setShouldShow","applyTextHandler","colour","fileName","_jsxFileName","lineNumber","columnNumber","cb","title","style","maxWidth","src","_c","$RefreshReg$"],"sources":["C:/Users/Reian/Desktop/Work/Freelance/Boxxer World/boxxerworld-shopify-frontend/customiser/src/components/nav/NavText/NavTextPlaceTextGuide.tsx"],"sourcesContent":["import Button from '@components/ui/Button';\r\nimport InfoDisplay from '@components/ui/InfoButton/InfoDisplay';\r\nimport { usePortalRef } from '@hooks';\r\nimport { useRef, useState } from 'react';\r\nimport { createPortal } from 'react-dom';\r\n\r\ninterface Props {\r\n  onClick: () => void;\r\n}\r\n\r\nconst NavTextApplyText = ({ onClick, children }: Props) => {\r\n  const portalRef = usePortalRef('popupContainer');\r\n  const [shouldShow, setShouldShow] = useState(false);\r\n\r\n  const applyTextHandler = () => {\r\n    onClick();\r\n    setShouldShow(true);\r\n  };\r\n\r\n  if (!portalRef) return null;\r\n\r\n  return (\r\n    <>\r\n      {children || (\r\n        <Button onClick={applyTextHandler} colour='red'>\r\n          APPLY TEXT\r\n        </Button>\r\n      )}\r\n      {shouldShow &&\r\n        createPortal(\r\n          <InfoDisplay\r\n            cb={() => {\r\n              setShouldShow(false);\r\n            }}\r\n            title='Apply Text'\r\n          >\r\n            <h5>Click where you want the text to go</h5>\r\n            <img style={{ maxWidth: '100%' }} src='examples/NavText/sample-apply-text.png' />\r\n          </InfoDisplay>,\r\n          portalRef,\r\n        )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavTextApplyText;\r\n"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,uBAAuB;AAC1C,OAAOC,WAAW,MAAM,uCAAuC;AAC/D,SAASC,YAAY,QAAQ,QAAQ;AACrC,SAAiBC,QAAQ,QAAQ,OAAO;AACxC,SAASC,YAAY,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAMzC,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EACzD,MAAMC,SAAS,GAAGX,YAAY,CAAC,gBAAgB,CAAC;EAChD,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMa,gBAAgB,GAAGA,CAAA,KAAM;IAC7BN,OAAO,CAAC,CAAC;IACTK,aAAa,CAAC,IAAI,CAAC;EACrB,CAAC;EAED,IAAI,CAACF,SAAS,EAAE,OAAO,IAAI;EAE3B,oBACEP,OAAA,CAAAE,SAAA;IAAAG,QAAA,GACGA,QAAQ,iBACPL,OAAA,CAACN,MAAM;MAACU,OAAO,EAAEM,gBAAiB;MAACC,MAAM,EAAC,KAAK;MAAAN,QAAA,EAAC;IAEhD;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CACT,EACAP,UAAU,iBACTV,YAAY,eACVE,OAAA,CAACL,WAAW;MACVqB,EAAE,EAAEA,CAAA,KAAM;QACRP,aAAa,CAAC,KAAK,CAAC;MACtB,CAAE;MACFQ,KAAK,EAAC,YAAY;MAAAZ,QAAA,gBAElBL,OAAA;QAAAK,QAAA,EAAI;MAAmC;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5Cf,OAAA;QAAKkB,KAAK,EAAE;UAAEC,QAAQ,EAAE;QAAO,CAAE;QAACC,GAAG,EAAC;MAAwC;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtE,CAAC,EACdR,SACF,CAAC;EAAA,eACH,CAAC;AAEP,CAAC;AAACD,EAAA,CAjCIH,gBAAgB;EAAA,QACFP,YAAY;AAAA;AAAAyB,EAAA,GAD1BlB,gBAAgB;AAmCtB,eAAeA,gBAAgB;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}