{"ast":null,"code":"import { create } from 'zustand';\nimport createContext from 'zustand/context';\nimport produce from 'immer';\nimport { devtools } from 'zustand/middleware';\nimport { uniqBy } from 'lodash';\nconst uniqueColourGroups = array => uniqBy(array, 'id');\nconst uniqueMaterialTypes = array => uniqBy(array, 'id');\nconst uniqueMaterials = array => uniqBy(array, 'id');\nconst initialState = {\n  colourGroups: [],\n  materialTypes: [],\n  materials: []\n};\nconst createMaterialGroup = (set, get) => ({\n  ...initialState,\n  filteredMaterials: () => {\n    const materials = get().materials;\n    const colourGroup = get().selectedColourGroup;\n    const filteredMaterials = materials.filter(m => {\n      var _m$attributes, _m$attributes$colourG;\n      return (_m$attributes = m.attributes) === null || _m$attributes === void 0 ? void 0 : (_m$attributes$colourG = _m$attributes.colourGroups) === null || _m$attributes$colourG === void 0 ? void 0 : _m$attributes$colourG.data.find(g => g.id === (colourGroup === null || colourGroup === void 0 ? void 0 : colourGroup.id));\n    });\n    return filteredMaterials;\n  },\n  resetMaterialGroup: () => {\n    console.log('resetMaterialGroup');\n    set(produce(state => {\n      // state = {\n      //   ...state,\n      //   ...initialState,\n      // };\n      state.materials = [];\n    }));\n  },\n  setMaterials: (materials, materialType, colourGroup) => {\n    set(produce(state => {\n      const colourGroups = materials.flatMap(d => {\n        var _d$attributes, _d$attributes$colourG;\n        return (_d$attributes = d.attributes) === null || _d$attributes === void 0 ? void 0 : (_d$attributes$colourG = _d$attributes.colourGroups) === null || _d$attributes$colourG === void 0 ? void 0 : _d$attributes$colourG.data;\n      });\n      state.colourGroups = uniqueColourGroups(colourGroups);\n      if (colourGroup) {\n        state.selectedColourGroup = colourGroup;\n      } else {\n        state.selectedColourGroup = state.colourGroups[0];\n      }\n      const materialTypes = materials.filter(m => {\n        var _m$attributes2, _m$attributes2$colour;\n        return (_m$attributes2 = m.attributes) === null || _m$attributes2 === void 0 ? void 0 : (_m$attributes2$colour = _m$attributes2.colourGroups) === null || _m$attributes2$colour === void 0 ? void 0 : _m$attributes2$colour.data.find(g => {\n          var _state$selectedColour;\n          return g.id === ((_state$selectedColour = state.selectedColourGroup) === null || _state$selectedColour === void 0 ? void 0 : _state$selectedColour.id);\n        });\n      }).map(m => {\n        var _m$attributes3, _m$attributes3$type;\n        return (_m$attributes3 = m.attributes) === null || _m$attributes3 === void 0 ? void 0 : (_m$attributes3$type = _m$attributes3.type) === null || _m$attributes3$type === void 0 ? void 0 : _m$attributes3$type.data;\n      });\n      state.materialTypes = uniqueMaterialTypes(materialTypes);\n      if (materialType) {\n        state.selectedMaterialType = materialType;\n      } else {\n        state.selectedMaterialType = state.materialTypes[0];\n      }\n      state.materials = uniqueMaterials(materials);\n    }));\n  },\n  setColourGroup: colourGroup => {\n    set(produce(state => {\n      state.selectedColourGroup = colourGroup;\n      const materialTypes = state.materials.filter(m => {\n        var _m$attributes4, _m$attributes4$colour;\n        return (_m$attributes4 = m.attributes) === null || _m$attributes4 === void 0 ? void 0 : (_m$attributes4$colour = _m$attributes4.colourGroups) === null || _m$attributes4$colour === void 0 ? void 0 : _m$attributes4$colour.data.find(g => {\n          var _state$selectedColour2;\n          return g.id === ((_state$selectedColour2 = state.selectedColourGroup) === null || _state$selectedColour2 === void 0 ? void 0 : _state$selectedColour2.id);\n        });\n      }).map(m => {\n        var _m$attributes5, _m$attributes5$type;\n        return (_m$attributes5 = m.attributes) === null || _m$attributes5 === void 0 ? void 0 : (_m$attributes5$type = _m$attributes5.type) === null || _m$attributes5$type === void 0 ? void 0 : _m$attributes5$type.data;\n      });\n      state.materialTypes = uniqueMaterialTypes(materialTypes);\n    }));\n  },\n  setMaterialType: materialType => {\n    set(produce(state => {\n      state.selectedMaterialType = materialType;\n    }));\n  }\n});\nexport const {\n  Provider,\n  useStore: useMaterialGroupStore\n} = createContext();\nexport const createStore = () => create()(devtools(createMaterialGroup));","map":{"version":3,"names":["create","createContext","produce","devtools","uniqBy","uniqueColourGroups","array","uniqueMaterialTypes","uniqueMaterials","initialState","colourGroups","materialTypes","materials","createMaterialGroup","set","get","filteredMaterials","colourGroup","selectedColourGroup","filter","m","_m$attributes","_m$attributes$colourG","attributes","data","find","g","id","resetMaterialGroup","console","log","state","setMaterials","materialType","flatMap","d","_d$attributes","_d$attributes$colourG","_m$attributes2","_m$attributes2$colour","_state$selectedColour","map","_m$attributes3","_m$attributes3$type","type","selectedMaterialType","setColourGroup","_m$attributes4","_m$attributes4$colour","_state$selectedColour2","_m$attributes5","_m$attributes5$type","setMaterialType","Provider","useStore","useMaterialGroupStore","createStore"],"sources":["C:/Users/Reian/Desktop/Work/Freelance/Boxxer World/boxxerworld-shopify-frontend/customiser/src/components/nav/MaterialGroup/MaterialGroupState.ts"],"sourcesContent":["import { create, StateCreator, StoreApi } from 'zustand';\r\nimport createContext from 'zustand/context';\r\nimport produce from 'immer';\r\nimport { devtools } from 'zustand/middleware';\r\nimport {\r\n  MaterialColourGroupEntity,\r\n  MaterialEntity,\r\n  MaterialTypeEntity,\r\n  Maybe,\r\n} from '@graphql/generated/graphql';\r\nimport { uniqBy } from 'lodash';\r\n\r\nconst uniqueColourGroups = (array: MaterialColourGroupEntity[]) => uniqBy(array, 'id');\r\nconst uniqueMaterialTypes = (array: MaterialTypeEntity[]) => uniqBy(array, 'id');\r\nconst uniqueMaterials = (array: MaterialEntity[]) => uniqBy(array, 'id');\r\ninterface MaterialGroupInitialState {\r\n  colourGroups: MaterialColourGroupEntity[];\r\n  materialTypes: MaterialTypeEntity[];\r\n  materials: MaterialEntity[];\r\n  selectedColourGroup?: MaterialColourGroupEntity;\r\n  selectedMaterialType?: MaterialTypeEntity;\r\n}\r\nexport interface MaterialGroupState extends MaterialGroupInitialState {\r\n  resetMaterialGroup: () => void;\r\n  setMaterials: (\r\n    materials: MaterialEntity[],\r\n    materialType?: Maybe<MaterialTypeEntity>,\r\n    colourGroup?: Maybe<MaterialColourGroupEntity>,\r\n  ) => void;\r\n  filteredMaterials: () => MaterialEntity[];\r\n  setColourGroup: (colourGroup: MaterialColourGroupEntity) => void;\r\n  setMaterialType: (materialType: MaterialTypeEntity) => void;\r\n}\r\n\r\nconst initialState: MaterialGroupInitialState = {\r\n  colourGroups: [],\r\n  materialTypes: [],\r\n  materials: [],\r\n};\r\n\r\nconst createMaterialGroup: StateCreator<MaterialGroupState, [['zustand/devtools', never]], []> = (\r\n  set,\r\n  get,\r\n) => ({\r\n  ...initialState,\r\n  filteredMaterials: () => {\r\n    const materials = get().materials;\r\n    const colourGroup = get().selectedColourGroup;\r\n    const filteredMaterials = materials.filter((m) =>\r\n      m.attributes?.colourGroups?.data.find((g) => g.id === colourGroup?.id),\r\n    );\r\n    return filteredMaterials;\r\n  },\r\n  resetMaterialGroup: () => {\r\n    console.log('resetMaterialGroup');\r\n    set(\r\n      produce((state: MaterialGroupState) => {\r\n        // state = {\r\n        //   ...state,\r\n        //   ...initialState,\r\n        // };\r\n        state.materials = [];\r\n      }),\r\n    );\r\n  },\r\n  setMaterials: (\r\n    materials: MaterialEntity[],\r\n    materialType?: Maybe<MaterialTypeEntity>,\r\n    colourGroup?: Maybe<MaterialColourGroupEntity>,\r\n  ) => {\r\n    set(\r\n      produce((state: MaterialGroupState) => {\r\n        const colourGroups = materials.flatMap(\r\n          (d) => d.attributes?.colourGroups?.data,\r\n        ) as MaterialColourGroupEntity[];\r\n        state.colourGroups = uniqueColourGroups(colourGroups);\r\n        if (colourGroup) {\r\n          state.selectedColourGroup = colourGroup;\r\n        } else {\r\n          state.selectedColourGroup = state.colourGroups[0];\r\n        }\r\n\r\n        const materialTypes = materials\r\n          .filter((m) =>\r\n            m.attributes?.colourGroups?.data.find((g) => g.id === state.selectedColourGroup?.id),\r\n          )\r\n          .map((m) => m.attributes?.type?.data) as MaterialTypeEntity[];\r\n        state.materialTypes = uniqueMaterialTypes(materialTypes);\r\n\r\n        if (materialType) {\r\n          state.selectedMaterialType = materialType;\r\n        } else {\r\n          state.selectedMaterialType = state.materialTypes[0];\r\n        }\r\n\r\n        state.materials = uniqueMaterials(materials);\r\n      }),\r\n    );\r\n  },\r\n  setColourGroup: (colourGroup: MaterialColourGroupEntity) => {\r\n    set(\r\n      produce((state: MaterialGroupState) => {\r\n        state.selectedColourGroup = colourGroup;\r\n        const materialTypes = state.materials\r\n          .filter((m) =>\r\n            m.attributes?.colourGroups?.data.find((g) => g.id === state.selectedColourGroup?.id),\r\n          )\r\n          .map((m) => m.attributes?.type?.data) as MaterialTypeEntity[];\r\n        state.materialTypes = uniqueMaterialTypes(materialTypes);\r\n      }),\r\n    );\r\n  },\r\n  setMaterialType: (materialType: MaterialTypeEntity) => {\r\n    set(\r\n      produce((state: MaterialGroupState) => {\r\n        state.selectedMaterialType = materialType;\r\n      }),\r\n    );\r\n  },\r\n});\r\n\r\nexport const { Provider, useStore: useMaterialGroupStore } =\r\n  createContext<StoreApi<MaterialGroupState>>();\r\n\r\nexport const createStore = () => create<MaterialGroupState>()(devtools(createMaterialGroup));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}